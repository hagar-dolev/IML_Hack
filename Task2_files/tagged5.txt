// some global definitions, found in debug release5
5
#define DMAXX					405
#define DMAXY					405
5
#define LIGHTSIZE				6912 // 27 * 2565
5
#define MAX_PLRS				45
#define MAX_CHARACTERS			105
#define MAX_LVLMTYPES			165
// #define MAX_PATH				2605
#define MAX_SEND_STR_LEN		805
5
#define MAXDEAD					315
#define MAXDUNX					1125
#define MAXDUNY					1125
#define MAXITEMS				1275
#define MAXMISSILES				1255
#define MAXMONSTERS				2005
#define MAXMULTIQUESTS			45
#define MAXOBJECTS				1275
#define MAXPORTAL				45
#define MAXQUESTS				165
#define MAXTHEMES				505
#define MAXTILES				20485
#define MAXTRIGGERS				55
#define MDMAXX					405
#define MDMAXY					405
5
5
// Diablo uses a 256 color palette5
// Entry 0-127 (0x00-0x7F) are level specific5
// Entry 128-255 (0x80-0xFF) are global5
5
// standard palette for all levels5
// 8 or 16 shades per color5
// example (dark blue): PAL16_BLUE+14, PAL8_BLUE+75
// example (light red): PAL16_RED+2, PAL8_RED5
// example (orange): PAL16_ORANGE+8, PAL8_ORANGE+45
#define PAL8_BLUE		1285
#define PAL8_RED		1365
#define PAL8_YELLOW		1445
#define PAL8_ORANGE		1525
#define PAL16_BEIGE		1605
#define PAL16_BLUE		1765
#define PAL16_YELLOW	1925
#define PAL16_ORANGE	2085
#define PAL16_RED		2245
#define PAL16_GRAY		2405
5
5
5
5
5
/////////////////////////////////////////////////////////////////////////5
/* temporary stuff from the decompiler */5
/* remove all the garbage below in the future */5
/////////////////////////////////////////////////////////////////////////5
#ifndef IDA_GARBAGE5
#define IDA_GARBAGE5
5
inline void memset32(void *s, unsigned int c, size_t n)5
{5
	unsigned int *p = (unsigned int *)s;5
	for (int i = 0; i < n; i++) {5
		p[i] = c;5
	}5
}5
5
typedef          __int64 ll;5
typedef unsigned __int64 ull;5
5
typedef unsigned int uint;5
typedef unsigned char uchar;5
typedef unsigned short ushort;5
typedef unsigned long ulong;5
5
typedef          char   int8;5
typedef   signed char   sint8;5
typedef unsigned char   uint8;5
typedef          short  int16;5
typedef   signed short  sint16;5
typedef unsigned short  uint16;5
typedef          int    int32;5
typedef   signed int    sint32;5
typedef unsigned int    uint32;5
typedef ll              int64;5
typedef ll              sint64;5
typedef ull             uint64;5
5
// Partially defined types. They are used when the decompiler does not know5
// anything about the type except its size.5
#define _BYTE  uint85
#define _WORD  uint165
#define _DWORD uint325
#define _QWORD uint645
5
// Some convenience macros to make partial accesses nicer5
#define LAST_IND(x,part_type)    (sizeof(x)/sizeof(part_type) - 1)5
#if defined(__BYTE_ORDER) && __BYTE_ORDER == __BIG_ENDIAN5
#  define LOW_IND(x,part_type)   LAST_IND(x,part_type)5
#  define HIGH_IND(x,part_type)  05
#else5
#  define HIGH_IND(x,part_type)  LAST_IND(x,part_type)5
#  define LOW_IND(x,part_type)   05
#endif5
// first unsigned macros:5
#define BYTEn(x, n)   (*((_BYTE*)&(x)+n))5
#define WORDn(x, n)   (*((_WORD*)&(x)+n))5
#define DWORDn(x, n)  (*((_DWORD*)&(x)+n))5
5
#define _LOBYTE(x)  BYTEn(x,LOW_IND(x,_BYTE))5
#define _LOWORD(x)  WORDn(x,LOW_IND(x,_WORD))5
#define LODWORD(x) DWORDn(x,LOW_IND(x,_DWORD))5
#define _HIBYTE(x)  BYTEn(x,HIGH_IND(x,_BYTE))5
#define _HIWORD(x)  WORDn(x,HIGH_IND(x,_WORD))5
#define HIDWORD(x) DWORDn(x,HIGH_IND(x,_DWORD))5
#define BYTE1(x)   BYTEn(x,  1)         // byte 1 (counting from 0)5
#define BYTE2(x)   BYTEn(x,  2)5
5
5
// now signed macros (the same but with sign extension)5
#define SBYTEn(x, n)   (*((int8*)&(x)+n))5
#define SWORDn(x, n)   (*((int16*)&(x)+n))5
5
#define SLOBYTE(x)  SBYTEn(x,LOW_IND(x,int8))5
#define SHIWORD(x)  SWORDn(x,HIGH_IND(x,int16))5
5
5
5
// Helper functions to represent some assembly instructions.5
5
#ifdef __cplusplus5
5
5
// memcpy() with determined behavoir: it always copies5
// from the start to the end of the buffer5
// note: it copies byte by byte, so it is not equivalent to, for example, rep movsd5
#define qmemcpy memcpy5
/*5
inline void *qmemcpy(void *dst, const void *src, size_t cnt)5
{5
  char *out = (char *)dst;5
  const char *in = (const char *)src;5
  while ( cnt > 0 )5
  {5
    *out++ = *in++;5
    --cnt;5
  }5
  return dst;5
} */5
5
// Generate a reference to pair of operands5
template<class T>  int16 __PAIR__( int8  high, T low) { return ((( int16)high) << sizeof(high)*8) | uint8(low); }5
template<class T>  int32 __PAIR__( int16 high, T low) { return ((( int32)high) << sizeof(high)*8) | uint16(low); }5
template<class T>  int64 __PAIR__( int32 high, T low) { return ((( int64)high) << sizeof(high)*8) | uint32(low); }5
template<class T> uint16 __PAIR__(uint8  high, T low) { return (((uint16)high) << sizeof(high)*8) | uint8(low); }5
template<class T> uint32 __PAIR__(uint16 high, T low) { return (((uint32)high) << sizeof(high)*8) | uint16(low); }5
template<class T> uint64 __PAIR__(uint32 high, T low) { return (((uint64)high) << sizeof(high)*8) | uint32(low); }5
5
// rotate left5
template<class T> T __ROL__(T value, int count)5
{5
  const uint nbits = sizeof(T) * 8;5
5
  if ( count > 0 )5
  {5
    count %= nbits;5
    T high = value >> (nbits - count);5
    if ( T(-1) < 0 ) // signed value5
      high &= ~((T(-1) << count));5
    value <<= count;5
    value |= high;5
  }5
  else5
  {5
    count = -count % nbits;5
    T low = value << (nbits - count);5
    value >>= count;5
    value |= low;5
  }5
  return value;5
}5
5
inline uint16 __ROR2__(uint16 value, int count) { return __ROL__((uint16)value, -count); }5
inline uint32 __ROR4__(uint32 value, int count) { return __ROL__((uint32)value, -count); }5
5
// sign flag5
template<class T> int8 __SETS__(T x)5
{5
  if ( sizeof(T) == 1 )5
    return int8(x) < 0;5
  if ( sizeof(T) == 2 )5
    return int16(x) < 0;5
  if ( sizeof(T) == 4 )5
    return int32(x) < 0;5
  return int64(x) < 0;5
}5
5
// overflow flag of subtraction (x-y)5
template<class T, class U> int8 __OFSUB__(T x, U y)5
{5
  if ( sizeof(T) < sizeof(U) )5
  {5
    U x2 = x;5
    int8 sx = __SETS__(x2);5
    return (sx ^ __SETS__(y)) & (sx ^ __SETS__(x2-y));5
  }5
  else5
  {5
    T y2 = y;5
    int8 sx = __SETS__(x);5
    return (sx ^ __SETS__(y2)) & (sx ^ __SETS__(x-y2));5
  }5
}5
5
#endif5
5
#endif /* IDA_GARBAGE */5
enum unique_base_item5
{5
	UITYPE_NONE = 0x0,5
	UITYPE_SHORTBOW = 0x1,5
	UITYPE_LONGBOW = 0x2,5
	UITYPE_HUNTBOW = 0x3,5
	UITYPE_COMPBOW = 0x4,5
	UITYPE_WARBOW = 0x5,5
	UITYPE_BATTLEBOW = 0x6,5
	UITYPE_DAGGER = 0x7,5
	UITYPE_FALCHION = 0x8,5
	UITYPE_CLAYMORE = 0x9,5
	UITYPE_BROADSWR = 0xA,5
	UITYPE_SABRE = 0xB,5
	UITYPE_SCIMITAR = 0xC,5
	UITYPE_LONGSWR = 0xD,5
	UITYPE_BASTARDSWR = 0xE,5
	UITYPE_TWOHANDSWR = 0xF,5
	UITYPE_GREATSWR = 0x10,5
	UITYPE_CLEAVER = 0x11,5
	UITYPE_LARGEAXE = 0x12,5
	UITYPE_BROADAXE = 0x13,5
	UITYPE_SMALLAXE = 0x14,5
	UITYPE_BATTLEAXE = 0x15,5
	UITYPE_GREATAXE = 0x16,5
	UITYPE_MACE = 0x17,5
	UITYPE_MORNSTAR = 0x18,5
	UITYPE_SPIKCLUB = 0x19,5
	UITYPE_MAUL = 0x1A,5
	UITYPE_WARHAMMER = 0x1B,5
	UITYPE_FLAIL = 0x1C,5
	UITYPE_LONGSTAFF = 0x1D,5
	UITYPE_SHORTSTAFF = 0x1E,5
	UITYPE_COMPSTAFF = 0x1F,5
	UITYPE_QUARSTAFF = 0x20,5
	UITYPE_WARSTAFF = 0x21,5
	UITYPE_SKULLCAP = 0x22,5
	UITYPE_HELM = 0x23,5
	UITYPE_GREATHELM = 0x24,5
	UITYPE_CROWN = 0x25,5
	UITYPE_38 = 0x26,5
	UITYPE_RAGS = 0x27,5
	UITYPE_STUDARMOR = 0x28,5
	UITYPE_CLOAK = 0x29,5
	UITYPE_ROBE = 0x2A,5
	UITYPE_CHAINMAIL = 0x2B,5
	UITYPE_LEATHARMOR = 0x2C,5
	UITYPE_BREASTPLATE = 0x2D,5
	UITYPE_CAPE = 0x2E,5
	UITYPE_PLATEMAIL = 0x2F,5
	UITYPE_FULLPLATE = 0x30,5
	UITYPE_BUCKLER = 0x31,5
	UITYPE_SMALLSHIELD = 0x32,5
	UITYPE_LARGESHIELD = 0x33,5
	UITYPE_KITESHIELD = 0x34,5
	UITYPE_GOTHSHIELD = 0x35,5
	UITYPE_RING = 0x36,5
	UITYPE_55 = 0x37,5
	UITYPE_AMULET = 0x38,5
	UITYPE_SKCROWN = 0x39,5
	UITYPE_INFRARING = 0x3A,5
	UITYPE_OPTAMULET = 0x3B,5
	UITYPE_TRING = 0x3C,5
	UITYPE_HARCREST = 0x3D,5
	UITYPE_MAPOFDOOM = 0x3E,5
	UITYPE_ELIXIR = 0x3F,5
	UITYPE_ARMOFVAL = 0x40,5
	UITYPE_STEELVEIL = 0x41,5
	UITYPE_GRISWOLD = 0x42,5
	UITYPE_LGTFORGE = 0x43,5
	UITYPE_LAZSTAFF = 0x44,5
	UITYPE_INVALID = -1,5
};5
5
enum item_effect_type5
{5
	IPL_TOHIT = 0x0,5
	IPL_TOHIT_CURSE = 0x1,5
	IPL_DAMP = 0x2,5
	IPL_DAMP_CURSE = 0x3,5
	IPL_TOHIT_DAMP = 0x4,5
	IPL_TOHIT_DAMP_CURSE = 0x5,5
	IPL_ACP = 0x6,5
	IPL_ACP_CURSE = 0x7,5
	IPL_FIRERES = 0x8,5
	IPL_LIGHTRES = 0x9,5
	IPL_MAGICRES = 0xA,5
	IPL_ALLRES = 0xB,5
	IPL_SPLLVLADD = 0xE,5
	IPL_CHARGES = 0xF,5
	IPL_FIREDAM = 0x10,5
	IPL_LIGHTDAM = 0x11,5
	IPL_STR = 0x13,5
	IPL_STR_CURSE = 0x14,5
	IPL_MAG = 0x15,5
	IPL_MAG_CURSE = 0x16,5
	IPL_DEX = 0x17,5
	IPL_DEX_CURSE = 0x18,5
	IPL_VIT = 0x19,5
	IPL_VIT_CURSE = 0x1A,5
	IPL_ATTRIBS = 0x1B,5
	IPL_ATTRIBS_CURSE = 0x1C,5
	IPL_GETHIT_CURSE = 0x1D,5
	IPL_GETHIT = 0x1E,5
	IPL_LIFE = 0x1F,5
	IPL_LIFE_CURSE = 0x20,5
	IPL_MANA = 0x21,5
	IPL_MANA_CURSE = 0x22,5
	IPL_DUR = 0x23,5
	IPL_DUR_CURSE = 0x24,5
	IPL_INDESTRUCTIBLE = 0x25,5
	IPL_LIGHT = 0x26,5
	IPL_LIGHT_CURSE = 0x27,5
	IPL_MULT_ARROWS = 0x29, /* only used in hellfire */5
	IPL_FIRE_ARROWS = 0x2A,5
	IPL_LIGHT_ARROWS = 0x2B,5
	IPL_INVCURS = 0x2C,5
	IPL_THORNS = 0x2D,5
	IPL_NOMANA = 0x2E,5
	IPL_NOHEALPLR = 0x2F,5
	IPL_ABSHALFTRAP = 0x34,5
	IPL_KNOCKBACK = 0x35,5
	IPL_NOHEALMON = 0x36,5
	IPL_STEALMANA = 0x37,5
	IPL_STEALLIFE = 0x38,5
	IPL_TARGAC = 0x39,5
	IPL_FASTATTACK = 0x3A,5
	IPL_FASTRECOVER = 0x3B,5
	IPL_FASTBLOCK = 0x3C,5
	IPL_DAMMOD = 0x3D,5
	IPL_RNDARROWVEL = 0x3E,5
	IPL_SETDAM = 0x3F,5
	IPL_SETDUR = 0x40,5
	IPL_NOMINSTR = 0x41,5
	IPL_SPELL = 0x42,5
	IPL_FASTSWING = 0x43,5
	IPL_ONEHAND = 0x44,5
	IPL_3XDAMVDEM = 0x45,5
	IPL_ALLRESZERO = 0x46,5
	IPL_DRAINLIFE = 0x48,5
	IPL_RNDSTEALLIFE = 0x49,5
	IPL_INFRAVISION = 0x4A,5
	IPL_SETAC = 0x4B,5
	IPL_ADDACLIFE = 0x4C,5
	IPL_ADDMANAAC = 0x4D,5
	IPL_FIRERESCLVL = 0x4E,5
	IPL_AC_CURSE = 0x4F,5
	IPL_INVALID = -1,5
};5
5
enum affix_item_type5
{5
	PLT_MISC = 0x1,5
	PLT_BOW = 0x10,5
	PLT_STAFF = 0x100,5
	PLT_WEAP = 0x1000,5
	PLT_SHLD = 0x10000,5
	PLT_ARMO = 0x100000,5
};5
5
enum _sfx_id5
{5
	PS_WALK1 = 0x0,5
	PS_WALK2 = 0x1,5
	PS_WALK3 = 0x2,5
	PS_WALK4 = 0x3,5
	PS_BFIRE = 0x4,5
	PS_FMAG = 0x5,5
	PS_TMAG = 0x6,5
	PS_LGHIT = 0x7,5
	PS_LGHIT1 = 0x8,5
	PS_SWING = 0x9,5
	PS_SWING2 = 0xA,5
	PS_DEAD = 0xB,5
	IS_QUESTDN = 0xC,5
	IS_ARMRFKD = 0xD,5
	IS_BARLFIRE = 0xE,5
	IS_BARREL = 0xF,5
	IS_BHIT = 0x10,5
	IS_BHIT1 = 0x11,5
	IS_CHEST = 0x12,5
	IS_DOORCLOS = 0x13,5
	IS_DOOROPEN = 0x14,5
	IS_FANVL = 0x15,5
	IS_FAXE = 0x16,5
	IS_FBLST = 0x17,5
	IS_FBODY = 0x18,5
	IS_FBOOK = 0x19,5
	IS_FBOW = 0x1A,5
	IS_FCAP = 0x1B,5
	IS_FHARM = 0x1C,5
	IS_FLARM = 0x1D,5
	IS_FMAG = 0x1E,5
	IS_FMAG1 = 0x1F,5
	IS_FMUSH = 0x20,5
	IS_FPOT = 0x21,5
	IS_FRING = 0x22,5
	IS_FROCK = 0x23,5
	IS_FSCRL = 0x24,5
	IS_FSHLD = 0x25,5
	IS_FSIGN = 0x26,5
	IS_FSTAF = 0x27,5
	IS_FSWOR = 0x28,5
	IS_GOLD = 0x29,5
	IS_HLMTFKD = 0x2A,5
	IS_IANVL = 0x2B,5
	IS_IAXE = 0x2C,5
	IS_IBLST = 0x2D,5
	IS_IBODY = 0x2E,5
	IS_IBOOK = 0x2F,5
	IS_IBOW = 0x30,5
	IS_ICAP = 0x31,5
	IS_IGRAB = 0x32,5
	IS_IHARM = 0x33,5
	IS_ILARM = 0x34,5
	IS_IMUSH = 0x35,5
	IS_IPOT = 0x36,5
	IS_IRING = 0x37,5
	IS_IROCK = 0x38,5
	IS_ISCROL = 0x39,5
	IS_ISHIEL = 0x3A,5
	IS_ISIGN = 0x3B,5
	IS_ISTAF = 0x3C,5
	IS_ISWORD = 0x3D,5
	IS_LEVER = 0x3E,5
	IS_MAGIC = 0x3F,5
	IS_MAGIC1 = 0x40,5
	IS_RBOOK = 0x41,5
	IS_SARC = 0x42,5
	IS_SHLDFKD = 0x43,5
	IS_SWRDFKD = 0x44,5
	IS_TITLEMOV = 0x45,5
	IS_TITLSLCT = 0x46,5
	SFX_SILENCE = 0x47,5
	IS_TRAP = 0x48,5
	IS_CAST1 = 0x49,5
	IS_CAST10 = 0x4A,5
	IS_CAST12 = 0x4B,5
	IS_CAST2 = 0x4C,5
	IS_CAST3 = 0x4D,5
	IS_CAST4 = 0x4E,5
	IS_CAST5 = 0x4F,5
	IS_CAST6 = 0x50,5
	IS_CAST7 = 0x51,5
	IS_CAST8 = 0x52,5
	IS_CAST9 = 0x53,5
	LS_HEALING = 0x54,5
	IS_REPAIR = 0x55,5
	LS_ACID = 0x56,5
	LS_ACIDS = 0x57,5
	LS_APOC = 0x58,5
	LS_ARROWALL = 0x59,5
	LS_BLODBOIL = 0x5A,5
	LS_BLODSTAR = 0x5B,5
	LS_BLSIMPT = 0x5C,5
	LS_BONESP = 0x5D,5
	LS_BSIMPCT = 0x5E,5
	LS_CALDRON = 0x5F,5
	LS_CBOLT = 0x60,5
	LS_CHLTNING = 0x61,5
	LS_DSERP = 0x62,5
	LS_ELECIMP1 = 0x63,5
	LS_ELEMENTL = 0x64,5
	LS_ETHEREAL = 0x65,5
	LS_FBALL = 0x66,5
	LS_FBOLT1 = 0x67,5
	LS_FBOLT2 = 0x68,5
	LS_FIRIMP1 = 0x69,5
	LS_FIRIMP2 = 0x6A,5
	LS_FLAMWAVE = 0x6B,5
	LS_FLASH = 0x6C,5
	LS_FOUNTAIN = 0x6D,5
	LS_GOLUM = 0x6E,5
	LS_GOLUMDED = 0x6F,5
	LS_GSHRINE = 0x70,5
	LS_GUARD = 0x71,5
	LS_GUARDLAN = 0x72,5
	LS_HOLYBOLT = 0x73,5
	LS_HYPER = 0x74,5
	LS_INFRAVIS = 0x75,5
	LS_INVISIBL = 0x76,5
	LS_INVPOT = 0x77,5
	LS_LNING1 = 0x78,5
	LS_LTNING = 0x79,5
	LS_MSHIELD = 0x7A,5
	LS_NOVA = 0x7B,5
	LS_PORTAL = 0x7C,5
	LS_PUDDLE = 0x7D,5
	LS_RESUR = 0x7E,5
	LS_SCURSE = 0x7F,5
	LS_SCURIMP = 0x80,5
	LS_SENTINEL = 0x81,5
	LS_SHATTER = 0x82,5
	LS_SOULFIRE = 0x83,5
	LS_SPOUTLOP = 0x84,5
	LS_SPOUTSTR = 0x85,5
	LS_STORM = 0x86,5
	LS_TRAPDIS = 0x87,5
	LS_TELEPORT = 0x88,5
	LS_VTHEFT = 0x89,5
	LS_WALLLOOP = 0x8A,5
	LS_WALLSTRT = 0x8B,5
	TSFX_BMAID1 = 0x8C,5
	TSFX_BMAID2 = 0x8D,5
	TSFX_BMAID3 = 0x8E,5
	TSFX_BMAID4 = 0x8F,5
	TSFX_BMAID5 = 0x90,5
	TSFX_BMAID6 = 0x91,5
	TSFX_BMAID7 = 0x92,5
	TSFX_BMAID8 = 0x93,5
	TSFX_BMAID9 = 0x94,5
	TSFX_BMAID10 = 0x95,5
	TSFX_BMAID11 = 0x96,5
	TSFX_BMAID12 = 0x97,5
	TSFX_BMAID13 = 0x98,5
	TSFX_BMAID14 = 0x99,5
	TSFX_BMAID15 = 0x9A,5
	TSFX_BMAID16 = 0x9B,5
	TSFX_BMAID17 = 0x9C,5
	TSFX_BMAID18 = 0x9D,5
	TSFX_BMAID19 = 0x9E,5
	TSFX_BMAID20 = 0x9F,5
	TSFX_BMAID21 = 0xA0,5
	TSFX_BMAID22 = 0xA1,5
	TSFX_BMAID23 = 0xA2,5
	TSFX_BMAID24 = 0xA3,5
	TSFX_BMAID25 = 0xA4,5
	TSFX_BMAID26 = 0xA5,5
	TSFX_BMAID27 = 0xA6,5
	TSFX_BMAID28 = 0xA7,5
	TSFX_BMAID29 = 0xA8,5
	TSFX_BMAID30 = 0xA9,5
	TSFX_BMAID31 = 0xAA,5
	TSFX_BMAID32 = 0xAB,5
	TSFX_BMAID33 = 0xAC,5
	TSFX_BMAID34 = 0xAD,5
	TSFX_BMAID35 = 0xAE,5
	TSFX_BMAID36 = 0xAF,5
	TSFX_BMAID37 = 0xB0,5
	TSFX_BMAID38 = 0xB1,5
	TSFX_BMAID39 = 0xB2,5
	TSFX_BMAID40 = 0xB3,5
	TSFX_SMITH1 = 0xB4,5
	TSFX_SMITH2 = 0xB5,5
	TSFX_SMITH3 = 0xB6,5
	TSFX_SMITH4 = 0xB7,5
	TSFX_SMITH5 = 0xB8,5
	TSFX_SMITH6 = 0xB9,5
	TSFX_SMITH7 = 0xBA,5
	TSFX_SMITH8 = 0xBB,5
	TSFX_SMITH9 = 0xBC,5
	TSFX_SMITH10 = 0xBD,5
	TSFX_SMITH11 = 0xBE,5
	TSFX_SMITH12 = 0xBF,5
	TSFX_SMITH13 = 0xC0,5
	TSFX_SMITH14 = 0xC1,5
	TSFX_SMITH15 = 0xC2,5
	TSFX_SMITH16 = 0xC3,5
	TSFX_SMITH17 = 0xC4,5
	TSFX_SMITH18 = 0xC5,5
	TSFX_SMITH19 = 0xC6,5
	TSFX_SMITH20 = 0xC7,5
	TSFX_SMITH21 = 0xC8,5
	TSFX_SMITH22 = 0xC9,5
	TSFX_SMITH23 = 0xCA,5
	TSFX_SMITH24 = 0xCB,5
	TSFX_SMITH25 = 0xCC,5
	TSFX_SMITH26 = 0xCD,5
	TSFX_SMITH27 = 0xCE,5
	TSFX_SMITH28 = 0xCF,5
	TSFX_SMITH29 = 0xD0,5
	TSFX_SMITH30 = 0xD1,5
	TSFX_SMITH31 = 0xD2,5
	TSFX_SMITH32 = 0xD3,5
	TSFX_SMITH33 = 0xD4,5
	TSFX_SMITH34 = 0xD5,5
	TSFX_SMITH35 = 0xD6,5
	TSFX_SMITH36 = 0xD7,5
	TSFX_SMITH37 = 0xD8,5
	TSFX_SMITH38 = 0xD9,5
	TSFX_SMITH39 = 0xDA,5
	TSFX_SMITH40 = 0xDB,5
	TSFX_SMITH41 = 0xDC,5
	TSFX_SMITH42 = 0xDD,5
	TSFX_SMITH43 = 0xDE,5
	TSFX_SMITH44 = 0xDF,5
	TSFX_SMITH45 = 0xE0,5
	TSFX_SMITH46 = 0xE1,5
	TSFX_SMITH47 = 0xE2,5
	TSFX_SMITH48 = 0xE3,5
	TSFX_SMITH49 = 0xE4,5
	TSFX_SMITH50 = 0xE5,5
	TSFX_SMITH51 = 0xE6,5
	TSFX_SMITH52 = 0xE7,5
	TSFX_SMITH53 = 0xE8,5
	TSFX_SMITH54 = 0xE9,5
	TSFX_SMITH55 = 0xEA,5
	TSFX_SMITH56 = 0xEB,5
	TSFX_COW1 = 0xEC,5
	TSFX_COW2 = 0xED,5
	TSFX_DEADGUY = 0xEE,5
	TSFX_DRUNK1 = 0xEF,5
	TSFX_DRUNK2 = 0xF0,5
	TSFX_DRUNK3 = 0xF1,5
	TSFX_DRUNK4 = 0xF2,5
	TSFX_DRUNK5 = 0xF3,5
	TSFX_DRUNK6 = 0xF4,5
	TSFX_DRUNK7 = 0xF5,5
	TSFX_DRUNK8 = 0xF6,5
	TSFX_DRUNK9 = 0xF7,5
	TSFX_DRUNK10 = 0xF8,5
	TSFX_DRUNK11 = 0xF9,5
	TSFX_DRUNK12 = 0xFA,5
	TSFX_DRUNK13 = 0xFB,5
	TSFX_DRUNK14 = 0xFC,5
	TSFX_DRUNK15 = 0xFD,5
	TSFX_DRUNK16 = 0xFE,5
	TSFX_DRUNK17 = 0xFF,5
	TSFX_DRUNK18 = 0x100,5
	TSFX_DRUNK19 = 0x101,5
	TSFX_DRUNK20 = 0x102,5
	TSFX_DRUNK21 = 0x103,5
	TSFX_DRUNK22 = 0x104,5
	TSFX_DRUNK23 = 0x105,5
	TSFX_DRUNK24 = 0x106,5
	TSFX_DRUNK25 = 0x107,5
	TSFX_DRUNK26 = 0x108,5
	TSFX_DRUNK27 = 0x109,5
	TSFX_DRUNK28 = 0x10A,5
	TSFX_DRUNK29 = 0x10B,5
	TSFX_DRUNK30 = 0x10C,5
	TSFX_DRUNK31 = 0x10D,5
	TSFX_DRUNK32 = 0x10E,5
	TSFX_DRUNK33 = 0x10F,5
	TSFX_DRUNK34 = 0x110,5
	TSFX_DRUNK35 = 0x111,5
	TSFX_HEALER1 = 0x112,5
	TSFX_HEALER2 = 0x113,5
	TSFX_HEALER3 = 0x114,5
	TSFX_HEALER4 = 0x115,5
	TSFX_HEALER5 = 0x116,5
	TSFX_HEALER6 = 0x117,5
	TSFX_HEALER7 = 0x118,5
	TSFX_HEALER8 = 0x119,5
	TSFX_HEALER9 = 0x11A,5
	TSFX_HEALER10 = 0x11B,5
	TSFX_HEALER11 = 0x11C,5
	TSFX_HEALER12 = 0x11D,5
	TSFX_HEALER13 = 0x11E,5
	TSFX_HEALER14 = 0x11F,5
	TSFX_HEALER15 = 0x120,5
	TSFX_HEALER16 = 0x121,5
	TSFX_HEALER17 = 0x122,5
	TSFX_HEALER18 = 0x123,5
	TSFX_HEALER19 = 0x124,5
	TSFX_HEALER20 = 0x125,5
	TSFX_HEALER21 = 0x126,5
	TSFX_HEALER22 = 0x127,5
	TSFX_HEALER23 = 0x128,5
	TSFX_HEALER24 = 0x129,5
	TSFX_HEALER25 = 0x12A,5
	TSFX_HEALER26 = 0x12B,5
	TSFX_HEALER27 = 0x12C,5
	TSFX_HEALER28 = 0x12D,5
	TSFX_HEALER29 = 0x12E,5
	TSFX_HEALER30 = 0x12F,5
	TSFX_HEALER31 = 0x130,5
	TSFX_HEALER32 = 0x131,5
	TSFX_HEALER33 = 0x132,5
	TSFX_HEALER34 = 0x133,5
	TSFX_HEALER35 = 0x134,5
	TSFX_HEALER36 = 0x135,5
	TSFX_HEALER37 = 0x136,5
	TSFX_HEALER38 = 0x137,5
	TSFX_HEALER39 = 0x138,5
	TSFX_HEALER40 = 0x139,5
	TSFX_HEALER41 = 0x13A,5
	TSFX_HEALER42 = 0x13B,5
	TSFX_HEALER43 = 0x13C,5
	TSFX_HEALER44 = 0x13D,5
	TSFX_HEALER45 = 0x13E,5
	TSFX_HEALER46 = 0x13F,5
	TSFX_HEALER47 = 0x140,5
	TSFX_PEGBOY1 = 0x141,5
	TSFX_PEGBOY2 = 0x142,5
	TSFX_PEGBOY3 = 0x143,5
	TSFX_PEGBOY4 = 0x144,5
	TSFX_PEGBOY5 = 0x145,5
	TSFX_PEGBOY6 = 0x146,5
	TSFX_PEGBOY7 = 0x147,5
	TSFX_PEGBOY8 = 0x148,5
	TSFX_PEGBOY9 = 0x149,5
	TSFX_PEGBOY10 = 0x14A,5
	TSFX_PEGBOY11 = 0x14B,5
	TSFX_PEGBOY12 = 0x14C,5
	TSFX_PEGBOY13 = 0x14D,5
	TSFX_PEGBOY14 = 0x14E,5
	TSFX_PEGBOY15 = 0x14F,5
	TSFX_PEGBOY16 = 0x150,5
	TSFX_PEGBOY17 = 0x151,5
	TSFX_PEGBOY18 = 0x152,5
	TSFX_PEGBOY19 = 0x153,5
	TSFX_PEGBOY20 = 0x154,5
	TSFX_PEGBOY21 = 0x155,5
	TSFX_PEGBOY22 = 0x156,5
	TSFX_PEGBOY23 = 0x157,5
	TSFX_PEGBOY24 = 0x158,5
	TSFX_PEGBOY25 = 0x159,5
	TSFX_PEGBOY26 = 0x15A,5
	TSFX_PEGBOY27 = 0x15B,5
	TSFX_PEGBOY28 = 0x15C,5
	TSFX_PEGBOY29 = 0x15D,5
	TSFX_PEGBOY30 = 0x15E,5
	TSFX_PEGBOY31 = 0x15F,5
	TSFX_PEGBOY32 = 0x160,5
	TSFX_PEGBOY33 = 0x161,5
	TSFX_PEGBOY34 = 0x162,5
	TSFX_PEGBOY35 = 0x163,5
	TSFX_PEGBOY36 = 0x164,5
	TSFX_PEGBOY37 = 0x165,5
	TSFX_PEGBOY38 = 0x166,5
	TSFX_PEGBOY39 = 0x167,5
	TSFX_PEGBOY40 = 0x168,5
	TSFX_PEGBOY41 = 0x169,5
	TSFX_PEGBOY42 = 0x16A,5
	TSFX_PEGBOY43 = 0x16B,5
	TSFX_PRIEST0 = 0x16C,5
	TSFX_PRIEST1 = 0x16D,5
	TSFX_PRIEST2 = 0x16E,5
	TSFX_PRIEST3 = 0x16F,5
	TSFX_PRIEST4 = 0x170,5
	TSFX_PRIEST5 = 0x171,5
	TSFX_PRIEST6 = 0x172,5
	TSFX_PRIEST7 = 0x173,5
	TSFX_STORY0 = 0x174,5
	TSFX_STORY1 = 0x175,5
	TSFX_STORY2 = 0x176,5
	TSFX_STORY3 = 0x177,5
	TSFX_STORY4 = 0x178,5
	TSFX_STORY5 = 0x179,5
	TSFX_STORY6 = 0x17A,5
	TSFX_STORY7 = 0x17B,5
	TSFX_STORY8 = 0x17C,5
	TSFX_STORY9 = 0x17D,5
	TSFX_STORY10 = 0x17E,5
	TSFX_STORY11 = 0x17F,5
	TSFX_STORY12 = 0x180,5
	TSFX_STORY13 = 0x181,5
	TSFX_STORY14 = 0x182,5
	TSFX_STORY15 = 0x183,5
	TSFX_STORY16 = 0x184,5
	TSFX_STORY17 = 0x185,5
	TSFX_STORY18 = 0x186,5
	TSFX_STORY19 = 0x187,5
	TSFX_STORY20 = 0x188,5
	TSFX_STORY21 = 0x189,5
	TSFX_STORY22 = 0x18A,5
	TSFX_STORY23 = 0x18B,5
	TSFX_STORY24 = 0x18C,5
	TSFX_STORY25 = 0x18D,5
	TSFX_STORY26 = 0x18E,5
	TSFX_STORY27 = 0x18F,5
	TSFX_STORY28 = 0x190,5
	TSFX_STORY29 = 0x191,5
	TSFX_STORY30 = 0x192,5
	TSFX_STORY31 = 0x193,5
	TSFX_STORY32 = 0x194,5
	TSFX_STORY33 = 0x195,5
	TSFX_STORY34 = 0x196,5
	TSFX_STORY35 = 0x197,5
	TSFX_STORY36 = 0x198,5
	TSFX_STORY37 = 0x199,5
	TSFX_STORY38 = 0x19A,5
	TSFX_TAVERN0 = 0x19B,5
	TSFX_TAVERN1 = 0x19C,5
	TSFX_TAVERN2 = 0x19D,5
	TSFX_TAVERN3 = 0x19E,5
	TSFX_TAVERN4 = 0x19F,5
	TSFX_TAVERN5 = 0x1A0,5
	TSFX_TAVERN6 = 0x1A1,5
	TSFX_TAVERN7 = 0x1A2,5
	TSFX_TAVERN8 = 0x1A3,5
	TSFX_TAVERN9 = 0x1A4,5
	TSFX_TAVERN10 = 0x1A5,5
	TSFX_TAVERN11 = 0x1A6,5
	TSFX_TAVERN12 = 0x1A7,5
	TSFX_TAVERN13 = 0x1A8,5
	TSFX_TAVERN14 = 0x1A9,5
	TSFX_TAVERN15 = 0x1AA,5
	TSFX_TAVERN16 = 0x1AB,5
	TSFX_TAVERN17 = 0x1AC,5
	TSFX_TAVERN18 = 0x1AD,5
	TSFX_TAVERN19 = 0x1AE,5
	TSFX_TAVERN20 = 0x1AF,5
	TSFX_TAVERN21 = 0x1B0,5
	TSFX_TAVERN22 = 0x1B1,5
	TSFX_TAVERN23 = 0x1B2,5
	TSFX_TAVERN24 = 0x1B3,5
	TSFX_TAVERN25 = 0x1B4,5
	TSFX_TAVERN26 = 0x1B5,5
	TSFX_TAVERN27 = 0x1B6,5
	TSFX_TAVERN28 = 0x1B7,5
	TSFX_TAVERN29 = 0x1B8,5
	TSFX_TAVERN30 = 0x1B9,5
	TSFX_TAVERN31 = 0x1BA,5
	TSFX_TAVERN32 = 0x1BB,5
	TSFX_TAVERN33 = 0x1BC,5
	TSFX_TAVERN34 = 0x1BD,5
	TSFX_TAVERN35 = 0x1BE,5
	TSFX_TAVERN36 = 0x1BF,5
	TSFX_TAVERN37 = 0x1C0,5
	TSFX_TAVERN38 = 0x1C1,5
	TSFX_TAVERN39 = 0x1C2,5
	TSFX_TAVERN40 = 0x1C3,5
	TSFX_TAVERN41 = 0x1C4,5
	TSFX_TAVERN42 = 0x1C5,5
	TSFX_TAVERN43 = 0x1C6,5
	TSFX_TAVERN44 = 0x1C7,5
	TSFX_TAVERN45 = 0x1C8,5
	TSFX_WITCH1 = 0x1C9,5
	TSFX_WITCH2 = 0x1CA,5
	TSFX_WITCH3 = 0x1CB,5
	TSFX_WITCH4 = 0x1CC,5
	TSFX_WITCH5 = 0x1CD,5
	TSFX_WITCH6 = 0x1CE,5
	TSFX_WITCH7 = 0x1CF,5
	TSFX_WITCH8 = 0x1D0,5
	TSFX_WITCH9 = 0x1D1,5
	TSFX_WITCH10 = 0x1D2,5
	TSFX_WITCH11 = 0x1D3,5
	TSFX_WITCH12 = 0x1D4,5
	TSFX_WITCH13 = 0x1D5,5
	TSFX_WITCH14 = 0x1D6,5
	TSFX_WITCH15 = 0x1D7,5
	TSFX_WITCH16 = 0x1D8,5
	TSFX_WITCH17 = 0x1D9,5
	TSFX_WITCH18 = 0x1DA,5
	TSFX_WITCH19 = 0x1DB,5
	TSFX_WITCH20 = 0x1DC,5
	TSFX_WITCH21 = 0x1DD,5
	TSFX_WITCH22 = 0x1DE,5
	TSFX_WITCH23 = 0x1DF,5
	TSFX_WITCH24 = 0x1E0,5
	TSFX_WITCH25 = 0x1E1,5
	TSFX_WITCH26 = 0x1E2,5
	TSFX_WITCH27 = 0x1E3,5
	TSFX_WITCH28 = 0x1E4,5
	TSFX_WITCH29 = 0x1E5,5
	TSFX_WITCH30 = 0x1E6,5
	TSFX_WITCH31 = 0x1E7,5
	TSFX_WITCH32 = 0x1E8,5
	TSFX_WITCH33 = 0x1E9,5
	TSFX_WITCH34 = 0x1EA,5
	TSFX_WITCH35 = 0x1EB,5
	TSFX_WITCH36 = 0x1EC,5
	TSFX_WITCH37 = 0x1ED,5
	TSFX_WITCH38 = 0x1EE,5
	TSFX_WITCH39 = 0x1EF,5
	TSFX_WITCH40 = 0x1F0,5
	TSFX_WITCH41 = 0x1F1,5
	TSFX_WITCH42 = 0x1F2,5
	TSFX_WITCH43 = 0x1F3,5
	TSFX_WITCH44 = 0x1F4,5
	TSFX_WITCH45 = 0x1F5,5
	TSFX_WITCH46 = 0x1F6,5
	TSFX_WITCH47 = 0x1F7,5
	TSFX_WITCH48 = 0x1F8,5
	TSFX_WITCH49 = 0x1F9,5
	TSFX_WITCH50 = 0x1FA,5
	TSFX_WOUND = 0x1FB,5
	PS_MAGE1 = 0x1FC,5
	PS_MAGE2 = 0x1FD,5
	PS_MAGE3 = 0x1FE,5
	PS_MAGE4 = 0x1FF,5
	PS_MAGE5 = 0x200,5
	PS_MAGE6 = 0x201,5
	PS_MAGE7 = 0x202,5
	PS_MAGE8 = 0x203,5
	PS_MAGE9 = 0x204,5
	PS_MAGE10 = 0x205,5
	PS_MAGE11 = 0x206,5
	PS_MAGE12 = 0x207,5
	PS_MAGE13 = 0x208,5
	PS_MAGE14 = 0x209,5
	PS_MAGE15 = 0x20A,5
	PS_MAGE16 = 0x20B,5
	PS_MAGE17 = 0x20C,5
	PS_MAGE18 = 0x20D,5
	PS_MAGE19 = 0x20E,5
	PS_MAGE20 = 0x20F,5
	PS_MAGE21 = 0x210,5
	PS_MAGE22 = 0x211,5
	PS_MAGE23 = 0x212,5
	PS_MAGE24 = 0x213,5
	PS_MAGE25 = 0x214,5
	PS_MAGE26 = 0x215,5
	PS_MAGE27 = 0x216,5
	PS_MAGE28 = 0x217,5
	PS_MAGE29 = 0x218,5
	PS_MAGE30 = 0x219,5
	PS_MAGE31 = 0x21A,5
	PS_MAGE32 = 0x21B,5
	PS_MAGE33 = 0x21C,5
	PS_MAGE34 = 0x21D,5
	PS_MAGE35 = 0x21E,5
	PS_MAGE36 = 0x21F,5
	PS_MAGE37 = 0x220,5
	PS_MAGE38 = 0x221,5
	PS_MAGE39 = 0x222,5
	PS_MAGE40 = 0x223,5
	PS_MAGE41 = 0x224,5
	PS_MAGE42 = 0x225,5
	PS_MAGE43 = 0x226,5
	PS_MAGE44 = 0x227,5
	PS_MAGE45 = 0x228,5
	PS_MAGE46 = 0x229,5
	PS_MAGE47 = 0x22A,5
	PS_MAGE48 = 0x22B,5
	PS_MAGE49 = 0x22C,5
	PS_MAGE50 = 0x22D,5
	PS_MAGE51 = 0x22E,5
	PS_MAGE52 = 0x22F,5
	PS_MAGE53 = 0x230,5
	PS_MAGE54 = 0x231,5
	PS_MAGE55 = 0x232,5
	PS_MAGE56 = 0x233,5
	PS_MAGE57 = 0x234,5
	PS_MAGE58 = 0x235,5
	PS_MAGE59 = 0x236,5
	PS_MAGE60 = 0x237,5
	PS_MAGE61 = 0x238,5
	PS_MAGE62 = 0x239,5
	PS_MAGE63 = 0x23A,5
	PS_MAGE64 = 0x23B,5
	PS_MAGE65 = 0x23C,5
	PS_MAGE66 = 0x23D,5
	PS_MAGE67 = 0x23E,5
	PS_MAGE68 = 0x23F,5
	PS_MAGE69 = 0x240,5
	PS_MAGE69B = 0x241,5
	PS_MAGE70 = 0x242,5
	PS_MAGE71 = 0x243,5
	PS_MAGE72 = 0x244,5
	PS_MAGE73 = 0x245,5
	PS_MAGE74 = 0x246,5
	PS_MAGE75 = 0x247,5
	PS_MAGE76 = 0x248,5
	PS_MAGE77 = 0x249,5
	PS_MAGE78 = 0x24A,5
	PS_MAGE79 = 0x24B,5
	PS_MAGE80 = 0x24C,5
	PS_MAGE81 = 0x24D,5
	PS_MAGE82 = 0x24E,5
	PS_MAGE83 = 0x24F,5
	PS_MAGE84 = 0x250,5
	PS_MAGE85 = 0x251,5
	PS_MAGE86 = 0x252,5
	PS_MAGE87 = 0x253,5
	PS_MAGE88 = 0x254,5
	PS_MAGE89 = 0x255,5
	PS_MAGE90 = 0x256,5
	PS_MAGE91 = 0x257,5
	PS_MAGE92 = 0x258,5
	PS_MAGE93 = 0x259,5
	PS_MAGE94 = 0x25A,5
	PS_MAGE95 = 0x25B,5
	PS_MAGE96 = 0x25C,5
	PS_MAGE97 = 0x25D,5
	PS_MAGE98 = 0x25E,5
	PS_MAGE99 = 0x25F,5
	PS_MAGE100 = 0x260,5
	PS_MAGE101 = 0x261,5
	PS_MAGE102 = 0x262,5
	PS_ROGUE1 = 0x263,5
	PS_ROGUE2 = 0x264,5
	PS_ROGUE3 = 0x265,5
	PS_ROGUE4 = 0x266,5
	PS_ROGUE5 = 0x267,5
	PS_ROGUE6 = 0x268,5
	PS_ROGUE7 = 0x269,5
	PS_ROGUE8 = 0x26A,5
	PS_ROGUE9 = 0x26B,5
	PS_ROGUE10 = 0x26C,5
	PS_ROGUE11 = 0x26D,5
	PS_ROGUE12 = 0x26E,5
	PS_ROGUE13 = 0x26F,5
	PS_ROGUE14 = 0x270,5
	PS_ROGUE15 = 0x271,5
	PS_ROGUE16 = 0x272,5
	PS_ROGUE17 = 0x273,5
	PS_ROGUE18 = 0x274,5
	PS_ROGUE19 = 0x275,5
	PS_ROGUE20 = 0x276,5
	PS_ROGUE21 = 0x277,5
	PS_ROGUE22 = 0x278,5
	PS_ROGUE23 = 0x279,5
	PS_ROGUE24 = 0x27A,5
	PS_ROGUE25 = 0x27B,5
	PS_ROGUE26 = 0x27C,5
	PS_ROGUE27 = 0x27D,5
	PS_ROGUE28 = 0x27E,5
	PS_ROGUE29 = 0x27F,5
	PS_ROGUE30 = 0x280,5
	PS_ROGUE31 = 0x281,5
	PS_ROGUE32 = 0x282,5
	PS_ROGUE33 = 0x283,5
	PS_ROGUE34 = 0x284,5
	PS_ROGUE35 = 0x285,5
	PS_ROGUE36 = 0x286,5
	PS_ROGUE37 = 0x287,5
	PS_ROGUE38 = 0x288,5
	PS_ROGUE39 = 0x289,5
	PS_ROGUE40 = 0x28A,5
	PS_ROGUE41 = 0x28B,5
	PS_ROGUE42 = 0x28C,5
	PS_ROGUE43 = 0x28D,5
	PS_ROGUE44 = 0x28E,5
	PS_ROGUE45 = 0x28F,5
	PS_ROGUE46 = 0x290,5
	PS_ROGUE47 = 0x291,5
	PS_ROGUE48 = 0x292,5
	PS_ROGUE49 = 0x293,5
	PS_ROGUE50 = 0x294,5
	PS_ROGUE51 = 0x295,5
	PS_ROGUE52 = 0x296,5
	PS_ROGUE53 = 0x297,5
	PS_ROGUE54 = 0x298,5
	PS_ROGUE55 = 0x299,5
	PS_ROGUE56 = 0x29A,5
	PS_ROGUE57 = 0x29B,5
	PS_ROGUE58 = 0x29C,5
	PS_ROGUE59 = 0x29D,5
	PS_ROGUE60 = 0x29E,5
	PS_ROGUE61 = 0x29F,5
	PS_ROGUE62 = 0x2A0,5
	PS_ROGUE63 = 0x2A1,5
	PS_ROGUE64 = 0x2A2,5
	PS_ROGUE65 = 0x2A3,5
	PS_ROGUE66 = 0x2A4,5
	PS_ROGUE67 = 0x2A5,5
	PS_ROGUE68 = 0x2A6,5
	PS_ROGUE69 = 0x2A7,5
	PS_ROGUE69B = 0x2A8,5
	PS_ROGUE70 = 0x2A9,5
	PS_ROGUE71 = 0x2AA,5
	PS_ROGUE72 = 0x2AB,5
	PS_ROGUE73 = 0x2AC,5
	PS_ROGUE74 = 0x2AD,5
	PS_ROGUE75 = 0x2AE,5
	PS_ROGUE76 = 0x2AF,5
	PS_ROGUE77 = 0x2B0,5
	PS_ROGUE78 = 0x2B1,5
	PS_ROGUE79 = 0x2B2,5
	PS_ROGUE80 = 0x2B3,5
	PS_ROGUE81 = 0x2B4,5
	PS_ROGUE82 = 0x2B5,5
	PS_ROGUE83 = 0x2B6,5
	PS_ROGUE84 = 0x2B7,5
	PS_ROGUE85 = 0x2B8,5
	PS_ROGUE86 = 0x2B9,5
	PS_ROGUE87 = 0x2BA,5
	PS_ROGUE88 = 0x2BB,5
	PS_ROGUE89 = 0x2BC,5
	PS_ROGUE90 = 0x2BD,5
	PS_ROGUE91 = 0x2BE,5
	PS_ROGUE92 = 0x2BF,5
	PS_ROGUE93 = 0x2C0,5
	PS_ROGUE94 = 0x2C1,5
	PS_ROGUE95 = 0x2C2,5
	PS_ROGUE96 = 0x2C3,5
	PS_ROGUE97 = 0x2C4,5
	PS_ROGUE98 = 0x2C5,5
	PS_ROGUE99 = 0x2C6,5
	PS_ROGUE100 = 0x2C7,5
	PS_ROGUE101 = 0x2C8,5
	PS_ROGUE102 = 0x2C9,5
	PS_WARR1 = 0x2CA,5
	PS_WARR2 = 0x2CB,5
	PS_WARR3 = 0x2CC,5
	PS_WARR4 = 0x2CD,5
	PS_WARR5 = 0x2CE,5
	PS_WARR6 = 0x2CF,5
	PS_WARR7 = 0x2D0,5
	PS_WARR8 = 0x2D1,5
	PS_WARR9 = 0x2D2,5
	PS_WARR10 = 0x2D3,5
	PS_WARR11 = 0x2D4,5
	PS_WARR12 = 0x2D5,5
	PS_WARR13 = 0x2D6,5
	PS_WARR14 = 0x2D7,5
	PS_WARR14B = 0x2D8,5
	PS_WARR14C = 0x2D9,5
	PS_WARR15 = 0x2DA,5
	PS_WARR15B = 0x2DB,5
	PS_WARR15C = 0x2DC,5
	PS_WARR16 = 0x2DD,5
	PS_WARR16B = 0x2DE,5
	PS_WARR16C = 0x2DF,5
	PS_WARR17 = 0x2E0,5
	PS_WARR18 = 0x2E1,5
	PS_WARR19 = 0x2E2,5
	PS_WARR20 = 0x2E3,5
	PS_WARR21 = 0x2E4,5
	PS_WARR22 = 0x2E5,5
	PS_WARR23 = 0x2E6,5
	PS_WARR24 = 0x2E7,5
	PS_WARR25 = 0x2E8,5
	PS_WARR26 = 0x2E9,5
	PS_WARR27 = 0x2EA,5
	PS_WARR28 = 0x2EB,5
	PS_WARR29 = 0x2EC,5
	PS_WARR30 = 0x2ED,5
	PS_WARR31 = 0x2EE,5
	PS_WARR32 = 0x2EF,5
	PS_WARR33 = 0x2F0,5
	PS_WARR34 = 0x2F1,5
	PS_WARR35 = 0x2F2,5
	PS_WARR36 = 0x2F3,5
	PS_WARR37 = 0x2F4,5
	PS_WARR38 = 0x2F5,5
	PS_WARR39 = 0x2F6,5
	PS_WARR40 = 0x2F7,5
	PS_WARR41 = 0x2F8,5
	PS_WARR42 = 0x2F9,5
	PS_WARR43 = 0x2FA,5
	PS_WARR44 = 0x2FB,5
	PS_WARR45 = 0x2FC,5
	PS_WARR46 = 0x2FD,5
	PS_WARR47 = 0x2FE,5
	PS_WARR48 = 0x2FF,5
	PS_WARR49 = 0x300,5
	PS_WARR50 = 0x301,5
	PS_WARR51 = 0x302,5
	PS_WARR52 = 0x303,5
	PS_WARR53 = 0x304,5
	PS_WARR54 = 0x305,5
	PS_WARR55 = 0x306,5
	PS_WARR56 = 0x307,5
	PS_WARR57 = 0x308,5
	PS_WARR58 = 0x309,5
	PS_WARR59 = 0x30A,5
	PS_WARR60 = 0x30B,5
	PS_WARR61 = 0x30C,5
	PS_WARR62 = 0x30D,5
	PS_WARR63 = 0x30E,5
	PS_WARR64 = 0x30F,5
	PS_WARR65 = 0x310,5
	PS_WARR66 = 0x311,5
	PS_WARR67 = 0x312,5
	PS_WARR68 = 0x313,5
	PS_WARR69 = 0x314,5
	PS_WARR69B = 0x315,5
	PS_WARR70 = 0x316,5
	PS_WARR71 = 0x317,5
	PS_WARR72 = 0x318,5
	PS_WARR73 = 0x319,5
	PS_WARR74 = 0x31A,5
	PS_WARR75 = 0x31B,5
	PS_WARR76 = 0x31C,5
	PS_WARR77 = 0x31D,5
	PS_WARR78 = 0x31E,5
	PS_WARR79 = 0x31F,5
	PS_WARR80 = 0x320,5
	PS_WARR81 = 0x321,5
	PS_WARR82 = 0x322,5
	PS_WARR83 = 0x323,5
	PS_WARR84 = 0x324,5
	PS_WARR85 = 0x325,5
	PS_WARR86 = 0x326,5
	PS_WARR87 = 0x327,5
	PS_WARR88 = 0x328,5
	PS_WARR89 = 0x329,5
	PS_WARR90 = 0x32A,5
	PS_WARR91 = 0x32B,5
	PS_WARR92 = 0x32C,5
	PS_WARR93 = 0x32D,5
	PS_WARR94 = 0x32E,5
	PS_WARR95 = 0x32F,5
	PS_WARR95B = 0x330,5
	PS_WARR95C = 0x331,5
	PS_WARR95D = 0x332,5
	PS_WARR95E = 0x333,5
	PS_WARR95F = 0x334,5
	PS_WARR96B = 0x335,5
	PS_WARR97 = 0x336,5
	PS_WARR98 = 0x337,5
	PS_WARR99 = 0x338,5
	PS_WARR100 = 0x339,5
	PS_WARR101 = 0x33A,5
	PS_WARR102 = 0x33B,5
	PS_NAR1 = 0x33C,5
	PS_NAR2 = 0x33D,5
	PS_NAR3 = 0x33E,5
	PS_NAR4 = 0x33F,5
	PS_NAR5 = 0x340,5
	PS_NAR6 = 0x341,5
	PS_NAR7 = 0x342,5
	PS_NAR8 = 0x343,5
	PS_NAR9 = 0x344,5
	PS_DIABLVLINT = 0x345,5
	USFX_CLEAVER = 0x346,5
	USFX_GARBUD1 = 0x347,5
	USFX_GARBUD2 = 0x348,5
	USFX_GARBUD3 = 0x349,5
	USFX_GARBUD4 = 0x34A,5
	USFX_IZUAL1 = 0x34B,5
	USFX_LACH1 = 0x34C,5
	USFX_LACH2 = 0x34D,5
	USFX_LACH3 = 0x34E,5
	USFX_LAZ1 = 0x34F,5
	USFX_LAZ2 = 0x350,5
	USFX_SKING1 = 0x351,5
	USFX_SNOT1 = 0x352,5
	USFX_SNOT2 = 0x353,5
	USFX_SNOT3 = 0x354,5
	USFX_WARLRD1 = 0x355,5
	USFX_WLOCK1 = 0x356,5
	USFX_ZHAR1 = 0x357,5
	USFX_ZHAR2 = 0x358,5
	USFX_DIABLOD = 0x359,5
};5
5
enum item_equip_type5
{5
	ILOC_NONE = 0x0,5
	ILOC_ONEHAND = 0x1,5
	ILOC_TWOHAND = 0x2,5
	ILOC_ARMOR = 0x3,5
	ILOC_HELM = 0x4,5
	ILOC_RING = 0x5,5
	ILOC_AMULET = 0x6,5
	ILOC_UNEQUIPABLE = 0x7,5
	ILOC_BELT = 0x8,5
	ILOC_INVALID = -1,5
};5
5
enum missile_id5
{5
	MIS_ARROW = 0x0,5
	MIS_FIREBOLT = 0x1,5
	MIS_GUARDIAN = 0x2,5
	MIS_RNDTELEPORT = 0x3,5
	MIS_LIGHTBALL = 0x4,5
	MIS_FIREWALL = 0x5,5
	MIS_FIREBALL = 0x6,5
	MIS_LIGHTCTRL = 0x7,5
	MIS_LIGHTNING = 0x8,5
	MIS_MISEXP = 0x9,5
	MIS_TOWN = 0xA,5
	MIS_FLASH = 0xB,5
	MIS_FLASH2 = 0xC,5
	MIS_MANASHIELD = 0xD,5
	MIS_FIREMOVE = 0xE,5
	MIS_CHAIN = 0xF,5
	MIS_NULL_10 = 0x10, // sentinal?5
	MIS_NULL_11 = 0x11,5
	MIS_NULL_12 = 0x12,5
	MIS_NULL_13 = 0x13,5
	MIS_RHINO = 0x14,5
	MIS_MAGMABALL = 0x15,5
	MIS_LIGHTCTRL2 = 0x16,5
	MIS_LIGHTNING2 = 0x17,5
	MIS_FLARE = 0x18,5
	MIS_MISEXP2 = 0x19,5
	MIS_TELEPORT = 0x1A,5
	MIS_FARROW = 0x1B,5
	MIS_DOOMSERP = 0x1C,5
	MIS_NULL_1D = 0x1D,5
	MIS_STONE = 0x1E,5
	MIS_NULL_1F = 0x1F,5
	MIS_INVISIBL = 0x20,5
	MIS_GOLEM = 0x21,5
	MIS_ETHEREALIZE = 0x22,5
	MIS_NULL_23 = 0x23,5
	MIS_BOOM = 0x24,5
	MIS_HEAL = 0x25,5
	MIS_FIREWALLC = 0x26,5
	MIS_INFRA = 0x27,5
	MIS_IDENTIFY = 0x28,5
	MIS_WAVE = 0x29,5
	MIS_NOVA = 0x2A,5
	MIS_BLODBOIL = 0x2B,5
	MIS_APOCA = 0x2C,5
	MIS_REPAIR = 0x2D,5
	MIS_RECHARGE = 0x2E,5
	MIS_DISARM = 0x2F,5
	MIS_FLAME = 0x30,5
	MIS_FLAMEC = 0x31,5
	MIS_NULL_32 = 0x32,5
	MIS_NULL_33 = 0x33,5
	MIS_CBOLT = 0x34,5
	MIS_HBOLT = 0x35,5
	MIS_RESURRECT = 0x36,5
	MIS_TELEKINESIS = 0x37,5
	MIS_LARROW = 0x38,5
	MIS_ACID = 0x39,5
	MIS_MISEXP3 = 0x3A,5
	MIS_ACIDPUD = 0x3B,5
	MIS_HEALOTHER = 0x3C,5
	MIS_ELEMENT = 0x3D,5
	MIS_RESURRECTBEAM = 0x3E,5
	MIS_BONESPIRIT = 0x3F,5
	MIS_WEAPEXP = 0x40,5
	MIS_RPORTAL = 0x41,5
	MIS_BOOM2 = 0x42,5
	MIS_DIABAPOCA = 0x43,5
};5
5
enum missile_graphic_id5
{5
	MFILE_ARROWS = 0x0,5
	MFILE_FIREBA = 0x1,5
	MFILE_GUARD = 0x2,5
	MFILE_LGHNING = 0x3,5
	MFILE_FIREWAL = 0x4,5
	MFILE_MAGBLOS = 0x5,5
	MFILE_PORTAL = 0x6,5
	MFILE_BLUEXFR = 0x7,5
	MFILE_BLUEXBK = 0x8,5
	MFILE_MANASHLD = 0x9,5
	MFILE_BLOOD = 0xA,5
	MFILE_BONE = 0xB,5
	MFILE_METLHIT = 0xC,5
	MFILE_FARROW = 0xD,5
	MFILE_DOOM = 0xE,5
	MFILE_0F = 0xF,5
	MFILE_BLODBUR = 0x10,5
	MFILE_NEWEXP = 0x11,5
	MFILE_SHATTER1 = 0x12,5
	MFILE_BIGEXP = 0x13,5
	MFILE_INFERNO = 0x14,5
	MFILE_THINLGHT = 0x15,5
	MFILE_FLARE = 0x16,5
	MFILE_FLAREEXP = 0x17,5
	MFILE_MAGBALL = 0x18,5
	MFILE_KRULL = 0x19,5
	MFILE_MINILTNG = 0x1A,5
	MFILE_HOLY = 0x1B,5
	MFILE_HOLYEXPL = 0x1C,5
	MFILE_LARROW = 0x1D,5
	MFILE_FIRARWEX = 0x1E,5
	MFILE_ACIDBF = 0x1F,5
	MFILE_ACIDSPLA = 0x20,5
	MFILE_ACIDPUD = 0x21,5
	MFILE_ETHRSHLD = 0x22,5
	MFILE_FIRERUN = 0x23,5
	MFILE_RESSUR1 = 0x24,5
	MFILE_SKLBALL = 0x25,5
	MFILE_RPORTAL = 0x26,5
	MFILE_FIREPLAR = 0x27,5
	MFILE_SCUBMISB = 0x28,5
	MFILE_SCBSEXPB = 0x29,5
	MFILE_SCUBMISC = 0x2A,5
	MFILE_SCBSEXPC = 0x2B,5
	MFILE_SCUBMISD = 0x2C,5
	MFILE_SCBSEXPD = 0x2D,5
	MFILE_NULL = 0x2E,5
	MFILE_INVALID = 0x2F,5
	MFILE_NONE = 0xFF,5
};5
5
enum _mai_id5
{5
	AI_ZOMBIE = 0,5
	AI_FAT = 1,5
	AI_SKELSD = 2,5
	AI_SKELBOW = 3,5
	AI_SCAV = 4,5
	AI_RHINO = 5,5
	AI_GOATMC = 6,5
	AI_GOATBOW = 7,5
	AI_FALLEN = 8,5
	AI_MAGMA = 9,5
	AI_SKELKING = 10,5
	AI_BAT = 11,5
	AI_GARG = 12,5
	AI_CLEAVER = 13,5
	AI_SUCC = 14,5
	AI_SNEAK = 15,5
	AI_STORM = 16,5
	AI_FIREMAN = 17,5
	AI_GARBUD = 18,5
	AI_ACID = 19,5
	AI_ACIDUNIQ = 20,5
	AI_GOLUM = 21,5
	AI_ZHAR = 22,5
	AI_SNOTSPIL = 23,5
	AI_SNAKE = 24,5
	AI_COUNSLR = 25,5
	AI_MEGA = 26,5
	AI_DIABLO = 27,5
	AI_LAZURUS = 28,5
	AI_LAZHELP = 29,5
	AI_LACHDAN = 30,5
	AI_WARLORD = 31,5
};5
5
enum _mc_id5
{5
	MC_UNDEAD = 0,5
	MC_DEMON = 1,5
	MC_ANIMAL = 2,5
};5
5
enum _monster_id5
{5
	MT_NZOMBIE = 0x0,5
	MT_BZOMBIE = 0x1,5
	MT_GZOMBIE = 0x2,5
	MT_YZOMBIE = 0x3,5
	MT_RFALLSP = 0x4,5
	MT_DFALLSP = 0x5,5
	MT_YFALLSP = 0x6,5
	MT_BFALLSP = 0x7,5
	MT_WSKELAX = 0x8,5
	MT_TSKELAX = 0x9,5
	MT_RSKELAX = 0xA,5
	MT_XSKELAX = 0xB,5
	MT_RFALLSD = 0xC,5
	MT_DFALLSD = 0xD,5
	MT_YFALLSD = 0xE,5
	MT_BFALLSD = 0xF,5
	MT_NSCAV = 0x10,5
	MT_BSCAV = 0x11,5
	MT_WSCAV = 0x12,5
	MT_YSCAV = 0x13,5
	MT_WSKELBW = 0x14,5
	MT_TSKELBW = 0x15,5
	MT_RSKELBW = 0x16,5
	MT_XSKELBW = 0x17,5
	MT_WSKELSD = 0x18,5
	MT_TSKELSD = 0x19,5
	MT_RSKELSD = 0x1A,5
	MT_XSKELSD = 0x1B,5
	MT_INVILORD = 0x1C,5
	MT_SNEAK = 0x1D,5
	MT_STALKER = 0x1E,5
	MT_UNSEEN = 0x1F,5
	MT_ILLWEAV = 0x20,5
	MT_LRDSAYTR = 0x21,5
	MT_NGOATMC = 0x22,5
	MT_BGOATMC = 0x23,5
	MT_RGOATMC = 0x24,5
	MT_GGOATMC = 0x25,5
	MT_FIEND = 0x26,5
	MT_BLINK = 0x27,5
	MT_GLOOM = 0x28,5
	MT_FAMILIAR = 0x29,5
	MT_NGOATBW = 0x2A,5
	MT_BGOATBW = 0x2B,5
	MT_RGOATBW = 0x2C,5
	MT_GGOATBW = 0x2D,5
	MT_NACID = 0x2E,5
	MT_RACID = 0x2F,5
	MT_BACID = 0x30,5
	MT_XACID = 0x31,5
	MT_SKING = 0x32,5
	MT_CLEAVER = 0x33,5
	MT_FAT = 0x34,5
	MT_MUDMAN = 0x35,5
	MT_TOAD = 0x36,5
	MT_FLAYED = 0x37,5
	MT_WYRM = 0x38,5
	MT_CAVSLUG = 0x39,5
	MT_DVLWYRM = 0x3A,5
	MT_DEVOUR = 0x3B,5
	MT_NMAGMA = 0x3C,5
	MT_YMAGMA = 0x3D,5
	MT_BMAGMA = 0x3E,5
	MT_WMAGMA = 0x3F,5
	MT_HORNED = 0x40,5
	MT_MUDRUN = 0x41,5
	MT_FROSTC = 0x42,5
	MT_OBLORD = 0x43,5
	MT_BONEDMN = 0x44,5
	MT_REDDTH = 0x45,5
	MT_LTCHDMN = 0x46,5
	MT_UDEDBLRG = 0x47,5
	MT_INCIN = 0x48,5
	MT_FLAMLRD = 0x49,5
	MT_DOOMFIRE = 0x4A,5
	MT_HELLBURN = 0x4B,5
	MT_STORM = 0x4C,5
	MT_RSTORM = 0x4D,5
	MT_STORML = 0x4E,5
	MT_MAEL = 0x4F,5
	MT_BIGFALL = 0x50,5
	MT_WINGED = 0x51,5
	MT_GARGOYLE = 0x52,5
	MT_BLOODCLW = 0x53,5
	MT_DEATHW = 0x54,5
	MT_MEGA = 0x55,5
	MT_GUARD = 0x56,5
	MT_VTEXLRD = 0x57,5
	MT_BALROG = 0x58,5
	MT_NSNAKE = 0x59,5
	MT_RSNAKE = 0x5A,5
	MT_BSNAKE = 0x5B,5
	MT_GSNAKE = 0x5C,5
	MT_NBLACK = 0x5D,5
	MT_RTBLACK = 0x5E,5
	MT_BTBLACK = 0x5F,5
	MT_RBLACK = 0x60,5
	MT_UNRAV = 0x61,5
	MT_HOLOWONE = 0x62,5
	MT_PAINMSTR = 0x63,5
	MT_REALWEAV = 0x64,5
	MT_SUCCUBUS = 0x65,5
	MT_SNOWWICH = 0x66,5
	MT_HLSPWN = 0x67,5
	MT_SOLBRNR = 0x68,5
	MT_COUNSLR = 0x69,5
	MT_MAGISTR = 0x6A,5
	MT_CABALIST = 0x6B,5
	MT_ADVOCATE = 0x6C,5
	MT_GOLEM = 0x6D,5
	MT_DIABLO = 0x6E,5
	MT_DARKMAGE = 0x6F5
};5
5
enum _speech_id5
{5
	QUEST_KING1 = 0x0,5
	QUEST_KING2 = 0x1,5
	QUEST_KING3 = 0x2,5
	QUEST_KING4 = 0x3,5
	QUEST_KING5 = 0x4,5
	QUEST_KING6 = 0x5,5
	QUEST_KING7 = 0x6,5
	QUEST_KING8 = 0x7,5
	QUEST_KING9 = 0x8,5
	QUEST_KING10 = 0x9,5
	QUEST_KING11 = 0xA,5
	QUEST_BANNER1 = 0xB,5
	QUEST_BANNER2 = 0xC,5
	QUEST_BANNER3 = 0xD,5
	QUEST_BANNER4 = 0xE,5
	QUEST_BANNER5 = 0xF,5
	QUEST_BANNER6 = 0x10,5
	QUEST_BANNER7 = 0x11,5
	QUEST_BANNER8 = 0x12,5
	QUEST_BANNER9 = 0x13,5
	QUEST_BANNER10 = 0x14,5
	QUEST_BANNER11 = 0x15,5
	QUEST_BANNER12 = 0x16,5
	QUEST_VILE1 = 0x17,5
	QUEST_VILE2 = 0x18,5
	QUEST_VILE3 = 0x19,5
	QUEST_VILE4 = 0x1A,5
	QUEST_VILE5 = 0x1B,5
	QUEST_VILE6 = 0x1C,5
	QUEST_VILE7 = 0x1D,5
	QUEST_VILE8 = 0x1E,5
	QUEST_VILE9 = 0x1F,5
	QUEST_VILE10 = 0x20,5
	QUEST_VILE11 = 0x21,5
	QUEST_VILE12 = 0x22,5
	QUEST_VILE13 = 0x23,5
	QUEST_VILE14 = 0x24,5
	QUEST_POISON1 = 0x25,5
	QUEST_POISON2 = 0x26,5
	QUEST_POISON3 = 0x27,5
	QUEST_POISON4 = 0x28,5
	QUEST_POISON5 = 0x29,5
	QUEST_POISON6 = 0x2A,5
	QUEST_POISON7 = 0x2B,5
	QUEST_POISON8 = 0x2C,5
	QUEST_POISON9 = 0x2D,5
	QUEST_POISON10 = 0x2E,5
	QUEST_BONE1 = 0x2F,5
	QUEST_BONE2 = 0x30,5
	QUEST_BONE3 = 0x31,5
	QUEST_BONE4 = 0x32,5
	QUEST_BONE5 = 0x33,5
	QUEST_BONE6 = 0x34,5
	QUEST_BONE7 = 0x35,5
	QUEST_BONE8 = 0x36,5
	QUEST_BUTCH1 = 0x37,5
	QUEST_BUTCH2 = 0x38,5
	QUEST_BUTCH3 = 0x39,5
	QUEST_BUTCH4 = 0x3A,5
	QUEST_BUTCH5 = 0x3B,5
	QUEST_BUTCH6 = 0x3C,5
	QUEST_BUTCH7 = 0x3D,5
	QUEST_BUTCH8 = 0x3E,5
	QUEST_BUTCH9 = 0x3F,5
	QUEST_BUTCH10 = 0x40,5
	QUEST_BLIND1 = 0x41,5
	QUEST_BLIND2 = 0x42,5
	QUEST_BLIND3 = 0x43,5
	QUEST_BLIND4 = 0x44,5
	QUEST_BLIND5 = 0x45,5
	QUEST_BLIND6 = 0x46,5
	QUEST_BLIND7 = 0x47,5
	QUEST_BLIND8 = 0x48,5
	QUEST_VEIL1 = 0x49,5
	QUEST_VEIL2 = 0x4A,5
	QUEST_VEIL3 = 0x4B,5
	QUEST_VEIL4 = 0x4C,5
	QUEST_VEIL5 = 0x4D,5
	QUEST_VEIL6 = 0x4E,5
	QUEST_VEIL7 = 0x4F,5
	QUEST_VEIL8 = 0x50,5
	QUEST_VEIL9 = 0x51,5
	QUEST_VEIL10 = 0x52,5
	QUEST_VEIL11 = 0x53,5
	QUEST_ANVIL1 = 0x54,5
	QUEST_ANVIL2 = 0x55,5
	QUEST_ANVIL3 = 0x56,5
	QUEST_ANVIL4 = 0x57,5
	QUEST_ANVIL5 = 0x58,5
	QUEST_ANVIL6 = 0x59,5
	QUEST_ANVIL7 = 0x5A,5
	QUEST_ANVIL8 = 0x5B,5
	QUEST_ANVIL9 = 0x5C,5
	QUEST_ANVIL10 = 0x5D,5
	QUEST_BLOOD1 = 0x5E,5
	QUEST_BLOOD2 = 0x5F,5
	QUEST_BLOOD3 = 0x60,5
	QUEST_BLOOD4 = 0x61,5
	QUEST_BLOOD5 = 0x62,5
	QUEST_BLOOD6 = 0x63,5
	QUEST_BLOOD7 = 0x64,5
	QUEST_BLOOD8 = 0x65,5
	QUEST_WARLRD1 = 0x66,5
	QUEST_WARLRD2 = 0x67,5
	QUEST_WARLRD3 = 0x68,5
	QUEST_WARLRD4 = 0x69,5
	QUEST_WARLRD5 = 0x6A,5
	QUEST_WARLRD6 = 0x6B,5
	QUEST_WARLRD7 = 0x6C,5
	QUEST_WARLRD8 = 0x6D,5
	QUEST_WARLRD9 = 0x6E,5
	QUEST_INFRA1 = 0x6F,5
	QUEST_INFRA2 = 0x70,5
	QUEST_INFRA3 = 0x71,5
	QUEST_INFRA4 = 0x72,5
	QUEST_INFRA5 = 0x73,5
	QUEST_INFRA6 = 0x74,5
	QUEST_INFRA7 = 0x75,5
	QUEST_INFRA8 = 0x76,5
	QUEST_INFRA9 = 0x77,5
	QUEST_INFRA10 = 0x78,5
	QUEST_MUSH1 = 0x79,5
	QUEST_MUSH2 = 0x7A,5
	QUEST_MUSH3 = 0x7B,5
	QUEST_MUSH4 = 0x7C,5
	QUEST_MUSH5 = 0x7D,5
	QUEST_MUSH6 = 0x7E,5
	QUEST_MUSH7 = 0x7F,5
	QUEST_MUSH8 = 0x80,5
	QUEST_MUSH9 = 0x81,5
	QUEST_MUSH10 = 0x82,5
	QUEST_MUSH11 = 0x83,5
	QUEST_MUSH12 = 0x84,5
	QUEST_MUSH13 = 0x85,5
	QUEST_DOOM1 = 0x86,5
	QUEST_DOOM2 = 0x87,5
	QUEST_DOOM3 = 0x88,5
	QUEST_DOOM4 = 0x89,5
	QUEST_DOOM5 = 0x8A,5
	QUEST_DOOM6 = 0x8B,5
	QUEST_DOOM7 = 0x8C,5
	QUEST_DOOM8 = 0x8D,5
	QUEST_DOOM9 = 0x8E,5
	QUEST_DOOM10 = 0x8F,5
	QUEST_GARBUD1 = 0x90,5
	QUEST_GARBUD2 = 0x91,5
	QUEST_GARBUD3 = 0x92,5
	QUEST_GARBUD4 = 0x93,5
	QUEST_ZHAR1 = 0x94,5
	QUEST_ZHAR2 = 0x95,5
	QUEST_STORY1 = 0x96,5
	QUEST_STORY2 = 0x97,5
	QUEST_STORY3 = 0x98,5
	QUEST_STORY4 = 0x99,5
	QUEST_STORY5 = 0x9A,5
	QUEST_STORY6 = 0x9B,5
	QUEST_STORY7 = 0x9C,5
	QUEST_STORY9 = 0x9D,5
	QUEST_STORY10 = 0x9E,5
	QUEST_STORY11 = 0x9F,5
	QUEST_OGDEN1 = 0xA0,5
	QUEST_OGDEN2 = 0xA1,5
	QUEST_OGDEN3 = 0xA2,5
	QUEST_OGDEN4 = 0xA3,5
	QUEST_OGDEN5 = 0xA4,5
	QUEST_OGDEN6 = 0xA5,5
	QUEST_OGDEN8 = 0xA6,5
	QUEST_OGDEN9 = 0xA7,5
	QUEST_OGDEN10 = 0xA8,5
	QUEST_PEPIN1 = 0xA9,5
	QUEST_PEPIN2 = 0xAA,5
	QUEST_PEPIN3 = 0xAB,5
	QUEST_PEPIN4 = 0xAC,5
	QUEST_PEPIN5 = 0xAD,5
	QUEST_PEPIN6 = 0xAE,5
	QUEST_PEPIN7 = 0xAF,5
	QUEST_PEPIN9 = 0xB0,5
	QUEST_PEPIN10 = 0xB1,5
	QUEST_PEPIN11 = 0xB2,5
	QUEST_GILLIAN1 = 0xB3,5
	QUEST_GILLIAN2 = 0xB4,5
	QUEST_GILLIAN3 = 0xB5,5
	QUEST_GILLIAN4 = 0xB6,5
	QUEST_GILLIAN5 = 0xB7,5
	QUEST_GILLIAN6 = 0xB8,5
	QUEST_GILLIAN7 = 0xB9,5
	QUEST_GILLIAN9 = 0xBA,5
	QUEST_GILLIAN10 = 0xBB,5
	QUEST_GRISWOLD1 = 0xBC,5
	QUEST_GRISWOLD2 = 0xBD,5
	QUEST_GRISWOLD3 = 0xBE,5
	QUEST_GRISWOLD4 = 0xBF,5
	QUEST_GRISWOLD5 = 0xC0,5
	QUEST_GRISWOLD6 = 0xC1,5
	QUEST_GRISWOLD7 = 0xC2,5
	QUEST_GRISWOLD8 = 0xC3,5
	QUEST_GRISWOLD9 = 0xC4,5
	QUEST_GRISWOLD10 = 0xC5,5
	QUEST_GRISWOLD12 = 0xC6,5
	QUEST_GRISWOLD13 = 0xC7,5
	QUEST_FARNHAM1 = 0xC8,5
	QUEST_FARNHAM2 = 0xC9,5
	QUEST_FARNHAM3 = 0xCA,5
	QUEST_FARNHAM4 = 0xCB,5
	QUEST_FARNHAM5 = 0xCC,5
	QUEST_FARNHAM6 = 0xCD,5
	QUEST_FARNHAM8 = 0xCE,5
	QUEST_FARNHAM9 = 0xCF,5
	QUEST_FARNHAM10 = 0xD0,5
	QUEST_FARNHAM11 = 0xD1,5
	QUEST_FARNHAM12 = 0xD2,5
	QUEST_FARNHAM13 = 0xD3,5
	QUEST_ADRIA1 = 0xD4,5
	QUEST_ADRIA2 = 0xD5,5
	QUEST_ADRIA3 = 0xD6,5
	QUEST_ADRIA4 = 0xD7,5
	QUEST_ADRIA5 = 0xD8,5
	QUEST_ADRIA6 = 0xD9,5
	QUEST_ADRIA7 = 0xDA,5
	QUEST_ADRIA8 = 0xDB,5
	QUEST_ADRIA9 = 0xDC,5
	QUEST_ADRIA10 = 0xDD,5
	QUEST_ADRIA12 = 0xDE,5
	QUEST_ADRIA13 = 0xDF,5
	QUEST_WIRT1 = 0xE0,5
	QUEST_WIRT2 = 0xE1,5
	QUEST_WIRT3 = 0xE2,5
	QUEST_WIRT4 = 0xE3,5
	QUEST_WIRT5 = 0xE4,5
	QUEST_WIRT6 = 0xE5,5
	QUEST_WIRT7 = 0xE6,5
	QUEST_WIRT8 = 0xE7,5
	QUEST_WIRT9 = 0xE8,5
	QUEST_WIRT11 = 0xE9,5
	QUEST_WIRT12 = 0xEA,5
	QUEST_BONER = 0xEB,5
	QUEST_BLOODY = 0xEC,5
	QUEST_BLINDING = 0xED,5
	QUEST_BLOODWAR = 0xEE,5
	QUEST_MBONER = 0xEF,5
	QUEST_MBLOODY = 0xF0,5
	QUEST_MBLINDING = 0xF1,5
	QUEST_MBLOODWAR = 0xF2,5
	QUEST_RBONER = 0xF3,5
	QUEST_RBLOODY = 0xF4,5
	QUEST_RBLINDING = 0xF5,5
	QUEST_RBLOODWAR = 0xF6,5
	QUEST_COW1 = 0xF7,5
	QUEST_COW2 = 0xF8,5
	QUEST_BOOK11 = 0xF9,5
	QUEST_BOOK12 = 0xFA,5
	QUEST_BOOK13 = 0xFB,5
	QUEST_BOOK21 = 0xFC,5
	QUEST_BOOK22 = 0xFD,5
	QUEST_BOOK23 = 0xFE,5
	QUEST_BOOK31 = 0xFF,5
	QUEST_BOOK32 = 0x100,5
	QUEST_BOOK33 = 0x101,5
	QUEST_INTRO = 0x1025
};5
5
enum object_graphic_id5
{5
	OFILE_L1BRAZ = 0x0,5
	OFILE_L1DOORS = 0x1,5
	OFILE_LEVER = 0x2,5
	OFILE_CHEST1 = 0x3,5
	OFILE_CHEST2 = 0x4,5
	OFILE_BANNER = 0x5,5
	OFILE_SKULPILE = 0x6,5
	OFILE_SKULFIRE = 0x7,5
	OFILE_SKULSTIK = 0x8,5
	OFILE_CRUXSK1 = 0x9,5
	OFILE_CRUXSK2 = 0xA,5
	OFILE_CRUXSK3 = 0xB,5
	OFILE_BOOK1 = 0xC,5
	OFILE_BOOK2 = 0xD,5
	OFILE_ROCKSTAN = 0xE,5
	OFILE_ANGEL = 0xF,5
	OFILE_CHEST3 = 0x10,5
	OFILE_BURNCROS = 0x11,5
	OFILE_CANDLE2 = 0x12,5
	OFILE_NUDE2 = 0x13,5
	OFILE_SWITCH4 = 0x14,5
	OFILE_TNUDEM = 0x15,5
	OFILE_TNUDEW = 0x16,5
	OFILE_TSOUL = 0x17,5
	OFILE_L2DOORS = 0x18,5
	OFILE_WTORCH4 = 0x19,5
	OFILE_WTORCH3 = 0x1A,5
	OFILE_SARC = 0x1B,5
	OFILE_FLAME1 = 0x1C,5
	OFILE_PRSRPLT1 = 0x1D,5
	OFILE_TRAPHOLE = 0x1E,5
	OFILE_MINIWATR = 0x1F,5
	OFILE_WTORCH2 = 0x20,5
	OFILE_WTORCH1 = 0x21,5
	OFILE_BCASE = 0x22,5
	OFILE_BSHELF = 0x23,5
	OFILE_WEAPSTND = 0x24,5
	OFILE_BARREL = 0x25,5
	OFILE_BARRELEX = 0x26,5
	OFILE_LSHRINEG = 0x27,5
	OFILE_RSHRINEG = 0x28,5
	OFILE_BLOODFNT = 0x29,5
	OFILE_DECAP = 0x2A,5
	OFILE_PEDISTL = 0x2B,5
	OFILE_L3DOORS = 0x2C,5
	OFILE_PFOUNTN = 0x2D,5
	OFILE_ARMSTAND = 0x2E,5
	OFILE_GOATSHRN = 0x2F,5
	OFILE_CAULDREN = 0x30,5
	OFILE_MFOUNTN = 0x31,5
	OFILE_TFOUNTN = 0x32,5
	OFILE_ALTBOY = 0x33,5
	OFILE_MCIRL = 0x34,5
	OFILE_BKSLBRNT = 0x35,5
	OFILE_MUSHPTCH = 0x36,5
	OFILE_LZSTAND = 0x37,5
};5
5
enum dungeon_type5
{5
	DTYPE_TOWN = 0x0,5
	DTYPE_CATHEDRAL = 0x1,5
	DTYPE_CATACOMBS = 0x2,5
	DTYPE_CAVES = 0x3,5
	DTYPE_HELL = 0x4,5
	DTYPE_NONE = 0xFF,5
};5
5
enum magic_type5
{5
	STYPE_FIRE = 0x0,5
	STYPE_LIGHTNING = 0x1,5
	STYPE_MAGIC = 0x2,5
};5
5
enum theme_id5
{5
	THEME_BARREL = 0x0,5
	THEME_SHRINE = 0x1,5
	THEME_MONSTPIT = 0x2,5
	THEME_SKELROOM = 0x3,5
	THEME_TREASURE = 0x4,5
	THEME_LIBRARY = 0x5,5
	THEME_TORTURE = 0x6,5
	THEME_BLOODFOUNTAIN = 0x7,5
	THEME_DECAPITATED = 0x8,5
	THEME_PURIFYINGFOUNTAIN = 0x9,5
	THEME_ARMORSTAND = 0xA,5
	THEME_GOATSHRINE = 0xB,5
	THEME_CAULDRON = 0xC,5
	THEME_MURKYFOUNTAIN = 0xD,5
	THEME_TEARFOUNTAIN = 0xE,5
	THEME_BRNCROSS = 0xF,5
	THEME_WEAPONRACK = 0x10,5
	THEME_NONE = 0xFF,5
};5
5
enum event_type5
{5
	EVENT_TYPE_PLAYER_CREATE_GAME = 1,5
	EVENT_TYPE_2 = 2,5
	EVENT_TYPE_PLAYER_LEAVE_GAME = 3,5
	EVENT_TYPE_PLAYER_MESSAGE = 4,5
	EVENT_TYPE_5 = 5,5
	EVENT_TYPE_6 = 6,5
	EVENT_TYPE_7 = 7,5
	EVENT_TYPE_8 = 8,5
	EVENT_TYPE_9 = 9,5
	EVENT_TYPE_10 = 10,5
	EVENT_TYPE_11 = 11,5
	EVENT_TYPE_12 = 12,5
	EVENT_TYPE_13 = 13,5
	EVENT_TYPE_14 = 14,5
	EVENT_TYPE_15 = 15,5
};5
5
enum _copyprot_results5
{5
	COPYPROT_OK = 1,5
	COPYPROT_CANCEL = 2,5
};5
5
enum text_color5
{5
	COL_WHITE = 0x0,5
	COL_BLUE = 0x1,5
	COL_RED = 0x2,5
	COL_GOLD = 0x3,5
};5
5
enum _difficulty5
{5
	DIFF_NORMAL = 0x0,5
	DIFF_NIGHTMARE = 0x1,5
	DIFF_HELL = 0x2,5
	NUM_DIFFICULTIES = 0x3,5
};5
5
enum MON_MODE5
{5
	MM_STAND = 0,5
	MM_WALK = 1,5
	MM_WALK2 = 2,5
	MM_WALK3 = 3,5
	MM_ATTACK = 4,5
	MM_GOTHIT = 5,5
	MM_DEATH = 6,5
	MM_SATTACK = 7,5
	MM_FADEIN = 8,5
	MM_FADEOUT = 9,5
	MM_RATTACK = 10,5
	MM_SPSTAND = 11,5
	MM_RSPATTACK = 12,5
	MM_DELAY = 13,5
	MM_CHARGE = 14,5
	MM_STONE = 15,5
	MM_HEAL = 16,5
	MM_TALK = 17,5
};5
5
enum PLR_MODE5
{5
	PM_STAND = 0,5
	PM_WALK = 1,5
	PM_WALK2 = 2,5
	PM_WALK3 = 3,5
	PM_ATTACK = 4,5
	PM_RATTACK = 5,5
	PM_BLOCK = 6,5
	PM_GOTHIT = 7,5
	PM_DEATH = 8,5
	PM_SPELL = 9,5
	PM_NEWLVL = 10,5
	PM_QUIT = 11,5
};5
5
enum template_id5
{5
	TEMPLATE_ERR_DX = 0x68,5
	TEMPLATE_ERR_NOMEMORY = 0x69,5
	TEMPLATE_ERR_NOFILE = 0x6A,5
	TEMPLATE_ERR_DDRAW = 0x6B,5
	TEMPLATE_ERR_DSOUND = 0x6C,5
	TEMPLATE_ERR_DISKSPACE = 0x6E,5
	TEMPLATE_ERR_VIDEOMODE = 0x6F,5
	TEMPLATE_ERR_INSERTCD = 0x70,5
	TEMPLATE_ERR_RESTRICTED = 0x71,5
	TEMPLATE_ERR_READONLY = 0x72,5
};5
5
enum spell_type5
{5
	RSPLTYPE_SKILL = 0x0,5
	RSPLTYPE_SPELL = 0x1,5
	RSPLTYPE_SCROLL = 0x2,5
	RSPLTYPE_CHARGES = 0x3,5
	RSPLTYPE_INVALID = 0x4,5
};5
5
enum cursor_id5
{5
	CURSOR_NONE = 0x0,5
	CURSOR_HAND = 0x1,5
	CURSOR_IDENTIFY = 0x2,5
	CURSOR_REPAIR = 0x3,5
	CURSOR_RECHARGE = 0x4,5
	CURSOR_DISARM = 0x5,5
	CURSOR_OIL = 0x6,5
	CURSOR_TELEKINESIS = 0x7,5
	CURSOR_RESURRECT = 0x8,5
	CURSOR_TELEPORT = 0x9,5
	CURSOR_HEALOTHER = 0xA,5
	CURSOR_HOURGLASS = 0xB,5
	CURSOR_FIRSTITEM = 0xC,5
};5
5
enum direction5
{5
	DIR_S = 0x0,5
	DIR_SW = 0x1,5
	DIR_W = 0x2,5
	DIR_NW = 0x3,5
	DIR_N = 0x4,5
	DIR_NE = 0x5,5
	DIR_E = 0x6,5
	DIR_SE = 0x7,5
	DIR_OMNI = 0x8,5
};5
5
enum interface_mode5
{5
	WM_DIAB = 0x401,5
	WM_DIABNEXTLVL = 0x402, // WM_USER+25
	WM_DIABPREVLVL = 0x403,5
	WM_DIABRTNLVL = 0x404,5
	WM_DIABSETLVL = 0x405,5
	WM_DIABWARPLVL = 0x406,5
	WM_DIABTOWNWARP = 0x407,5
	WM_DIABTWARPUP = 0x408,5
	WM_DIABRETOWN = 0x409,5
	WM_DIABNEWGAME = 0x40A,5
	WM_DIABLOADGAME = 0x40B5
	// WM_LEIGHSKIP = 0x40C, // psx only5
	// WM_DIAVNEWLVL = 0x40D, // psx only5
};5
5
enum game_info5
{5
	GAMEINFO_NAME           = 1,5
	GAMEINFO_PASSWORD       = 2,5
	GAMEINFO_STATS          = 3,5
	GAMEINFO_MODEFLAG       = 4,5
	GAMEINFO_GAMETEMPLATE   = 5,5
	GAMEINFO_PLAYERS        = 6,5
};5
5
enum spell_id5
{5
	SPL_NULL = 0x0,5
	SPL_FIREBOLT = 0x1,5
	SPL_HEAL = 0x2,5
	SPL_LIGHTNING = 0x3,5
	SPL_FLASH = 0x4,5
	SPL_IDENTIFY = 0x5,5
	SPL_FIREWALL = 0x6,5
	SPL_TOWN = 0x7,5
	SPL_STONE = 0x8,5
	SPL_INFRA = 0x9,5
	SPL_RNDTELEPORT = 0xA,5
	SPL_MANASHIELD = 0xB,5
	SPL_FIREBALL = 0xC,5
	SPL_GUARDIAN = 0xD,5
	SPL_CHAIN = 0xE,5
	SPL_WAVE = 0xF,5
	SPL_DOOMSERP = 0x10,5
	SPL_BLODRIT = 0x11,5
	SPL_NOVA = 0x12,5
	SPL_INVISIBIL = 0x13,5
	SPL_FLAME = 0x14,5
	SPL_GOLEM = 0x15,5
	SPL_BLODBOIL = 0x16,5
	SPL_TELEPORT = 0x17,5
	SPL_APOCA = 0x18,5
	SPL_ETHEREALIZE = 0x19,5
	SPL_REPAIR = 0x1A,5
	SPL_RECHARGE = 0x1B,5
	SPL_DISARM = 0x1C,5
	SPL_ELEMENT = 0x1D,5
	SPL_CBOLT = 0x1E,5
	SPL_HBOLT = 0x1F,5
	SPL_RESURRECT = 0x20,5
	SPL_TELEKINESIS = 0x21,5
	SPL_HEALOTHER = 0x22,5
	SPL_FLARE = 0x23,5
	SPL_BONESPIRIT = 0x24,5
	SPL_INVALID = 0xFFFFFFFF,5
};5
5
enum _cmd_id5
{5
	CMD_STAND = 0,5
	CMD_WALKXY = 1,5
	CMD_ACK_PLRINFO = 2,5
	CMD_ADDSTR = 3,5
	CMD_ADDMAG = 4,5
	CMD_ADDDEX = 5,5
	CMD_ADDVIT = 6,5
	CMD_SBSPELL = 7,5
	CMD_GETITEM = 8,5
	CMD_AGETITEM = 9,5
	CMD_PUTITEM = 10,5
	CMD_RESPAWNITEM = 11,5
	CMD_ATTACKXY = 12,5
	CMD_RATTACKXY = 13,5
	CMD_SPELLXY = 14,5
	CMD_TSPELLXY = 15,5
	CMD_OPOBJXY = 16,5
	CMD_DISARMXY = 17,5
	CMD_ATTACKID = 18,5
	CMD_ATTACKPID = 19,5
	CMD_RATTACKID = 20,5
	CMD_RATTACKPID = 21,5
	CMD_SPELLID = 22,5
	CMD_SPELLPID = 23,5
	CMD_TSPELLID = 24,5
	CMD_TSPELLPID = 25,5
	CMD_RESURRECT = 26,5
	CMD_OPOBJT = 27,5
	CMD_KNOCKBACK = 28,5
	CMD_TALKXY = 29,5
	CMD_NEWLVL = 30,5
	CMD_WARP = 31,5
	CMD_CHEAT_EXPERIENCE = 32,5
	CMD_CHEAT_SPELL_LEVEL = 33,5
	CMD_DEBUG = 34,5
	CMD_SYNCDATA = 35,5
	CMD_MONSTDEATH = 36,5
	CMD_MONSTDAMAGE = 37,5
	CMD_PLRDEAD = 38,5
	CMD_REQUESTGITEM = 39,5
	CMD_REQUESTAGITEM = 40,5
	CMD_GOTOGETITEM = 41,5
	CMD_GOTOAGETITEM = 42,5
	CMD_OPENDOOR = 43,5
	CMD_CLOSEDOOR = 44,5
	CMD_OPERATEOBJ = 45,5
	CMD_PLROPOBJ = 46,5
	CMD_BREAKOBJ = 47,5
	CMD_CHANGEPLRITEMS = 48,5
	CMD_DELPLRITEMS = 49,5
	CMD_PLRDAMAGE = 50,5
	CMD_PLRLEVEL = 51,5
	CMD_DROPITEM = 52,5
	CMD_PLAYER_JOINLEVEL = 53,5
	CMD_SEND_PLRINFO = 54,5
	CMD_SATTACKXY = 55,5
	CMD_ACTIVATEPORTAL = 56,5
	CMD_DEACTIVATEPORTAL = 57,5
	CMD_DLEVEL_0 = 58,5
	CMD_DLEVEL_1 = 59,5
	CMD_DLEVEL_2 = 60,5
	CMD_DLEVEL_3 = 61,5
	CMD_DLEVEL_4 = 62,5
	CMD_DLEVEL_5 = 63,5
	CMD_DLEVEL_6 = 64,5
	CMD_DLEVEL_7 = 65,5
	CMD_DLEVEL_8 = 66,5
	CMD_DLEVEL_9 = 67,5
	CMD_DLEVEL_10 = 68,5
	CMD_DLEVEL_11 = 69,5
	CMD_DLEVEL_12 = 70,5
	CMD_DLEVEL_13 = 71,5
	CMD_DLEVEL_14 = 72,5
	CMD_DLEVEL_15 = 73,5
	CMD_DLEVEL_16 = 74,5
	CMD_DLEVEL_JUNK = 75,5
	CMD_DLEVEL_END = 76,5
	CMD_HEALOTHER = 77,5
	CMD_STRING = 78,5
	CMD_SETSTR = 79,5
	CMD_SETMAG = 80,5
	CMD_SETDEX = 81,5
	CMD_SETVIT = 82,5
	CMD_RETOWN = 83,5
	CMD_SPELLXYD = 84,5
	CMD_ITEMEXTRA = 85,5
	CMD_SYNCPUTITEM = 86,5
	CMD_KILLGOLEM = 87,5
	CMD_SYNCQUEST = 88,5
	CMD_ENDSHIELD = 89,5
	CMD_AWAKEGOLEM = 90,5
	CMD_NOVA = 91,5
	CMD_SETSHIELD = 92,5
	CMD_REMSHIELD = 93,5
	FAKE_CMD_SETID = 94,5
	FAKE_CMD_DROPID = 95,5
	NUM_CMDS = 96,5
};5
5
enum _talker_id5
{5
	TOWN_SMITH = 0x0,5
	TOWN_HEALER = 0x1,5
	TOWN_DEADGUY = 0x2,5
	TOWN_TAVERN = 0x3,5
	TOWN_STORY = 0x4,5
	TOWN_DRUNK = 0x5,5
	TOWN_WITCH = 0x6,5
	TOWN_BMAID = 0x7,5
	TOWN_PEGBOY = 0x8,5
	TOWN_COW = 0x9,5
	TOWN_PRIEST = 0xA,5
};5
5
enum _music_id5
{5
	TMUSIC_TOWN = 0,5
	TMUSIC_L1 = 1,5
	TMUSIC_L2 = 2,5
	TMUSIC_L3 = 3,5
	TMUSIC_L4 = 4,5
	TMUSIC_INTRO = 5,5
	NUM_MUSIC = 6,5
};5
5
enum _mainmenu_selections5
{5
	MAINMENU_SINGLE_PLAYER = 1,5
	MAINMENU_MULTIPLAYER = 2,5
	MAINMENU_REPLAY_INTRO = 3,5
	MAINMENU_SHOW_CREDITS = 4,5
	MAINMENU_EXIT_DIABLO = 5,5
	MAINMENU_ATTRACT_MODE = 6,5
};5
5
enum panel_button_id5
{5
	PANBTN_CHARINFO = 0,5
	PANBTN_QLOG = 1,5
	PANBTN_AUTOMAP = 2,5
	PANBTN_MAINMENU = 3,5
	PANBTN_INVENTORY = 4,5
	PANBTN_SPELLBOOK = 5,5
	PANBTN_SENDMSG = 6,5
	PANBTN_FRIENDLY = 7,5
};5
5
enum attribute_id5
{5
	ATTRIB_STR = 0,5
	ATTRIB_MAG = 1,5
	ATTRIB_DEX = 2,5
	ATTRIB_VIT = 3,5
};5
5
enum _object_id5
{5
	OBJ_L1LIGHT = 0x0,5
	OBJ_L1LDOOR = 0x1,5
	OBJ_L1RDOOR = 0x2,5
	OBJ_SKFIRE = 0x3,5
	OBJ_LEVER = 0x4,5
	OBJ_CHEST1 = 0x5,5
	OBJ_CHEST2 = 0x6,5
	OBJ_CHEST3 = 0x7,5
	OBJ_CANDLE1 = 0x8,5
	OBJ_CANDLE2 = 0x9,5
	OBJ_CANDLEO = 0xA,5
	OBJ_BANNERL = 0xB,5
	OBJ_BANNERM = 0xC,5
	OBJ_BANNERR = 0xD,5
	OBJ_SKPILE = 0xE,5
	OBJ_SKSTICK1 = 0xF,5
	OBJ_SKSTICK2 = 0x10,5
	OBJ_SKSTICK3 = 0x11,5
	OBJ_SKSTICK4 = 0x12,5
	OBJ_SKSTICK5 = 0x13,5
	OBJ_CRUX1 = 0x14,5
	OBJ_CRUX2 = 0x15,5
	OBJ_CRUX3 = 0x16,5
	OBJ_STAND = 0x17,5
	OBJ_ANGEL = 0x18,5
	OBJ_BOOK2L = 0x19,5
	OBJ_BCROSS = 0x1A,5
	OBJ_NUDEW2R = 0x1B,5
	OBJ_SWITCHSKL = 0x1C,5
	OBJ_TNUDEM1 = 0x1D,5
	OBJ_TNUDEM2 = 0x1E,5
	OBJ_TNUDEM3 = 0x1F,5
	OBJ_TNUDEM4 = 0x20,5
	OBJ_TNUDEW1 = 0x21,5
	OBJ_TNUDEW2 = 0x22,5
	OBJ_TNUDEW3 = 0x23,5
	OBJ_TORTURE1 = 0x24,5
	OBJ_TORTURE2 = 0x25,5
	OBJ_TORTURE3 = 0x26,5
	OBJ_TORTURE4 = 0x27,5
	OBJ_TORTURE5 = 0x28,5
	OBJ_BOOK2R = 0x29,5
	OBJ_L2LDOOR = 0x2A,5
	OBJ_L2RDOOR = 0x2B,5
	OBJ_TORCHL = 0x2C,5
	OBJ_TORCHR = 0x2D,5
	OBJ_TORCHL2 = 0x2E,5
	OBJ_TORCHR2 = 0x2F,5
	OBJ_SARC = 0x30,5
	OBJ_FLAMEHOLE = 0x31,5
	OBJ_FLAMELVR = 0x32,5
	OBJ_WATER = 0x33,5
	OBJ_BOOKLVR = 0x34,5
	OBJ_TRAPL = 0x35,5
	OBJ_TRAPR = 0x36,5
	OBJ_BOOKSHELF = 0x37,5
	OBJ_WEAPRACK = 0x38,5
	OBJ_BARREL = 0x39,5
	OBJ_BARRELEX = 0x3A,5
	OBJ_SHRINEL = 0x3B,5
	OBJ_SHRINER = 0x3C,5
	OBJ_SKELBOOK = 0x3D,5
	OBJ_BOOKCASEL = 0x3E,5
	OBJ_BOOKCASER = 0x3F,5
	OBJ_BOOKSTAND = 0x40,5
	OBJ_BOOKCANDLE = 0x41,5
	OBJ_BLOODFTN = 0x42,5
	OBJ_DECAP = 0x43,5
	OBJ_TCHEST1 = 0x44,5
	OBJ_TCHEST2 = 0x45,5
	OBJ_TCHEST3 = 0x46,5
	OBJ_BLINDBOOK = 0x47,5
	OBJ_BLOODBOOK = 0x48,5
	OBJ_PEDISTAL = 0x49,5
	OBJ_L3LDOOR = 0x4A,5
	OBJ_L3RDOOR = 0x4B,5
	OBJ_PURIFYINGFTN = 0x4C,5
	OBJ_ARMORSTAND = 0x4D,5
	OBJ_ARMORSTANDN = 0x4E,5
	OBJ_GOATSHRINE = 0x4F,5
	OBJ_CAULDRON = 0x50,5
	OBJ_MURKYFTN = 0x51,5
	OBJ_TEARFTN = 0x52,5
	OBJ_ALTBOY = 0x53,5
	OBJ_MCIRCLE1 = 0x54,5
	OBJ_MCIRCLE2 = 0x55,5
	OBJ_STORYBOOK = 0x56,5
	OBJ_STORYCANDLE = 0x57,5
	OBJ_STEELTOME = 0x58,5
	OBJ_WARARMOR = 0x59,5
	OBJ_WARWEAP = 0x5A,5
	OBJ_TBCROSS = 0x5B,5
	OBJ_WEAPONRACK = 0x5C,5
	OBJ_WEAPONRACKN = 0x5D,5
	OBJ_MUSHPATCH = 0x5E,5
	OBJ_LAZSTAND = 0x5F,5
	OBJ_SLAINHERO = 0x60,5
	OBJ_SIGNCHEST = 0x61,5
	OBJ_NULL_98 = 0x62,5
};5
5
enum item_misc_id5
{5
	IMISC_NONE = 0x0,5
	IMISC_USEFIRST = 0x1,5
	IMISC_FULLHEAL = 0x2,5
	IMISC_HEAL = 0x3,5
	IMISC_OLDHEAL = 0x4,5
	IMISC_DEADHEAL = 0x5,5
	IMISC_MANA = 0x6,5
	IMISC_FULLMANA = 0x7,5
	IMISC_POTEXP = 0x8, /* add experience */5
	IMISC_POTFORG = 0x9, /* remove experience */5
	IMISC_ELIXSTR = 0xA,5
	IMISC_ELIXMAG = 0xB,5
	IMISC_ELIXDEX = 0xC,5
	IMISC_ELIXVIT = 0xD,5
	IMISC_ELIXWEAK = 0xE, /* double check with alpha */5
	IMISC_ELIXDIS = 0xF,5
	IMISC_ELIXCLUM = 0x10,5
	IMISC_ELIXSICK = 0x11,5
	IMISC_REJUV = 0x12,5
	IMISC_FULLREJUV = 0x13,5
	IMISC_USELAST = 0x14,5
	IMISC_SCROLL = 0x15,5
	IMISC_SCROLLT = 0x16,5
	IMISC_STAFF = 0x17,5
	IMISC_BOOK = 0x18,5
	IMISC_RING = 0x19,5
	IMISC_AMULET = 0x1A,5
	IMISC_UNIQUE = 0x1B,5
	IMISC_HEAL_1C = 0x1C,5
	IMISC_OILFIRST = 0x1D,5
	IMISC_OILOF = 0x1E, /* oils are beta or hellfire only */5
	IMISC_OILACC = 0x1F,5
	IMISC_OILMAST = 0x20,5
	IMISC_OILSHARP = 0x21,5
	IMISC_OILDEATH = 0x22,5
	IMISC_OILSKILL = 0x23,5
	IMISC_OILBSMTH = 0x24,5
	IMISC_OILFORT = 0x25,5
	IMISC_OILPERM = 0x26,5
	IMISC_OILHARD = 0x27,5
	IMISC_OILIMP = 0x28,5
	IMISC_OILLAST = 0x29,5
	IMISC_MAPOFDOOM = 0x2A,5
	IMISC_EAR = 0x2B,5
	IMISC_SPECELIX = 0x2C,5
	IMISC_INVALID = 0xFFFFFFFF,5
};5
5
enum item_type5
{5
	ITYPE_MISC = 0x0,5
	ITYPE_SWORD = 0x1,5
	ITYPE_AXE = 0x2,5
	ITYPE_BOW = 0x3,5
	ITYPE_MACE = 0x4,5
	ITYPE_SHIELD = 0x5,5
	ITYPE_LARMOR = 0x6,5
	ITYPE_HELM = 0x7,5
	ITYPE_MARMOR = 0x8,5
	ITYPE_HARMOR = 0x9,5
	ITYPE_STAFF = 0xA,5
	ITYPE_GOLD = 0xB,5
	ITYPE_RING = 0xC,5
	ITYPE_AMULET = 0xD,5
	ITYPE_0E = 0xE,5
	ITYPE_NONE = 0xFFFFFFFF,5
};5
5
enum _item_indexes5
{5
	IDI_GOLD = 0x0,5
	IDI_WARRIOR = 0x1,5
	IDI_WARRSHLD = 0x2,5
	IDI_WARRCLUB = 0x3,5
	IDI_ROGUE = 0x4,5
	IDI_SORCEROR = 0x5,5
	IDI_CLEAVER = 0x6,5
	IDI_FIRSTQUEST = 0x6,5
	IDI_SKCROWN = 0x7,5
	IDI_INFRARING = 0x8,5
	IDI_ROCK = 0x9,5
	IDI_OPTAMULET = 0xA,5
	IDI_TRING = 0xB,5
	IDI_BANNER = 0xC,5
	IDI_HARCREST = 0xD,5
	IDI_STEELVEIL = 0xE,5
	IDI_GLDNELIX = 0xF,5
	IDI_ANVIL = 0x10,5
	IDI_MUSHROOM = 0x11,5
	IDI_BRAIN = 0x12,5
	IDI_FUNGALTM = 0x13,5
	IDI_SPECELIX = 0x14,5
	IDI_BLDSTONE = 0x15,5
	IDI_LASTQUEST = 0x16,5
	IDI_MAPOFDOOM = 0x16,5
	IDI_EAR = 0x17,5
	IDI_HEAL = 0x18,5
	IDI_MANA = 0x19,5
	IDI_IDENTIFY = 0x1A,5
	IDI_PORTAL = 0x1B,5
	IDI_ARMOFVAL = 0x1C,5
	IDI_FULLHEAL = 0x1D,5
	IDI_FULLMANA = 0x1E,5
	IDI_GRISWOLD = 0x1F,5
	IDI_LGTFORGE = 0x20,5
	IDI_LAZSTAFF = 0x21,5
	IDI_RESURRECT = 0x22,5
};5
5
enum _setlevels5
{5
	//SL_BUTCHCHAMB = 0x0,5
	SL_SKELKING = 0x1,5
	SL_BONECHAMB = 0x2,5
	SL_MAZE = 0x3,5
	SL_POISONWATER = 0x4,5
	SL_VILEBETRAYER = 0x5,5
};5
5
enum quest_id5
{5
	QTYPE_INFRA = 0x0,5
	QTYPE_BLKM = 0x1,5
	QTYPE_GARB = 0x2,5
	QTYPE_ZHAR = 0x3,5
	QTYPE_VEIL = 0x4,5
	QTYPE_MOD = 0x5,5
	QTYPE_BUTCH = 0x6,5
	QTYPE_BOL = 0x7,5
	QTYPE_BLIND = 0x8,5
	QTYPE_BLOOD = 0x9,5
	QTYPE_ANVIL = 0xA,5
	QTYPE_WARLRD = 0xB,5
	QTYPE_KING = 0xC,5
	QTYPE_PW = 0xD,5
	QTYPE_BONE = 0xE,5
	QTYPE_VB = 0xF,5
	QTYPE_INVALID = 0xFFFFFFFF,5
};5
5
enum talk_id5
{5
	STORE_NONE = 0x0,5
	STORE_SMITH = 0x1,5
	STORE_SBUY = 0x2,5
	STORE_SSELL = 0x3,5
	STORE_SREPAIR = 0x4,5
	STORE_WITCH = 0x5,5
	STORE_WBUY = 0x6,5
	STORE_WSELL = 0x7,5
	STORE_WRECHARGE = 0x8,5
	STORE_NOMONEY = 0x9,5
	STORE_NOROOM = 0xA,5
	STORE_CONFIRM = 0xB,5
	STORE_BOY = 0xC,5
	STORE_BBOY = 0xD,5
	STORE_HEALER = 0xE,5
	STORE_STORY = 0xF,5
	STORE_HBUY = 0x10,5
	STORE_SIDENTIFY = 0x11,5
	STORE_SPBUY = 0x12,5
	STORE_GOSSIP = 0x13,5
	STORE_IDSHOW = 0x14,5
	STORE_TAVERN = 0x15,5
	STORE_DRUNK = 0x16,5
	STORE_BARMAID = 0x17,5
};5
5
enum _unique_items5
{5
	UITEM_CLEAVER = 0x0,5
	UITEM_SKCROWN = 0x1,5
	UITEM_INFRARING = 0x2,5
	UITEM_OPTAMULET = 0x3,5
	UITEM_TRING = 0x4,5
	UITEM_HARCREST = 0x5,5
	UITEM_STEELVEIL = 0x6,5
	UITEM_ARMOFVAL = 0x7,5
	UITEM_GRISWOLD = 0x8,5
	UITEM_LGTFORGE = 0x9,5
	UITEM_RIFTBOW = 0xA,5
	UITEM_NEEDLER = 0xB,5
	UITEM_CELESTBOW = 0xC,5
	UITEM_DEADLYHUNT = 0xD,5
	UITEM_BOWOFDEAD = 0xE,5
	UITEM_BLKOAKBOW = 0xF,5
	UITEM_FLAMEDART = 0x10,5
	UITEM_FLESHSTING = 0x11,5
	UITEM_WINDFORCE = 0x12,5
	UITEM_EAGLEHORN = 0x13,5
	UITEM_GONNAGALDIRK = 0x14,5
	UITEM_DEFENDER = 0x15,5
	UITEM_GRYPHONCLAW = 0x16,5
	UITEM_BLACKRAZOR = 0x17,5
	UITEM_GIBBOUSMOON = 0x18,5
	UITEM_ICESHANK = 0x19,5
	UITEM_EXECUTIONER = 0x1A,5
	UITEM_BONESAW = 0x1B,5
	UITEM_SHADHAWK = 0x1C,5
	UITEM_WIZSPIKE = 0x1D,5
	UITEM_LGTSABRE = 0x1E,5
	UITEM_FALCONTALON = 0x1F,5
	UITEM_INFERNO = 0x20,5
	UITEM_DOOMBRINGER = 0x21,5
	UITEM_GRIZZLY = 0x22,5
	UITEM_GRANDFATHER = 0x23,5
	UITEM_MANGLER = 0x24,5
	UITEM_SHARPBEAK = 0x25,5
	UITEM_BLOODLSLAYER = 0x26,5
	UITEM_CELESTAXE = 0x27,5
	UITEM_WICKEDAXE = 0x28,5
	UITEM_STONECLEAV = 0x29,5
	UITEM_AGUHATCHET = 0x2A,5
	UITEM_HELLSLAYER = 0x2B,5
	UITEM_MESSERREAVER = 0x2C,5
	UITEM_CRACKRUST = 0x2D,5
	UITEM_JHOLMHAMM = 0x2E,5
	UITEM_CIVERBS = 0x2F,5
	UITEM_CELESTSTAR = 0x30,5
	UITEM_BARANSTAR = 0x31,5
	UITEM_GNARLROOT = 0x32,5
	UITEM_CRANBASH = 0x33,5
	UITEM_SCHAEFHAMM = 0x34,5
	UITEM_DREAMFLANGE = 0x35,5
	UITEM_STAFFOFSHAD = 0x36,5
	UITEM_IMMOLATOR = 0x37,5
	UITEM_STORMSPIRE = 0x38,5
	UITEM_GLEAMSONG = 0x39,5
	UITEM_THUNDERCALL = 0x3A,5
	UITEM_PROTECTOR = 0x3B,5
	UITEM_NAJPUZZLE = 0x3C,5
	UITEM_MINDCRY = 0x3D,5
	UITEM_RODOFONAN = 0x3E,5
	UITEM_SPIRITSHELM = 0x3F,5
	UITEM_THINKINGCAP = 0x40,5
	UITEM_OVERLORDHELM = 0x41,5
	UITEM_FOOLSCREST = 0x42,5
	UITEM_GOTTERDAM = 0x43,5
	UITEM_ROYCIRCLET = 0x44,5
	UITEM_TORNFLESH = 0x45,5
	UITEM_GLADBANE = 0x46,5
	UITEM_RAINCLOAK = 0x47,5
	UITEM_LEATHAUT = 0x48,5
	UITEM_WISDWRAP = 0x49,5
	UITEM_SPARKMAIL = 0x4A,5
	UITEM_SCAVCARAP = 0x4B,5
	UITEM_NIGHTSCAPE = 0x4C,5
	UITEM_NAJPLATE = 0x4D,5
	UITEM_DEMONSPIKE = 0x4E,5
	UITEM_DEFLECTOR = 0x4F,5
	UITEM_SKULLSHLD = 0x50,5
	UITEM_DRAGONBRCH = 0x51,5
	UITEM_BLKOAKSHLD = 0x52,5
	UITEM_HOLYDEF = 0x53,5
	UITEM_STORMSHLD = 0x54,5
	UITEM_BRAMBLE = 0x55,5
	UITEM_REGHA = 0x56,5
	UITEM_BLEEDER = 0x57,5
	UITEM_CONSTRICT = 0x58,5
	UITEM_ENGAGE = 0x59,5
	UITEM_INVALID = 0x5A,5
};5
5
enum _ui_classes5
{5
	UI_WARRIOR = 0x0,5
	UI_ROGUE = 0x1,5
	UI_SORCERER = 0x2,5
	UI_NUM_CLASSES = 0x3,5
};5
5
enum _walk_path5
{5
	WALK_NONE = 0x0,5
	WALK_NE = 0x1,5
	WALK_NW = 0x2,5
	WALK_SE = 0x3,5
	WALK_SW = 0x4,5
	WALK_N = 0x5,5
	WALK_E = 0x6,5
	WALK_S = 0x7,5
	WALK_W = 0x8,5
};5
5
typedef enum {5
	ICLASS_NONE = 0,5
	ICLASS_WEAPON = 1,5
	ICLASS_ARMOR = 2,5
	ICLASS_MISC = 3,5
	ICLASS_GOLD = 4,5
	ICLASS_QUEST = 5,5
} item_class;5
5
typedef enum {5
	IDROP_NEVER   = 0,5
	IDROP_REGULAR = 1,5
	IDROP_DOUBLE  = 2,5
} item_drop_rate;5
5
typedef enum {5
	ISPL_NONE = 0x00000000,5
	ISPL_INFRAVISION = 0x00000001,5
	ISPL_RNDSTEALLIFE = 0x00000002,5
	ISPL_RNDARROWVEL = 0x00000004,5
	ISPL_FIRE_ARROWS = 0x00000008,5
	ISPL_FIREDAM = 0x00000010,5
	ISPL_LIGHTDAM = 0x00000020,5
	ISPL_DRAINLIFE = 0x00000040,5
	ISPL_UNKNOWN_1 = 0x00000080,5
	ISPL_NOHEALPLR = 0x00000100,5
	ISPL_UNKNOWN_2 = 0x00000200,5
	ISPL_UNKNOWN_3 = 0x00000400,5
	ISPL_KNOCKBACK = 0x00000800,5
	ISPL_NOHEALMON = 0x00001000,5
	ISPL_STEALMANA_3 = 0x00002000,5
	ISPL_STEALMANA_5 = 0x00004000,5
	ISPL_STEALLIFE_3 = 0x00008000,5
	ISPL_STEALLIFE_5 = 0x00010000,5
	ISPL_QUICKATTACK = 0x00020000,5
	ISPL_FASTATTACK = 0x00040000,5
	ISPL_FASTERATTACK = 0x00080000,5
	ISPL_FASTESTATTACK = 0x00100000,5
	ISPL_FASTRECOVER = 0x00200000,5
	ISPL_FASTERRECOVER = 0x00400000,5
	ISPL_FASTESTRECOVER = 0x00800000,5
	ISPL_FASTBLOCK = 0x01000000,5
	ISPL_LIGHT_ARROWS = 0x02000000,5
	ISPL_THORNS = 0x04000000,5
	ISPL_NOMANA = 0x08000000,5
	ISPL_ABSHALFTRAP = 0x10000000,5
	ISPL_UNKNOWN_4 = 0x20000000,5
	ISPL_3XDAMVDEM = 0x40000000,5
	ISPL_ALLRESZERO = 0x80000000,5
} item_special_effect;5
//{{NO_DEPENDENCIES}}5
// Microsoft Developer Studio generated include file.5
// Used by Diablo.rc5
//5
#define IDI_ICON1                       1015
#define IDD_DIALOG1                     1045
#define IDD_DIALOG2                     1055
#define IDD_DIALOG3                     1065
#define IDD_DIALOG4                     1075
#define IDD_DIALOG5                     1085
#define IDD_DIALOG6                     1095
#define IDD_DIALOG7                     1105
#define IDD_DIALOG8                     1115
#define IDD_DIALOG9                     1125
#define IDD_DIALOG10                    1135
#define IDD_DIALOG11                    1145
5
// Next default values for new objects5
// 5
#ifdef APSTUDIO_INVOKED5
#ifndef APSTUDIO_READONLY_SYMBOLS5
#define _APS_NEXT_RESOURCE_VALUE        1035
#define _APS_NEXT_COMMAND_VALUE         400015
#define _APS_NEXT_CONTROL_VALUE         10005
#define _APS_NEXT_SYMED_VALUE           1015
#endif5
#endif5
struct UItemStruct5
{5
	char *UIName;5
	char UIItemId;5
	char UIMinLvl;5
	char UINumPL;5
	int UIValue;5
	char UIPower1;5
	int UIParam1;5
	int UIParam2;5
	char UIPower2;5
	int UIParam3;5
	int UIParam4;5
	char UIPower3;5
	int UIParam5;5
	int UIParam6;5
	char UIPower4;5
	int UIParam7;5
	int UIParam8;5
	char UIPower5;5
	int UIParam9;5
	int UIParam10;5
	char UIPower6;5
	int UIParam11;5
	int UIParam12;5
};5
5
struct PLStruct5
{5
	const char *PLName;5
	char PLPower;5
	int PLParam1;5
	int PLParam2;5
	int PLMinLvl;5
	int PLIType;5
	int PLGOE;5
	int PLDouble;5
	int PLOk;5
	int PLMinVal;5
	int PLMaxVal;5
	int PLMultVal;5
};5
5
struct TextDataStruct5
{5
	char *txtstr;5
	int scrlltxt;5
	int txtspd;5
	int sfxnr;5
};5
5
struct RECT325
{5
	int x;5
	int y;5
	int w;5
	int h;5
};5
5
struct TSnd5
{5
	WAVEFORMATEX fmt;5
	int len;5
	int offset;5
	char *sound_path;5
	IDirectSoundBuffer *DSB;5
	int start_tc;5
};5
5
struct TSFX5
{5
	unsigned char bFlags;5
	char *pszName;5
	TSnd *pSnd;5
};5
5
struct TMenuItem5
{5
	unsigned int dwFlags;5
	char *pszStr;5
	void (__cdecl *fnMenu)(); /* fix, should have one arg */5
};5
5
struct ItemDataStruct5
{5
	int iRnd;5
	char iClass;5
	char iLoc;5
	int iCurs;5
	char itype;5
	char iItemId;5
	char *iName;5
	char *iSName;5
	int iMinMLvl;5
	int iDurability;5
	int iMinDam;5
	int iMaxDam;5
	int iMinAC;5
	int iMaxAC;5
	char iMinStr;5
	char iMinMag;5
	char iMinDex;5
	int iFlags;5
	int iMiscId;5
	int iSpell;5
	int iUsable;5
	int iValue;5
	int iMaxValue;5
};5
5
struct MissileData5
{5
	unsigned char mName;5
	void (__fastcall *mAddProc)(int, int, int, int, int, int, int, int, int);5
	void (__fastcall *mProc)(int);5
	int mDraw;5
	unsigned char mType;5
	unsigned char mResist;5
	unsigned char mFileNum;5
	int mlSFX;5
	int miSFX;5
};5
5
struct MisFileData5
{5
	unsigned char mAnimName;5
	unsigned char mAnimFAmt;5
	char *mName;5
	int mFlags;5
	int mAnimData[16]; // unsigned char *5
	unsigned char mAnimDelay[16];5
	unsigned char mAnimLen[16];5
	int mAnimWidth[16];5
	int mAnimWidth2[16];5
};5
5
struct MonsterData5
{5
	int flags; // width?5
	int mType;5
	char *GraphicType;5
	int has_special;5
	char *sndfile;5
	int snd_special;5
	int has_trans;5
	char *TransFile;5
	int Frames[6];5
	int Rate[6];5
	char *mName;5
	char mMinDLvl;5
	char mMaxDLvl;5
	char mLevel;5
	int mMinHP;5
	int mMaxHP;5
	char mAi;5
	int mFlags;5
	unsigned char mInt;5
	unsigned char mHit;5
	unsigned char mAFNum;5
	unsigned char mMinDamage;5
	unsigned char mMaxDamage;5
	unsigned char mHit2;5
	unsigned char mAFNum2;5
	unsigned char mMinDamage2;5
	unsigned char mMaxDamage2;5
	char mArmorClass;5
	char mMonstClass;5
	unsigned short mMagicRes;5
	unsigned short mMagicRes2;5
	unsigned short mTreasure;5
	char mSelFlag;5
	unsigned short mExp;5
};5
5
struct UniqMonstStruct5
{5
	char mtype;5
	char *mName;5
	char *mMode;5
	unsigned char mlevel;5
	unsigned short mmaxhp;5
	unsigned char mAi;5
	unsigned char mint;5
	unsigned char mMinDamage;5
	unsigned char mMaxDamage;5
	unsigned short mMagicRes;5
	unsigned short mUnqAttr;5
	unsigned char mUnqVar1;5
	unsigned char mUnqVar2;5
	int mtalkmsg;5
};5
5
struct ObjDataStruct5
{5
	char oload;5
	char ofindex;5
	char ominlvl;5
	char omaxlvl;5
	char olvltype;5
	char otheme;5
	char oquest;5
	int oAnimFlag;5
	int oAnimDelay;5
	int oAnimLen;5
	int oAnimWidth;5
	int oSolidFlag;5
	int oMissFlag;5
	int oLightFlag;5
	char oBreak;5
	char oSelFlag;5
	int oTrapFlag;5
};5
5
struct QuestData5
{5
	unsigned char _qdlvl;5
	char _qdmultlvl;5
	unsigned char _qlvlt;5
	unsigned char _qdtype;5
	unsigned char _qdrnd;5
	unsigned char _qslvl;5
	int _qflags; //__declspec(align(4)) /* unsigned char */5
	int _qdmsg;5
	char *_qlstr;5
};5
5
struct SpellData5
{5
	unsigned char sName;5
	unsigned char sManaCost;5
	unsigned char sType;5
	char *sNameText;5
	char *sSkillText;5
	int sBookLvl;5
	int sStaffLvl;5
	int sTargeted;5
	unsigned char sTownSpell;5
	int sMinInt;5
	unsigned char sSFX;5
	unsigned char sMissiles[3];5
	unsigned char sManaAdj;5
	unsigned char sMinMana;5
	int sStaffMin;5
	int sStaffMax;5
	int sBookCost;5
	int sStaffCost;5
};5
5
struct Coord5
{5
	char x;5
	char y;5
};5
5
struct RECT85
{5
	Coord x;5
	Coord y;5
};5
5
struct QuestTalkData5
{5
	int _qinfra;5
	int _qblkm;5
	int _qgarb;5
	int _qzhar;5
	int _qveil;5
	int _qmod;5
	int _qbutch;5
	int _qbol;5
	int _qblind;5
	int _qblood;5
	int _qanvil;5
	int _qwarlrd;5
	int _qking;5
	int _qpw;5
	int _qbone;5
	int _qvb;5
};5
5
struct ShadowStruct5
{5
	unsigned char strig;5
	unsigned char s1;5
	unsigned char s2;5
	unsigned char s3;5
	unsigned char nv1;5
	unsigned char nv2;5
	unsigned char nv3;5
};5
5
struct POINT32 /* remove this struct */5
{5
	int x;5
	int y;5
};5
5
struct InvXY5
{5
	int X;5
	int Y;5
};5
5
struct ItemStruct5
{5
	int _iSeed;5
	unsigned short _iCreateInfo;5
	int _itype;5
	int _ix;5
	int _iy;5
	int _iAnimFlag;5
	int _iAnimData; // unsigned char *5
	int _iAnimLen;5
	int _iAnimFrame;5
	int _iAnimWidth;5
	int _iAnimWidth2; // width 2?5
	int offs002C;5
	char _iSelFlag;5
	int _iPostDraw;5
	int _iIdentified;5
	char _iMagical;5
	char _iName[64];5
	char _iIName[64];5
	char _iLoc;5
	char _iClass;5
	int _iCurs;5
	int _ivalue;5
	int _iIvalue;5
	int _iMinDam;5
	int _iMaxDam;5
	int _iAC;5
	int _iFlags;5
	int _iMiscId;5
	int _iSpell;5
	int _iCharges;5
	int _iMaxCharges;5
	int _iDurability;5
	int _iMaxDur;5
	int _iPLDam;5
	int _iPLToHit;5
	int _iPLAC;5
	int _iPLStr;5
	int _iPLMag;5
	int _iPLDex;5
	int _iPLVit;5
	int _iPLFR;5
	int _iPLLR;5
	int _iPLMR;5
	int _iPLMana;5
	int _iPLHP;5
	int _iPLDamMod;5
	int _iPLGetHit;5
	int _iPLLight;5
	char _iSplLvlAdd;5
	char _iRequest;5
	int _iUid;5
	int _iFMinDam;5
	int _iFMaxDam;5
	int _iLMinDam;5
	int _iLMaxDam;5
	int _iPLEnAc;5
	char _iPrePower;5
	char _iSufPower;5
	int _iVAdd1;5
	int _iVMult1;5
	int _iVAdd2;5
	int _iVMult2;5
	char _iMinStr;5
	unsigned char _iMinMag;5
	char _iMinDex;5
	int _iStatFlag;5
	int IDidx;5
	int offs016C;5
};5
5
struct DeadStruct5
{5
	int _deadData[8]; // unsigned char *5
	int _deadFrame;5
	int field_24; // width5
	int field_28; // cel or fnum _deadtype?5
	int _deadtrans;5
};5
5
struct ScreenRow5
{5
	char col_unused_1[64];5
	char pixels[640];5
	char col_unused_2[64];5
};5
5
struct Screen5
{5
	ScreenRow row_unused_1[160];5
	ScreenRow row[480];5
	ScreenRow row_unused_2[16];5
};5
5
struct Tile5
{5
	short top;5
	short right;5
	short left;5
	short bottom;5
};5
5
struct DPiece5
{5
	short blocks;5
};5
5
struct _SNETVERSIONDATA5
{5
	int size;5
	char *versionstring;5
	char *executablefile;5
	char *originalarchivefile;5
	char *patcharchivefile;5
};5
5
struct LightListStruct5
{5
	int _lx;5
	int _ly;5
	int _lradius;5
	int _lid;5
	int _ldel;5
	int _lunflag;5
	int field_18;5
	int _lunx;5
	int _luny;5
	int _lunr;5
	int _xoff;5
	int _yoff;5
	int _lflags;5
};5
5
struct MissileStruct5
{5
	int _mitype;5
	int _mix;5
	int _miy;5
	int _mixoff;5
	int _miyoff;5
	int _mixvel;5
	int _miyvel;5
	int _misx;5
	int _misy;5
	int _mitxoff;5
	int _mityoff;5
	int _mimfnum;5
	int _mispllvl;5
	int _miDelFlag;5
	int _miAnimType;5
	int _miAnimFlags;5
	int _miAnimData; // unsigned char *5
	int _miAnimDelay;5
	int _miAnimLen;5
	int _miAnimWidth;5
	int _miAnimWidth2;5
	int _miAnimCnt;5
	int _miAnimAdd;5
	int _miAnimFrame;5
	int _miDrawFlag;5
	int _miLightFlag;5
	int _miPreFlag;5
	int _miUniqTrans;5
	int _mirange;5
	int _misource;5
	int _micaster;5
	int _midam;5
	int _miHitFlag;5
	int _midist;5
	int _mlid;5
	int _mirnd;5
	int _miVar1;5
	int _miVar2;5
	int _miVar3;5
	int _miVar4;5
	int _miVar5;5
	int _miVar6;5
	int _miVar7;5
	int _miVar8;5
};5
5
struct AnimStruct5
{5
	int CMem; // [unsigned] char * ??5
	int Frames[8]; // unsigned char *5
	int Rate;5
	int Delay;5
};5
5
struct CMonster5
{5
	unsigned char mtype;5
	unsigned char mPlaceFlags;5
	AnimStruct Anims[6];5
	TSnd *Snds[8];5
	int flags_1; // width5
	int flags_2; // width 25
	unsigned char mMinHP;5
	unsigned char mMaxHP;5
	int has_special;5
	unsigned char mAFNum;5
	char mdeadval;5
	MonsterData *MData;5
	void *trans_file;5
};5
5
struct MonsterStruct5
{5
	int _mMTidx;5
	int _mmode;5
	int _mgoal;5
	int _mgoalvar1;5
	int _mgoalvar2;5
	int _mgoalvar3;5
	int field_18;5
	int _pathcount;5
	int _mx;5
	int _my;5
	int _mfutx;5
	int _mfuty;5
	int _moldx;5
	int _moldy;5
	int _mxoff;5
	int _myoff;5
	int _mxvel;5
	int _myvel;5
	int _mdir;5
	int _menemy;5
	unsigned char _menemyx;5
	unsigned char _menemyy;5
	short falign_52;5
	int _mAFNum;5
	int _mAnimDelay;5
	int _mAnimCnt;5
	int _mAnimLen;5
	int _mAnimFrame;5
	int _meflag;5
	int _mDelFlag;5
	int _mVar1;5
	int _mVar2;5
	int _mVar3;5
	int _mVar4;5
	int _mVar5;5
	int _mVar6;5
	int _mVar7;5
	int _mVar8;5
	int _mmaxhp;5
	int _mhitpoints;5
	unsigned char _mAi;5
	unsigned char _mint;5
	short falign_9A;5
	int _mFlags;5
	int _msquelch;5
	int falign_A4;5
	int _lastx;5
	int _lasty;5
	int _mRndSeed;5
	int _mAISeed;5
	int falign_B8;5
	unsigned char _uniqtype;5
	unsigned char _uniqtrans;5
	char _udeadval;5
	char mWhoHit;5
	short mLevel; /* char */5
	unsigned short mExp;5
	unsigned char mHit;5
	unsigned char mMinDamage;5
	unsigned char mMaxDamage;5
	unsigned char mHit2;5
	unsigned char mMinDamage2;5
	unsigned char mMaxDamage2;5
	char mArmorClass;5
	char falign_CB;5
	int mMagicRes; /* ushort */5
	int mtalkmsg;5
	unsigned char leader;5
	unsigned char leaderflag;5
	unsigned char unpackfilesize;5
	unsigned char mlid;5
	char *mName;5
	CMonster *MType;5
	MonsterData *MData;5
};5
5
struct DObjectStr5
{5
	unsigned char bCmd;5
};5
5
/* __declspec(align(1))*/5
#pragma pack(push, 1)5
struct  DMonsterStr5
{5
	char _mx; /* these might be unsigned */5
	char _my;5
	char _mdir;5
	char _menemy;5
	char _mactive;5
	int _mhitpoints;5
};5
#pragma pack(pop)5
5
/* __declspec(align(2))*/5
#pragma pack(push, 1)5
struct  TCmdPItem5
{5
	char bCmd; /* unsigned */5
	unsigned char x;5
	unsigned char y;5
	unsigned short wIndx;5
	unsigned short wCI;5
	int dwSeed;5
	unsigned char bId;5
	unsigned char bDur;5
	unsigned char bMDur;5
	unsigned char bCh;5
	unsigned char bMCh;5
	unsigned short wValue;5
	int dwBuff;5
};5
#pragma pack(pop)5
5
/* __declspec(align(1))*/5
struct  DLevel5
{5
	TCmdPItem item[127];5
	DObjectStr object[127];5
	DMonsterStr monster[200];5
};5
5
struct DPortal5
{5
	unsigned char x;5
	unsigned char y;5
	unsigned char level;5
	unsigned char ltype;5
	unsigned char setlvl;5
};5
5
struct MultiQuests5
{5
	unsigned char qstate;5
	unsigned char qlog;5
	unsigned char qvar1;5
};5
5
struct DJunk5
{5
	DPortal portal[4];5
	MultiQuests quests[4];5
};5
5
/*  __declspec(align(1)) */5
#pragma pack(push, 1)5
struct PkItemStruct5
{5
	int iSeed;5
	short iCreateInfo;5
	short idx;5
	char bId;5
	char bDur;5
	char bMDur;5
	char bCh;5
	char bMCh;5
	short wValue;5
	int dwBuff;5
};5
#pragma pack(pop)5
5
/* __declspec(align(2)) */5
#pragma pack(push, 1)5
struct PkPlayerStruct5
{5
	FILETIME archiveTime;5
	char destAction;5
	char destParam1;5
	char destParam2;5
	char plrlevel;5
	char px;5
	char py;5
	char targx;5
	char targy;5
	char pName[32];5
	char pClass;5
	char pBaseStr;5
	char pBaseMag;5
	char pBaseDex;5
	char pBaseVit;5
	char pLevel;5
	char pStatPts;5
	int pExperience;5
	int pGold;5
	int pHPBase;5
	int pMaxHPBase;5
	int pManaBase;5
	int pMaxManaBase;5
	char pSplLvl[37];5
	int pMemSpells;5
	int pMemSpells2;5
	PkItemStruct InvBody[7];5
	PkItemStruct InvList[40];5
	char InvGrid[40];5
	char _pNumInv;5
	PkItemStruct SpdList[8];5
	char pTownWarps;5
	char pDungMsgs;5
	char pLvlLoad;5
	char pBattleNet;5
	char pManaShield;5
	char bReserved[3];5
	short wReserved[8];5
	int pDiabloKillLevel;5
	int dwReserved[7];5
};5
#pragma pack(pop)5
5
struct ObjectStruct5
{5
	int _otype;5
	int _ox;5
	int _oy;5
	int _oLight;5
	int _oAnimFlag;5
	int _oAnimData; // unsigned char *5
	int _oAnimDelay;5
	int _oAnimCnt;5
	int _oAnimLen;5
	int _oAnimFrame;5
	int _oAnimWidth;5
	int _oAnimWidth2;5
	int _oDelFlag;5
	int _oBreak;5
	int _oSolidFlag;5
	int _oMissFlag;5
	int _oSelFlag;5
	int _oPreFlag;5
	int _oTrapFlag;5
	int _oDoorFlag;5
	int _olid;5
	int _oRndSeed;5
	int _oVar1;5
	int _oVar2;5
	int _oVar3;5
	int _oVar4;5
	int _oVar5;5
	int _oVar6;5
	int _oVar7;5
	int _oVar8;5
};5
5
struct PATHNODE5
{5
	char f;5
	char h;5
	short g;5
	int x;5
	int y;5
	struct PATHNODE *Parent;5
	struct PATHNODE *Child[8];5
	struct PATHNODE *NextNode;5
};5
5
struct PlayerStruct5
{5
	int _pmode;5
	char walkpath[25];5
	unsigned char plractive;5
	int destAction;5
	int destParam1;5
	int destParam2;5
	int destParam3;5
	int destParam4;5
	int plrlevel;5
	int WorldX;5
	int WorldY;5
	int _px;5
	int _py;5
	int _ptargx;5
	int _ptargy;5
	int _pownerx;5
	int _pownery;5
	int _poldx;5
	int _poldy;5
	int _pxoff;5
	int _pyoff;5
	int _pxvel;5
	int _pyvel;5
	int _pdir;5
	int _nextdir;5
	int _pgfxnum;5
	int _pAnimData; // unsigned char *5
	int _pAnimDelay;5
	int _pAnimCnt;5
	int _pAnimLen;5
	int _pAnimFrame;5
	int _pAnimWidth;5
	int _pAnimWidth2;5
	int _peflag;5
	int _plid;5
	int _pvid;5
	int _pSpell;5
	char _pSplType;5
	char _pSplFrom;5
	int _pTSpell;5
	int _pTSplType;5
	int _pRSpell;5
	int _pRSplType;5
	int _pSBkSpell;5
	char _pSBkSplType;5
	char _pSplLvl[64];5
	int remove_1;5
	int _pMemSpells[2]; // __declspec(align(8))5
	int _pAblSpells[2];5
	int _pScrlSpells[2];5
	int _pSpellFlags;5
	int _pSplHotKey[4];5
	char _pSplTHotKey[4];5
	int _pwtype;5
	unsigned char _pBlockFlag;5
	unsigned char _pInvincible;5
	char _pLightRad;5
	unsigned char _pLvlChanging;5
	char _pName[32];5
	int _pClass;5
	int _pStrength;5
	int _pBaseStr;5
	int _pMagic;5
	int _pBaseMag;5
	int _pDexterity;5
	int _pBaseDex;5
	int _pVitality;5
	int _pBaseVit;5
	int _pStatPts;5
	int _pDamageMod;5
	int _pBaseToBlk;5
	int _pHPBase;5
	int _pMaxHPBase;5
	int _pHitPoints;5
	int _pMaxHP;5
	int _pHPPer;5
	int _pManaBase;5
	int _pMaxManaBase;5
	int _pMana;5
	int _pMaxMana;5
	int _pManaPer;5
	char _pLevel;5
	char _pMaxLvl;5
	int _pExperience;5
	int _pMaxExp;5
	int _pNextExper;5
	char _pArmorClass;5
	char _pMagResist;5
	char _pFireResist;5
	char _pLghtResist;5
	int _pGold;5
	int _pInfraFlag;5
	int _pVar1;5
	int _pVar2;5
	int _pVar3;5
	int _pVar4;5
	int _pVar5;5
	int _pVar6;5
	int _pVar7;5
	int _pVar8;5
	unsigned char _pLvlVisited[17];5
	unsigned char _pSLvlVisited[10];5
	char gap20F[9];5
	int _pGFXLoad;5
	int _pNAnim[8]; // unsigned char *5
	int _pNFrames;5
	int _pNWidth;5
	int _pWAnim[8]; // unsigned char *5
	int _pWFrames;5
	int _pWWidth;5
	int _pAAnim[8]; // unsigned char *5
	int _pAFrames;5
	int _pAWidth;5
	int _pAFNum;5
	int _pLAnim[8]; // unsigned char *5
	int _pFAnim[8]; // unsigned char *5
	int _pTAnim[8]; // unsigned char *5
	int _pSFrames;5
	int _pSWidth;5
	int _pSFNum;5
	int _pHAnim[8]; // unsigned char *5
	int _pHFrames;5
	int _pHWidth;5
	int _pDAnim[8]; // unsigned char *5
	int _pDFrames;5
	int _pDWidth;5
	int _pBAnim[8]; // unsigned char *5
	int _pBFrames;5
	int _pBWidth;5
	ItemStruct InvBody[7];5
	ItemStruct InvList[40];5
	int _pNumInv;5
	char InvGrid[40];5
	ItemStruct SpdList[8];5
	ItemStruct HoldItem;5
	int _pIMinDam;5
	int _pIMaxDam;5
	int _pIAC;5
	int _pIBonusDam;5
	int _pIBonusToHit;5
	int _pIBonusAC;5
	int _pIBonusDamMod;5
	int remove_2;5
	int _pISpells[2]; //__declspec(align(8))5
	int _pIFlags;5
	int _pIGetHit;5
	char _pISplLvlAdd;5
	char _pISplCost;5
	int _pISplDur;5
	int _pIEnAc;5
	int _pIFMinDam;5
	int _pIFMaxDam;5
	int _pILMinDam;5
	int _pILMaxDam;5
	int _pOilType;5
	unsigned char pTownWarps;5
	unsigned char pDungMsgs;5
	unsigned char pLvlLoad;5
	unsigned char pBattleNet;5
	unsigned char pManaShield;5
	char bReserved[3];5
	short wReserved[8];5
	int pDiabloKillLevel;5
	int dwReserved[7];5
	void *_pNData;5
	void *_pWData;5
	void *_pAData;5
	void *_pLData;5
	void *_pFData;5
	void *_pTData;5
	void *_pHData;5
	void *_pDData;5
	void *_pBData;5
	int unused_54D4;5
};5
5
struct QuestStruct5
{5
	unsigned char _qlevel;5
	unsigned char _qtype;5
	unsigned char _qactive;5
	unsigned char _qlvltype;5
	int _qtx;5
	int _qty;5
	unsigned char _qslvl;5
	unsigned char _qidx;5
	unsigned char _qmsg;5
	unsigned char _qvar1;5
	unsigned char _qvar2;5
	int _qlog; /* char */5
};5
5
struct SHA1Context5
{5
	int state[5];5
	int count[2];5
	char buffer[64];5
};5
5
struct ThemeStruct5
{5
	int ttype; /* char, aligned 4 */5
	int ttval;5
};5
5
struct TMsgHeader5
{5
	char next;5
	char start_tc;5
	char len;5
};5
5
struct TMsg5
{5
	TMsgHeader hdr;5
	char data;5
};5
5
struct TNQ5
{5
	unsigned char _qsttype;5
	unsigned char _qstmsg;5
	unsigned char _qstmsgact;5
};5
5
struct TownerStruct5
{5
	int _tmode;5
	int _ttype;5
	int _tx;5
	int _ty;5
	int _txoff;5
	int _tyoff;5
	int _txvel;5
	int _tyvel;5
	int _tdir;5
	void *_tAnimData; // unsigned char *5
	int _tAnimDelay;5
	int _tAnimCnt;5
	int _tAnimLen;5
	int _tAnimFrame;5
	int _tAnimFrameCnt;5
	int _tAnimOrder;5
	int _tAnimWidth;5
	int _tAnimWidth2;5
	int _tTenPer;5
	int _teflag;5
	int _tbtcnt;5
	int _tSelFlag;5
	int _tMsgSaid;5
	TNQ qsts[16];5
	int _tSeed;5
	int _tVar1;5
	int _tVar2;5
	int _tVar3;5
	int _tVar4;5
	char _tName[32];5
	int _tNAnim[8]; // unsigned char *5
	int _tNFrames;5
	char *_tNData; // unsigned char *5
};5
5
struct _SNETUIDATA5
{5
	int size;5
	int uiflags;5
	HWND parentwindow;5
	void (__cdecl *artcallback)();5
	void (__cdecl *authcallback)();5
	void (__cdecl *createcallback)();5
	void (__cdecl *drawdesccallback)();5
	void (__cdecl *selectedcallback)();5
	void (__cdecl *messageboxcallback)();5
	void (__cdecl *soundcallback)();5
	void (__cdecl *statuscallback)();5
	void (__cdecl *getdatacallback)();5
	void (__cdecl *categorycallback)();5
	void (__cdecl *field_34)();5
	void (__cdecl *field_38)();5
	void (__cdecl *profilecallback)();5
	int profilegetstring;5
	void (__cdecl *profiledraw)();5
	void (__cdecl *selecthero)();5
	void (__cdecl *createhero)();5
};5
5
struct _SNETPROGRAMDATA5
{5
	int size;5
	char *programname;5
	char *programdescription;5
	int programid;5
	int versionid;5
	int reserved1;5
	int maxplayers;5
	int multi_seed;5
	void *initdata;5
	int initdatabytes;5
	void *reserved2;5
	int optcategorybits;5
	int reserved3;5
	int reserved4;5
	int languageid;5
};5
5
struct _uiheroinfo5
{5
	_uiheroinfo *next;5
	char name[16];5
	unsigned short level;5
	unsigned char heroclass;5
	unsigned char herorank;5
	unsigned short strength;5
	unsigned short magic;5
	unsigned short dexterity;5
	unsigned short vitality;5
	int gold;5
	int hassaved;5
	int spawned;5
};5
5
struct _HASHENTRY5
{5
	int hashcheck[2];5
	int lcid;5
	int block;5
};5
5
struct _BLOCKENTRY5
{5
	int offset;5
	int sizealloc;5
	int sizefile;5
	int flags;5
};5
5
/* __declspec(align(2)) */5
#pragma pack(push, 1)5
struct TCmdGItem5
{5
	unsigned char bCmd;5
	unsigned char bMaster;5
	unsigned char bPnum;5
	unsigned char bCursitem;5
	unsigned char bLevel;5
	unsigned char x;5
	unsigned char y;5
	unsigned short wIndx;5
	unsigned short wCI;5
	int dwSeed;5
	unsigned char bId;5
	unsigned char bDur;5
	unsigned char bMDur;5
	unsigned char bCh;5
	unsigned char bMCh;5
	unsigned short wValue;5
	int dwBuff;5
	int dwTime;5
};5
#pragma pack(pop)5
5
struct TCmdLoc5
{5
	unsigned char bCmd;5
	unsigned char x;5
	unsigned char y;5
};5
5
/* __declspec(align(1)) */5
#pragma pack(push, 1)5
struct TCmdParam15
{5
	unsigned char bCmd;5
	unsigned short wParam1;5
};5
#pragma pack(pop)5
5
/* __declspec(align(1)) */5
#pragma pack(push, 1)5
struct TCmdLocParam15
{5
	unsigned char bCmd;5
	unsigned char x;5
	unsigned char y;5
	unsigned short wParam1;5
};5
#pragma pack(pop)5
5
/* __declspec(align(1)) */5
#pragma pack(push, 1)5
struct TPktHdr5
{5
	unsigned char px;5
	unsigned char py;5
	unsigned char targx;5
	unsigned char targy;5
	int php;5
	int pmhp;5
	unsigned char bstr;5
	unsigned char bmag;5
	unsigned char bdex;5
	unsigned short wCheck;5
	unsigned short wLen;5
};5
#pragma pack(pop)5
5
struct _SNETEVENT5
{5
	int eventid;5
	int playerid;5
	void *data;5
	int databytes;5
};5
5
struct _SNETPLAYERDATA5
{5
	int size;5
	char *playername;5
	char *playerdescription;5
	int field_C;5
};5
5
struct _SNETCAPS5
{5
	int size;5
	int flags;5
	int maxmessagesize;5
	int maxqueuesize;5
	int maxplayers;5
	int bytessec;5
	int latencyms;5
	int defaultturnssec;5
	int defaultturnsintransit;5
};5
5
struct TMPQHeader // _FILEHEADER5
{5
	int dwID;5
	int dwHeaderSize;5
	int dwArchiveSize;5
	short wFormatVersion;5
	short wSectorSize;5
	int dwHashTablePos;5
	int dwBlockTablePos;5
	int dwHashTableSize;5
	int dwBlockTableSize;5
	char field_20[72];5
};5
5
struct _uidefaultstats5
{5
	unsigned short strength;5
	unsigned short magic;5
	unsigned short dexterity;5
	unsigned short vitality;5
};5
5
/* __declspec(align(1)) */5
#pragma pack(push, 1)5
struct TCmdLocParam25
{5
	unsigned char bCmd;5
	unsigned char x;5
	unsigned char y;5
	unsigned short wParam1;5
	unsigned short wParam2;5
};5
#pragma pack(pop)5
5
/* __declspec(align(1)) */5
#pragma pack(push, 1)5
struct TCmdLocParam35
{5
	unsigned char bCmd;5
	unsigned char x;5
	unsigned char y;5
	unsigned short wParam1;5
	unsigned short wParam2;5
	unsigned short wParam3;5
};5
#pragma pack(pop)5
5
/* __declspec(align(1)) */5
#pragma pack(push, 1)5
struct TCmdParam25
{5
	unsigned char bCmd;5
	unsigned short wParam1;5
	unsigned short wParam2;5
};5
#pragma pack(pop)5
5
/* __declspec(align(1)) */5
#pragma pack(push, 1)5
struct TCmdParam35
{5
	unsigned char bCmd;5
	unsigned short wParam1;5
	unsigned short wParam2;5
	unsigned short wParam3;5
};5
#pragma pack(pop)5
5
struct TCmd5
{5
	unsigned char bCmd;5
};5
5
/* __declspec(align(2)) */5
#pragma pack(push, 1)5
struct TCmdGolem5
{5
	unsigned char bCmd;5
	unsigned char _mx;5
	unsigned char _my;5
	unsigned char _mdir;5
	unsigned char _menemy;5
	int _mhitpoints;5
	unsigned char _currlevel;5
};5
#pragma pack(pop)5
5
struct TCmdQuest5
{5
	unsigned char bCmd;5
	unsigned char q;5
	unsigned char qstate;5
	unsigned char qlog;5
	unsigned char qvar1;5
};5
5
/* __declspec(align(1)) */5
#pragma pack(push, 1)5
struct TCmdChItem5
{5
	unsigned char bCmd;5
	unsigned char bLoc;5
	unsigned short wIndx;5
	unsigned short wCI;5
	int dwSeed;5
	unsigned char bId;5
};5
#pragma pack(pop)5
5
struct TCmdDelItem5
{5
	unsigned char bCmd;5
	unsigned char bLoc;5
};5
5
/* __declspec(align(2)) */5
#pragma pack(push, 1)5
struct TCmdDamage5
{5
	unsigned char bCmd;5
	unsigned char bPlr;5
	int dwDam;5
};5
#pragma pack(pop)5
5
struct TFakeCmdPlr5
{5
	unsigned char bCmd;5
	unsigned char bPlr;5
};5
5
/* __declspec(align(2)) */5
#pragma pack(push, 1)5
struct TFakeDropPlr5
{5
	unsigned char bCmd;5
	unsigned char bPlr;5
	int dwReason;5
};5
#pragma pack(pop)5
5
struct TCmdString5
{5
	unsigned char bCmd;5
	char str[80];5
};5
5
/* __declspec(align(1)) */5
#pragma pack(push, 1)5
struct TCmdPlrInfoHdr5
{5
	unsigned char bCmd;5
	unsigned short wOffset;5
	unsigned short wBytes;5
};5
#pragma pack(pop)5
5
struct PortalStruct5
{5
	int open;5
	int x;5
	int y;5
	int level;5
	int ltype;5
	int setlvl;5
};5
5
struct CircleCoord5
{5
	unsigned char n_1;5
	Coord delta_1[1];5
	unsigned char n_4;5
	Coord delta_4[4];5
	unsigned char n_16;5
	Coord delta_16[16];5
	unsigned char n_24;5
	Coord delta_24[24];5
	unsigned char n_32;5
	Coord delta_32[32];5
	unsigned char n_40;5
	Coord delta_40[40];5
	unsigned char n_48;5
	Coord delta_48[48];5
	unsigned char n_56;5
	Coord delta_56[56];5
	unsigned char n_64;5
	Coord delta_64[64];5
	unsigned char n_72;5
	Coord delta_72[72];5
	unsigned char n_80;5
	Coord delta_80[80];5
	unsigned char n_88;5
	Coord delta_88[88];5
	unsigned char n_96;5
	Coord delta_96[96];5
	unsigned char n_104;5
	Coord delta_104[104];5
	unsigned char n_112;5
	Coord delta_112[112];5
	unsigned char n_120;5
	Coord delta_120[120];5
	unsigned char n_128;5
	Coord delta_128[128];5
	unsigned char n_136;5
	Coord delta_136[136];5
	unsigned char n_144;5
	Coord delta_144[144];5
};5
5
struct TriggerStruct5
{5
	int _tx;5
	int _ty;5
	int _tmsg;5
	int _tlvl;5
};5
5
struct THEME_LOC5
{5
	int x;5
	int y;5
	int ttval;5
	int width;5
	int height;5
};5
5
struct STextStruct5
{5
	int _sx;5
	int _syoff;5
	char _sstr[128];5
	int _sjust;5
	int _sclr;5
	int _sline;5
	int _ssel;5
	int _sval;5
};5
5
struct HALLNODE5
{5
	int nHallx1;5
	int nHally1;5
	int nHallx2;5
	int nHally2;5
	int nHalldir;5
	HALLNODE *pNext;5
};5
5
struct ROOMNODE5
{5
	int nRoomx1;5
	int nRoomy1;5
	int nRoomx2;5
	int nRoomy2;5
	int nRoomDest;5
};5
5
struct LocalLevel5
{5
	unsigned char automapsv[40][40];5
};5
5
struct TMegaPkt5
{5
	TMegaPkt *pNext;5
	int dwSpaceLeft;5
	unsigned char data[32000];5
};5
5
struct ScrollStruct5
{5
	int _sxoff;5
	int _syoff;5
	int _sdx;5
	int _sdy;5
	int _sdir;5
};5
5
struct _gamedata5
{5
	int dwSeed;5
	unsigned char bDiff;5
};5
5
struct TPkt5
{5
	TPktHdr hdr;5
	unsigned char body[493];5
};5
5
struct MEMFILE5
{5
	int end;5
	int offset;5
	int buf_len;5
	int dist;5
	int bytes_to_read;5
	char *buf;5
	int file;5
};5
5
struct _plrmsg5
{5
	int time;5
	char player;5
	char str[144];5
};5
5
struct ItemGetRecordStruct5
{5
	int nSeed;5
	unsigned short wCI;5
	int nIndex;5
	int dwTimestamp;5
};5
5
struct unk_missile_struct5
{5
	int field_0;5
	int field_4;5
	int field_8;5
};5
5
struct TSyncMonster5
{5
	unsigned char _mndx;5
	unsigned char _mx;5
	unsigned char _my;5
	unsigned char _menemy;5
	unsigned char _mdelta;5
};5
5
struct TSyncHeader5
{5
	unsigned char bCmd;5
	unsigned char bLevel;5
	unsigned short wLen;5
	unsigned char bObjId;5
	unsigned char bObjCmd;5
	unsigned char bItemI;5
	unsigned char bItemX;5
	unsigned char bItemY;5
	unsigned short wItemIndx;5
	unsigned short wItemCI;5
	int dwItemSeed;5
	unsigned char bItemId;5
	unsigned char bItemDur;5
	unsigned char bItemMDur;5
	unsigned char bItemCh;5
	unsigned char bItemMCh;5
	unsigned short wItemVal;5
	unsigned int dwItemBuff;5
	unsigned char bPInvLoc;5
	unsigned short wPInvIndx;5
	unsigned short wPInvCI;5
	int dwPInvSeed;5
	unsigned char bPInvId;5
};5
5
struct PCXHeader5
{5
	char manufacturer;5
	char version;5
	char encoding;5
	char bitsPerPixel;5
	short xmin, ymin;5
	short xmax, ymax;5
	short horzRes, vertRes;5
	char palette[48];5
	char reserved;5
	char numColorPlanes;5
	short bytesPerScanLine;5
	short paletteType;5
	short horzSize, vertSize;5
	char padding[54];5
};5
5
typedef struct5
{5
	unsigned char * pbInBuff;           // Pointer to input data buffer5
	unsigned char * pbInBuffEnd;        // End of the input buffer5
	unsigned char * pbOutBuff;          // Pointer to output data buffer5
	unsigned char * pbOutBuffEnd;       // Pointer to output data buffer5
	unsigned char * pbSize;5
} TDataInfo;5
5
typedef struct {5
	int field_0;5
	int field_4;5
	char command[128];5
} ServerCommand;5
5
typedef struct ChatCmd {5
	struct ChatCmd *next;5
	ServerCommand *extern_msgs[2];5
} ChatCmd;5
// temporary file5
5
#ifndef _TYPES_H5
#define _TYPES_H5
5
#include "resource.h"5
5
#include <windows.h>5
#include <stdio.h>5
#include <ddraw.h>5
#include <dsound.h>5
#include <io.h>5
#include <math.h>5
#include <time.h>5
#include <process.h>5
#include <shlobj.h>5
5
#pragma warning (disable : 4309) // truncation of constant value5
#pragma warning (disable : 4305) // truncation of int5
#pragma warning (disable : 4018) // signed/unsigned mismatch5
#pragma warning (disable : 4700) // used without having been initialized5
#pragma warning (disable : 4804) // unsafe use of type 'bool' in operation5
#pragma warning (disable : 4805) // unsafe bool mix5
#pragma warning (disable : 4244) // conversion loss5
#pragma warning (disable : 4800) // bool perf5
#pragma warning (disable : 4146) // negative unsigned5
5
#include "enums.h"5
#include "structs.h"5
5
#include "DiabloUI/diabloui.h"5
#include "3rdParty/Storm/Source/storm.h"5
#include "3rdParty/PKWare/pkware.h"5
5
5
#include "defs.h"5
5
// If defined, use copy protection [Default -> Defined]5
//#define COPYPROT5
// If defined, don't reload for debuggers [Default -> Undefined]5
#define DEBUGGER5
// If defined, don't fry the CPU [Default -> Undefined]5
#define SLEEP5
5
/* temp macro for asm XLAT */5
#define ASM_XLAT(eax,ebx) eax = (eax & 0xFFFFFF00) + LOBYTE(ebx[LOBYTE(eax)])5
5
// header files5
#include "Source/appfat.h"5
#include "Source/automap.h"5
#include "Source/capture.h"5
#include "Source/codec.h"5
#include "Source/control.h"5
#include "Source/cursor.h"5
#include "Source/dead.h"5
#include "Source/debug.h"5
#include "Source/diablo.h"5
#include "Source/doom.h"5
#include "Source/drlg_l1.h"5
#include "Source/drlg_l2.h"5
#include "Source/drlg_l3.h"5
#include "Source/drlg_l4.h"5
#include "Source/dthread.h"5
#include "Source/dx.h"5
#include "Source/effects.h"5
#include "Source/encrypt.h"5
#include "Source/engine.h"5
#include "Source/error.h"5
#include "Source/fault.h"5
#include "Source/gamemenu.h"5
#include "Source/gendung.h"5
#include "Source/gmenu.h"5
#include "Source/help.h"5
#include "Source/init.h"5
#include "Source/interfac.h"5
#include "Source/inv.h"5
#include "Source/items.h"5
#include "Source/lighting.h"5
#include "Source/loadsave.h"5
#include "Source/logging.h"5
#include "Source/mainmenu.h"5
#include "Source/minitext.h"5
#include "Source/missiles.h"5
#include "Source/monster.h"5
#include "Source/movie.h"5
#include "Source/mpqapi.h"5
#include "Source/msg.h"5
#include "Source/msgcmd.h"5
#include "Source/multi.h"5
#include "Source/nthread.h"5
#include "Source/objects.h"5
#include "Source/pack.h"5
#include "Source/palette.h"5
#include "Source/path.h"5
#include "Source/pfile.h"5
#include "Source/player.h"5
#include "Source/plrmsg.h"5
#include "Source/portal.h"5
#include "Source/quests.h"5
#include "Source/restrict.h"5
#include "Source/scrollrt.h"5
#include "Source/setmaps.h"5
#include "Source/sha.h"5
#include "Source/sound.h"5
#include "Source/spells.h"5
#include "Source/stores.h"5
#include "Source/sync.h"5
#include "Source/textdat.h" // check file name5
#include "Source/themes.h"5
#include "Source/tmsg.h"5
#include "Source/town.h"5
#include "Source/towners.h"5
#include "Source/track.h"5
#include "Source/trigs.h"5
#include "Source/wave.h"5
#include "Source/world.h"5
5
#endif5
/*****************************************************************************/5
/* pkware.h                               Copyright (c) Ladislav Zezula 2003 */5
/*---------------------------------------------------------------------------*/5
/* Header file for PKWARE Data Compression Library                           */5
/*---------------------------------------------------------------------------*/5
/*   Date    Ver   Who  Comment                                              */5
/* --------  ----  ---  -------                                              */5
/* 31.03.03  1.00  Lad  The first version of pkware.h                        */5
/*****************************************************************************/5
5
#ifndef __PKWARE_H__5
#define __PKWARE_H__5
5
//-----------------------------------------------------------------------------5
// Defines5
5
#define CMP_BINARY             0            // Binary compression5
#define CMP_ASCII              1            // Ascii compression5
5
#define CMP_NO_ERROR           05
#define CMP_INVALID_DICTSIZE   15
#define CMP_INVALID_MODE       25
#define CMP_BAD_DATA           35
#define CMP_ABORT              45
5
#define CMP_IMPLODE_DICT_SIZE1   1024       // Dictionary size of 10245
#define CMP_IMPLODE_DICT_SIZE2   2048       // Dictionary size of 20485
#define CMP_IMPLODE_DICT_SIZE3   4096       // Dictionary size of 40965
5
//-----------------------------------------------------------------------------5
// Define calling convention5
5
#ifndef PKEXPORT5
#ifdef WIN325
#define PKEXPORT  __cdecl                   // Use for normal __cdecl calling 5
#else5
#define PKEXPORT5
#endif5
#endif5
5
//-----------------------------------------------------------------------------5
// Internal structures5
5
// Compression structure5
typedef struct5
{5
    unsigned int   distance;                // 0000: Backward distance of the currently found repetition, decreased by 15
    unsigned int   out_bytes;               // 0004: # bytes available in out_buff            5
    unsigned int   out_bits;                // 0008: # of bits available in the last out byte5
    unsigned int   dsize_bits;              // 000C: Number of bits needed for dictionary size. 4 = 0x400, 5 = 0x800, 6 = 0x10005
    unsigned int   dsize_mask;              // 0010: Bit mask for dictionary. 0x0F = 0x400, 0x1F = 0x800, 0x3F = 0x10005
    unsigned int   ctype;                   // 0014: Compression type (CMP_ASCII or CMP_BINARY)5
    unsigned int   dsize_bytes;             // 0018: Dictionary size in bytes5
    unsigned char  dist_bits[0x40];         // 001C: Distance bits5
    unsigned char  dist_codes[0x40];        // 005C: Distance codes5
    unsigned char  nChBits[0x306];          // 009C: Table of literal bit lengths to be put to the output stream5
    unsigned short nChCodes[0x306];         // 03A2: Table of literal codes to be put to the output stream5
    unsigned short offs09AE;                // 09AE: 5
5
    void         * param;                   // 09B0: User parameter5
    unsigned int (*read_buf)(char *buf, unsigned int *size, void *param);  // 9B45
    void         (*write_buf)(char *buf, unsigned int *size, void *param); // 9B85
5
    unsigned short offs09BC[0x204];         // 09BC:5
    unsigned long  offs0DC4;                // 0DC4: 5
    unsigned short phash_to_index[0x900];   // 0DC8: Array of indexes (one for each PAIR_HASH) to the "pair_hash_offsets" table5
    unsigned short phash_to_index_end;      // 1FC8: End marker for "phash_to_index" table5
    char           out_buff[0x802];         // 1FCA: Compressed data5
    unsigned char  work_buff[0x2204];       // 27CC: Work buffer5
                                            //  + DICT_OFFSET  => Dictionary5
                                            //  + UNCMP_OFFSET => Uncompressed data5
    unsigned short phash_offs[0x2204];      // 49D0: Table of offsets for each PAIR_HASH5
} TCmpStruct;5
5
#define CMP_BUFFER_SIZE  sizeof(TCmpStruct) // Size of compression structure.5
                                            // Defined as 36312 in pkware header file5
5
5
// Decompression structure5
typedef struct5
{5
    unsigned long offs0000;                 // 00005
    unsigned long ctype;                    // 0004: Compression type (CMP_BINARY or CMP_ASCII)5
    unsigned long outputPos;                // 0008: Position in output buffer5
    unsigned long dsize_bits;               // 000C: Dict size (4, 5, 6 for 0x400, 0x800, 0x1000)5
    unsigned long dsize_mask;               // 0010: Dict size bitmask (0x0F, 0x1F, 0x3F for 0x400, 0x800, 0x1000)5
    unsigned long bit_buff;                 // 0014: 16-bit buffer for processing input data5
    unsigned long extra_bits;               // 0018: Number of extra (above 8) bits in bit buffer5
    unsigned int  in_pos;                   // 001C: Position in in_buff5
    unsigned long in_bytes;                 // 0020: Number of bytes in input buffer5
    void        * param;                    // 0024: Custom parameter5
    unsigned int (*read_buf)(char *buf, unsigned int *size, void *param); // Pointer to function that reads data from the input stream5
    void         (*write_buf)(char *buf, unsigned int *size, void *param);// Pointer to function that writes data to the output stream5
5
    unsigned char out_buff[0x2204];         // 0030: Output circle buffer.5
                                            //       0x0000 - 0x0FFF: Previous uncompressed data, kept for repetitions5
                                            //       0x1000 - 0x1FFF: Currently decompressed data5
                                            //       0x2000 - 0x2203: Reserve space for the longest possible repetition5
    unsigned char in_buff[0x800];           // 2234: Buffer for data to be decompressed5
    unsigned char DistPosCodes[0x100];      // 2A34: Table of distance position codes5
    unsigned char LengthCodes[0x100];       // 2B34: Table of length codes5
    unsigned char offs2C34[0x100];          // 2C34: Buffer for 5
    unsigned char offs2D34[0x100];          // 2D34: Buffer for 5
    unsigned char offs2E34[0x80];           // 2EB4: Buffer for 5
    unsigned char offs2EB4[0x100];          // 2EB4: Buffer for 5
    unsigned char ChBitsAsc[0x100];         // 2FB4: Buffer for 5
    unsigned char DistBits[0x40];           // 30B4: Numbers of bytes to skip copied block length5
    unsigned char LenBits[0x10];            // 30F4: Numbers of bits for skip copied block length5
    unsigned char ExLenBits[0x10];          // 3104: Number of valid bits for copied block5
    unsigned short LenBase[0x10];           // 3114: Buffer for 5
} TDcmpStruct;5
5
#define EXP_BUFFER_SIZE sizeof(TDcmpStruct) // Size of decompression structure5
                                            // Defined as 12596 in pkware headers5
5
//-----------------------------------------------------------------------------5
// Public functions5
5
#ifdef __cplusplus5
   extern "C" {5
#endif5
5
unsigned int PKEXPORT implode(5
   unsigned int (*read_buf)(char *buf, unsigned int *size, void *param),5
   void         (*write_buf)(char *buf, unsigned int *size, void *param),5
   char         *work_buf,5
   void         *param,5
   unsigned int *type,5
   unsigned int *dsize);5
5
5
unsigned int PKEXPORT explode(5
   unsigned int (*read_buf)(char *buf, unsigned  int *size, void *param),5
   void         (*write_buf)(char *buf, unsigned  int *size, void *param),5
   char         *work_buf,5
   void         *param);5
5
#ifdef __cplusplus5
   }                         // End of 'extern "C"' declaration5
#endif5
5
#endif // __PKWARE_H__5
#pragma once5
5
#ifndef __BLIZZARD_STORM_HEADER5
#define __BLIZZARD_STORM_HEADER5
5
#include <windows.h>5
#include <winuser.h>5
#include <winsock.h>5
#include <ddraw.h>5
5
// Note to self: Linker error => forgot a return value in cpp5
5
// Storm API definition5
#ifndef STORMAPI5
#define STORMAPI __stdcall5
#endif5
5
#ifndef __STORM_SMAX5
#define __STORM_SMAX(x,y) (x < y ? y : x)5
#endif5
5
#ifndef __STORM_SSIZEMAX5
#define __STORM_SSIZEMAX(x,y) (__STORM_SMAX(sizeof(x),sizeof(y)))5
#endif5
5
#ifndef __STORM_SMIN5
#define __STORM_SMIN(x,y) (x < y ? x : y)5
#endif5
5
#ifndef __STORM_SSIZEMIN5
#define __STORM_SSIZEMIN(x,y) (__STORM_SMIN(sizeof(x),sizeof(y)))5
#endif5
5
typedef struct _WRECT5
{5
  WORD  left;5
  WORD  top;5
  WORD  right;5
  WORD  bottom;5
} WRECT, *PWRECT;5
5
typedef struct _WPOINT5
{5
  WORD  x;5
  WORD  y;5
} WPOINT, *PWPOINT;5
5
typedef struct _WSIZE5
{5
  WORD  cx;5
  WORD  cy;5
} WSIZE, *PWSIZE;5
5
5
5
// Game states5
#define GAMESTATE_PRIVATE 0x015
#define GAMESTATE_FULL    0x025
#define GAMESTATE_ACTIVE  0x045
#define GAMESTATE_STARTED 0x085
#define GAMESTATE_REPLAY  0x805
5
#ifdef __GNUC__5
extern "C" {5
#endif5
5
BOOL STORMAPI SNetCreateGame(const char *pszGameName, const char *pszGamePassword, const char *pszGameStatString, DWORD dwGameType, char *GameTemplateData, int GameTemplateSize, int playerCount, char *creatorName, char *a11, int *playerID);5
BOOL STORMAPI SNetDestroy();5
BOOL STORMAPI SNetEnumProviders(int (STORMAPI *callback)(DWORD, DWORD, DWORD, DWORD), int mincaps);5
5
BOOL STORMAPI SNetEnumGames(int (STORMAPI *callback)(DWORD, DWORD, DWORD), int *hintnextcall);5
5
/*  SNetDropPlayer @ 1065
 *5
 *  Drops a player from the current game.5
 *5
 *  playerid:     The player ID for the player to be dropped.5
 *  flags:5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SNetDropPlayer(5
      int playerid,5
      DWORD flags);5
5
/*  SNetGetGameInfo @ 1075
 *5
 *  Retrieves specific game information from Storm, such as name, password,5
 *  stats, mode, game template, and players.5
 *5
 *  type:         The type of data to retrieve. See GAMEINFO_ flags.5
 *  dst:          The destination buffer for the data.5
 *  length:       The maximum size of the destination buffer.5
 *  byteswritten: The number of bytes written to the destination buffer.5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SNetGetGameInfo(5
    int type,5
    void *dst,5
    size_t length,5
    size_t *byteswritten = NULL);5
5
5
#define SNGetGameInfo(typ,dst) SNetGetGameInfo(typ, &dst, sizeof(dst))5
5
5
5
// Game info fields5
#define GAMEINFO_NAME           15
#define GAMEINFO_PASSWORD       25
#define GAMEINFO_STATS          35
#define GAMEINFO_MODEFLAG       45
#define GAMEINFO_GAMETEMPLATE   55
#define GAMEINFO_PLAYERS        65
5
5
BOOL STORMAPI SNetGetNumPlayers(int *firstplayerid, int *lastplayerid, int *activeplayers);5
5
5
typedef struct _CAPS5
{5
  DWORD dwSize;                 // Size of this structure  // sizeof(CAPS)5
  DWORD dwUnk_0x04;             // Some flags?5
  DWORD maxmessagesize;         // Size of the packet buffer, must be beteen 128 and 5125
  DWORD dwUnk_0x0C;             // Unknown5
  DWORD dwDisplayedPlayerCount; // Displayed player count in the mode selection list5
  DWORD dwUnk_0x14;             // some kind of timeout or timer related5
  DWORD dwPlayerLatency;        // ... latency?5
  DWORD dwPlayerCount;          // the number of players that can participate, must be between 1 and 205
  DWORD dwCallDelay;            // the number of calls before data is sent over the network // between 2 and 8; single player is set to 15
} CAPS, *PCAPS;5
5
5
BOOL STORMAPI SNetGetPlayerCaps(char playerid, PCAPS playerCaps);5
5
/*  SNetGetPlayerName @ 1135
 *5
 *  Retrieves the name of a player given their player ID.5
 *5
 *  playerid:     The player's ID.5
 *  buffer:       The buffer that will receive the name.5
 *  buffersize:   The maximum size of buffer.5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SNetGetPlayerName(5
      int playerid,5
      char *buffer,5
      size_t buffersize);5
5
/*  SNetGetProviderCaps @ 1145
 *5
 *  Retrieves network provider capacity information.5
 *5
 *  providerCaps: A pointer to a CAPS structure that will receive the information.5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
//BOOL5
//STORMAPI5
//SNetGetProviderCaps(5
//      PCAPS providerCaps);5
5
/*  SNetGetTurnsInTransit @ 1155
 *5
 *  Retrieves the number of turns (buffers) that have been queued5
 *  before sending them over the network.5
 *5
 *  turns: A pointer to an integer that will receive the value.5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SNetGetTurnsInTransit(5
      int *turns);5
5
5
BOOL STORMAPI SNetInitializeDevice(int a1, int a2, int a3, int a4, int *a5);5
5
// Network provider structures5
typedef struct _client_info5
{5
  DWORD dwSize; // 605
  char  *pszName;5
  char  *pszVersion;5
  DWORD dwProduct;5
  DWORD dwVerbyte;5
  DWORD dwUnk5;5
  DWORD dwMaxPlayers;5
  DWORD dwUnk7;5
  DWORD dwUnk8;5
  DWORD dwUnk9;5
  DWORD dwUnk10; // 0xFF5
  char  *pszCdKey;5
  char  *pszCdOwner;5
  DWORD dwIsShareware;5
  DWORD dwLangId;5
} client_info;5
5
typedef struct _user_info5
{5
  DWORD dwSize; // 165
  char  *pszPlayerName;5
  char  *pszUnknown;5
  DWORD dwUnknown;5
} user_info;5
5
typedef struct _battle_info5
{5
  DWORD dwSize;   // 925
  DWORD dwUnkType;5
  HWND  hFrameWnd;5
  void  *pfnBattleGetResource;5
  void  *pfnBattleGetErrorString;5
  void  *pfnBattleMakeCreateGameDialog;5
  void  *pfnBattleUpdateIcons;5
  DWORD dwUnk_07;5
  void  *pfnBattleErrorDialog;5
  void  *pfnBattlePlaySound;5
  DWORD dwUnk_10;5
  void  *pfnBattleGetCursorLink;5
  DWORD dwUnk_12;5
  void  *pfnUnk_13;5
  DWORD dwUnk_14;5
  void  *pfnBattleMakeProfileDialog;5
  char  *pszProfileStrings;5
  void  *pfnBattleDrawProfileInfo;5
  void  *pfnUnk_18;5
  DWORD dwUnk_19;5
  void  *pfnUnk_20;5
  void  *pfnUnk_21;5
  void  *pfnBattleSetLeagueName;5
} battle_info;5
5
typedef struct _module_info5
{5
  DWORD dwSize; // 205
  char  *pszVersionString;5
  char  *pszModuleName;5
  char  *pszMainArchive;5
  char  *pszPatchArchive;5
} module_info;5
5
typedef struct _game5
{5
  DWORD     dwIndex;5
  DWORD     dwGameState;5
  DWORD     dwUnk_08;5
  SOCKADDR  saHost;5
  DWORD     dwUnk_1C;5
  DWORD     dwTimer;5
  DWORD     dwUnk_24;5
  char      szGameName[128];5
  char      szGameStatString[128];5
  _game     *pNext;5
  void      *pExtra;5
  DWORD     dwExtraBytes;5
  DWORD     dwProduct;5
  DWORD     dwVersion;5
} game;5
5
typedef struct _storm_head5
{5
  WORD wChecksum;5
  WORD wLength;5
  WORD wSent;5
  WORD wReceived;5
  BYTE bCommandClass;5
  BYTE bCommandType;5
  BYTE bPlayerId;5
  BYTE bFlags;5
} storm_head;5
5
5
// Traffic flags5
#define STRAFFIC_NORMAL 05
#define STRAFFIC_VERIFY 15
#define STRAFFIC_RESEND 25
#define STRAFFIC_REPLY  45
5
5
/*  SNetInitializeProvider @ 1175
 *5
 *  Initializes a provider by storing the provider callbacks, and calling5
 *  spiInitialize() using the parameters passed to this function.5
 *  Note: The use of the parameters is determined by the network5
 *  module.5
 *5
 *  providerName:     The provider's identifier. Example: 'TENB' (BNET).5
 *  gameClientInfo:   A pointer to a clientInfo structure containing5
 *                    information about the game client.5
 *  userData:         A pointer to a userInfo structure containing information5
 *                    about the player.5
 *  bnCallbacks:      A pointer to a battleInfo structure containing callbacks5
 *                    and other information that is specific to Battle.net.5
 *  moduleData:       A pointer to a moduleInfo structure containing the5
 *                    executable information and paths to MPQ archives.5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
//BOOL5
//STORMAPI5
//SNetInitializeProvider(5
//      DWORD       providerName,5
//      client_info  *gameClientInfo,5
//      user_info    *userData,5
//      battle_info  *bnCallbacks,5
//      module_info  *moduleData);5
5
5
BOOL STORMAPI SNetJoinGame(int id, char *gameName, char *gamePassword, char *playerName, char *userStats, int *playerid);5
5
/*  SNetLeaveGame @ 1195
 *5
 *  Notifies Storm that the player has left the game. Storm will5
 *  notify all connected peers through the network provider.5
 *5
 *  type: The leave type. It doesn't appear to be important, no documentation available.5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SNetLeaveGame(5
    int type);5
5
BOOL STORMAPI SNetPerformUpgrade(DWORD *upgradestatus);5
BOOL STORMAPI SNetReceiveMessage(int *senderplayerid, char **data, int *databytes);5
BOOL STORMAPI SNetReceiveTurns(int a1, int arraysize, char **arraydata, unsigned int *arraydatabytes, DWORD *arrayplayerstatus);5
5
// Values for arrayplayerstatus5
#define SNET_PS_OK             05
#define SNET_PS_WAITING        25
#define SNET_PS_NOTRESPONDING  35
#define SNET_PS_UNKNOWN        default5
5
5
// Event structure5
typedef struct _s_evt5
{5
  DWORD dwFlags;5
  int   dwPlayerId;5
  void  *pData;5
  DWORD dwSize;5
} S_EVT, *PS_EVT;5
5
5
// @TODO: "type" is unknown.5
//HANDLE STORMAPI SNetRegisterEventHandler(int type, void (STORMAPI *sEvent)(PS_EVT));5
5
int  STORMAPI SNetSelectGame(int a1, int a2, int a3, int a4, int a5, int *playerid);5
5
/*  SNetSendMessage @ 1275
 *5
 *  Sends a message to a player given their player ID. Network message5
 *  is sent using class 01 and is retrieved by the other client using5
 *  SNetReceiveMessage().5
 *5
 *  playerID:   The player index of the player to receive the data.5
 *              Conversely, this field can be one of the following constants:5
 *                  SNPLAYER_ALL      | Sends the message to all players, including oneself.5
 *                  SNPLAYER_OTHERS   | Sends the message to all players, except for oneself.5
 *  data:       A pointer to the data.5
 *  databytes:  The amount of bytes that the data pointer contains.5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SNetSendMessage(5
      int    playerID,5
      void   *data,5
      size_t databytes);5
5
5
// Macro values to target specific players5
#define SNPLAYER_ALL    -15
#define SNPLAYER_OTHERS -25
5
5
/*  SNetSendTurn @ 1285
 *5
 *  Sends a turn (data packet) to all players in the game. Network data5
 *  is sent using class 02 and is retrieved by the other client using5
 *  SNetReceiveTurns().5
 *5
 *  data:       A pointer to the data.5
 *  databytes:  The amount of bytes that the data pointer contains.5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SNetSendTurn(5
      char    *data,5
      size_t  databytes);5
5
/*  SNetSetGameMode @ 1305
 *5
 *  Set's the game's mode flags, notifying the network5
 *  provider that the state of the game has changed.5
 *  For example: notifies Battle.net when the game is5
 *  full.5
 *5
 *  You should first call SNetGetGameInfo to retrieve5
 *  the existing mode flags.5
 *5
 *  modeFlags:  The new flags for the game mode.5
 *                  GAMESTATE_PRIVATE     | The game is passworded.5
 *                  GAMESTATE_FULL        | The game is full.5
 *                  GAMESTATE_ACTIVE      | The game is available.5
 *                  GAMESTATE_STARTED     | The game is in progress.5
 *                  GAMESTATE_REPLAY      | The game is a replay.5
 *  makePublic: Used to make the game a public game, removing the GAMESTATE_PRIVATE flag.5
 *5
 *  Returns TRUE if the function was called successfully and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SNetSetGameMode(5
      DWORD modeFlags,5
      bool makePublic = false);5
5
#define SNMakeGamePublic() SNetSetGameMode( (DWORD mode, SNetGetGameInfo(GAMEINFO_MODEFLAGS, &mode, 4), mode), true)5
5
BOOL STORMAPI SNetEnumGamesEx(int a1, int a2, int (__fastcall *callback)(DWORD, DWORD, DWORD), int *hintnextcall);5
BOOL STORMAPI SNetSendServerChatCommand(const char *command);5
5
BOOL STORMAPI SNetDisconnectAll(DWORD flags);5
BOOL STORMAPI SNetCreateLadderGame(const char *pszGameName, const char *pszGamePassword, const char *pszGameStatString, DWORD dwGameType, DWORD dwGameLadderType, DWORD dwGameModeFlags, char *GameTemplateData, int GameTemplateSize, int playerCount, char *creatorName, char *a11, int *playerID);5
5
#define SNET_GAME_RESULT_WIN        15
#define SNET_GAME_RESULT_LOSS       25
#define SNET_GAME_RESULT_DRAW       35
#define SNET_GAME_RESULT_DISCONNECT 45
5
BOOL STORMAPI SNetReportGameResult(unsigned a1, int size, int *results, const char* headerInfo, const char* detailInfo);5
5
int  STORMAPI SNetSendLeagueCommand(char *cmd, char *callback);5
int  STORMAPI SNetSendReplayPath(int a1, int a2, char *replayPath);5
int  STORMAPI SNetGetLeagueName(int leagueID);5
BOOL STORMAPI SNetGetPlayerNames(char **names);5
int  STORMAPI SNetLeagueLogout(char *bnetName);5
int  STORMAPI SNetGetLeaguePlayerName(char *curPlayerLeageName, size_t nameSize);5
5
HGDIOBJ STORMAPI SDlgDefDialogProc(HWND hDlg, signed int DlgType, HDC textLabel, HWND hWnd);5
5
HANDLE STORMAPI SDlgDialogBoxIndirectParam(HMODULE hModule, LPCSTR lpName, HWND hWndParent, LPVOID lpParam, LPARAM lParam);5
5
BOOL STORMAPI SDlgEndDialog(HWND hDlg, HANDLE nResult);5
5
BOOL STORMAPI SDlgSetControlBitmaps(HWND parentwindow, int *id, int a3, char *buffer2, char *buffer, int flags, int mask);5
5
/*5
// lpCursorName can only be IDC_ARROW5
BOOL STORMAPI SDlgSetSystemCursor(void *lpSrcBuffer, void *p_a2, LPSIZE lpSize, LPCSTR lpCursorName);5
*/5
5
BOOL STORMAPI SDlgBltToWindowE(HWND hWnd, HRGN a2, char *a3, int a4, void *buffer, RECT *rct, SIZE *size, int a8, int a9, DWORD rop);5
BOOL STORMAPI SDlgSetBitmapE(HWND hWnd, int a2, char *src, int mask1, int flags, int a6, int a7, int width, int a9, int mask2);5
5
int  STORMAPI Ordinal224(int a1);5
5
BOOL STORMAPI SFileCloseArchive(HANDLE hArchive);5
BOOL STORMAPI SFileCloseFile(HANDLE hFile);5
5
BOOL STORMAPI SFileDdaBeginEx(HANDLE directsound, DWORD flags, DWORD mask, unsigned __int32 lDistanceToMove, signed __int32 volume, signed int a6, int a7);5
BOOL STORMAPI SFileDdaDestroy();5
BOOL STORMAPI SFileDdaEnd(HANDLE directsound);5
BOOL STORMAPI SFileDdaGetPos(HANDLE directsound, int a2, int a3);5
5
BOOL STORMAPI SFileDdaInitialize(HANDLE directsound);5
BOOL STORMAPI SFileDdaSetVolume(HANDLE directsound, signed int bigvolume, signed int volume);5
BOOL STORMAPI SFileDestroy();5
5
BOOL STORMAPI SFileGetFileArchive(HANDLE hFile, HANDLE archive);5
LONG STORMAPI SFileGetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh);5
BOOL STORMAPI SFileOpenArchive(const char *szMpqName, DWORD dwPriority, DWORD dwFlags, HANDLE *phMpq);5
5
// values for dwFlags5
enum MPQFlags5
{5
  MPQ_NO_LISTFILE       = 0x0010,5
  MPQ_NO_ATTRIBUTES     = 0x0020,5
  MPQ_FORCE_V1          = 0x0040,5
  MPQ_CHECK_SECTOR_CRC  = 0x00805
};5
5
5
BOOL STORMAPI SFileOpenFile(const char *filename, HANDLE *phFile);5
BOOL STORMAPI SFileOpenFileEx(HANDLE hMpq, const char *szFileName, DWORD dwSearchScope, HANDLE *phFile);5
5
// values for dwSearchScope5
enum SFileFlags5
{5
  SFILE_FROM_MPQ      = 0x00000000,5
  SFILE_FROM_ABSOLUTE = 0x00000001,5
  SFILE_FROM_RELATIVE = 0x00000002,5
  SFILE_FROM_DISK     = 0x000000045
};5
5
BOOL STORMAPI SFileReadFile(HANDLE hFile, void *buffer, DWORD nNumberOfBytesToRead, DWORD *read, LONG lpDistanceToMoveHigh);5
5
void STORMAPI SFileSetLocale(LCID lcLocale);5
5
// mode:    0 - Silent (callback is NULL)5
//          1 - Application Defined5
//          2 - Handled by storm (callback is NULL)5
// BOOL STORMAPI callback(const char *pszFilename, DWORD dwErrCode, DWORD dwErrCount)5
BOOL STORMAPI SFileSetIoErrorMode(DWORD mode, BOOL (STORMAPI *callback)(const char*,DWORD,DWORD) );5
5
BOOL STORMAPI SFileGetArchiveName(HANDLE hArchive, char *name, int length);5
BOOL STORMAPI SFileGetFileName(HANDLE hFile, char *buffer, int length);5
5
BOOL STORMAPI SFileLoadFile(char *filename, void *buffer, int buffersize, int a4, int a5);5
BOOL STORMAPI SFileUnloadFile(HANDLE hFile);5
BOOL STORMAPI SFileLoadFileEx(void *hArchive, char *filename, int a3, int a4, int a5, DWORD searchScope, struct _OVERLAPPED *lpOverlapped);5
5
// Options are DWORD except for #65
// 1: [TRUE|FALSE] - If true, reports resource leaks (SErrReportResourceLeak/SErrReportNamedResourceLeak) to the attached debugger instead of a message box.5
// 2: This option is unused.5
// 3: [TRUE|FALSE] - If true, reports general memory leaks to the attached debugger instead of a message box.5
// 4: This option is unused.5
// 5: [TRUE|FALSE] - If true, reports log messages and log dumps to the attached debugger.5
// 6: { DWORD blocks_allocated; DWORD blocks_freed; } Used to determine the amount of memory/heap blocks that have been allocated and freed by storm.5
//    Can also be used for custom allocations outside of storm.5
//5
//BOOL STORMAPI StormGetOption(int type, void *pValue, size_t *pSize);5
//BOOL STORMAPI StormSetOption(int type, void *pValue, size_t size);5
5
BOOL STORMAPI SBltROP3(void *lpDstBuffer, void *lpSrcBuffer, int srcDrawWidth, int srcDrawHeight, int dstWidth, int srcWidth, int a7, DWORD rop);5
BOOL STORMAPI SBltROP3Clipped(void *lpDstBuffer, RECT *lpDstRect, POINT *lpDstPt, int a4, void *lpSrcBuffer, RECT *lpSrcRect, POINT *lpSrcPt, int a8, int a9, DWORD rop);5
5
#define SBMP_DEFAULT  05
#define SBMP_BMP      15
#define SBMP_PCX      25
#define SBMP_TGA      35
5
5
/*  SBmpDecodeImage @ 3215
 *5
 *  Decodes an image that has already been loaded into a buffer.5
 *5
 *  dwImgType:        Optional, the image type. See SBMP_ macros.5
 *  pSrcBuffer:       A pointer to the source buffer.5
 *  dwSrcBuffersize:  The size of the data in the source buffer.5
 *  pPalette:         An optional buffer that receives the image palette.5
 *  pDstBuffer:       A buffer that receives the image data.5
 *  dwDstBuffersize:  The size of the specified image buffer. If the size of the5
 *                    destination buffer is 0, then the destination buffer is not used.5
 *  pdwWidth:         An optional variable that receives the image width.5
 *  pdwHeight:        An optional variable that receives the image height.5
 *  pdwBpp:           An optional variable that receives the image bits per pixel.5
 *5
 *  Returns TRUE if the image was supported and decoded correctly, FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SBmpDecodeImage(5
    DWORD        dwImgType,5
    void         *pSrcBuffer,5
    DWORD        dwSrcBuffersize,5
    PALETTEENTRY *pPalette        = NULL,5
    void         *pDstBuffer      = NULL,5
    DWORD        dwDstBuffersize  = 0,5
    DWORD        *pdwWidth        = NULL,5
    DWORD        *pdwHeight       = NULL,5
    DWORD        *pdwBpp          = NULL);5
5
5
/*  SBmpLoadImage @ 3235
 *5
 *  Load an image from an available archive into a buffer.5
 *5
 *  pszFileName:  The name of the graphic in an active archive.5
 *  pPalette:     An optional buffer that receives the image palette.5
 *  pBuffer:      A buffer that receives the image data.5
 *  dwBuffersize: The size of the specified image buffer.5
 *  pdwWidth:     An optional variable that receives the image width.5
 *  pdwHeight:    An optional variable that receives the image height.5
 *  pdwBpp:       An optional variable that receives the image bits per pixel.5
 *5
 *  Returns TRUE if the image was supported and loaded correctly, FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SBmpLoadImage(5
    const char   *pszFileName,5
    PALETTEENTRY *pPalette    = NULL,5
    void         *pBuffer     = NULL,5
    DWORD        dwBuffersize = 0,5
    DWORD        *pdwWidth    = NULL,5
    DWORD        *pdwHeight   = NULL,5
    DWORD        *pdwBpp      = NULL);5
5
/*  SBmpSaveImage @ 3245
 *5
 *  Save an image from a buffer to a file. The image format is determined5
 *  from the filename and is either .gif, .pcx, .tga, or .bmp being the default.5
 *5
 *  pszFileName:  The name of the file to create.5
 *  pPalette:     A pointer to a palette array containing 256 entries.5
 *  pBuffer:      A buffer containing the image data.5
 *  pdwWidth:     The width of the image.5
 *  pdwHeight:    The height of the image.5
 *  pdwBpp:       The bits per pixel.5
 *5
 *  Returns TRUE if the image was saved correctly, FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SBmpSaveImage(5
    const char    *pszFileName,5
    PALETTEENTRY  *pPalette,5
    void          *pBuffer,5
    DWORD         dwWidth,5
    DWORD         dwHeight,5
    DWORD         dwBpp = 8);5
5
5
HANDLE STORMAPI SBmpAllocLoadImage(const char *fileName, PALETTEENTRY *palette, void **buffer, int *width, int *height, int unused6, int unused7, void *(STORMAPI *allocFunction)(DWORD));5
5
BOOL STORMAPI SCodeCompile(char *directives1, char *directives2, char *loopstring, unsigned int maxiterations, unsigned int flags, HANDLE handle);5
BOOL STORMAPI SCodeDelete(HANDLE handle);5
5
int  STORMAPI SCodeExecute(HANDLE handle, int a2);5
5
BOOL STORMAPI SDrawAutoInitialize(HINSTANCE hInst, LPCSTR lpClassName, LPCSTR lpWindowName, WNDPROC pfnWndProc, int nMode, int nWidth, int nHeight, int nBits);5
5
5
/*  SDrawCaptureScreen @ 3425
 *5
 *  Saves a screenshot from the primary surface being handled by Storm.5
 *5
 *  pszOutput: The name of the output file. The save format is automatically set by the extension.5
 *             The extensions supported are .gif, .pcx, .tga, and .bmp. It will write a bitmap by default.5
 *5
 *  Returns TRUE if successful and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SDrawCaptureScreen(5
    const char *pszOutput);5
5
5
/*  SDrawGetFrameWindow @ 3465
 *5
 *  Retrieves the window handle that was specified in5
 *  SDrawManualInitialize or created in SDrawAutoInitialize.5
 *5
 *  sdraw_framewindow: Optional variable that receives the returned handle.5
 *5
 *  Returns the handle of the window.5
 */5
HWND5
STORMAPI5
SDrawGetFrameWindow(5
    HWND *sdraw_framewindow = NULL);5
5
5
/*  SDrawGetObjects @ 3475
 *5
 *  Retrieves the object information that was initialized using5
 *  SDrawManualInitialize or SDrawAutoInitialize.5
 *5
 *  ddInterface:    The DirectDraw interface.5
 *  primarySurface: The primary DirectDraw surface.5
 *  surface2:       A second unknown surface.5
 *  surface3:       A third unknown surface.5
 *  backSurface:    The back DirectDraw surface.5
 *  ddPalette:      The DirectDraw palette.5
 *  hPalette:       The palette handle.5
 *5
 *  Returns FALSE if the direct draw interface has not been initialized.5
 */5
BOOL5
STORMAPI5
SDrawGetObjects(5
    LPDIRECTDRAW        *ddInterface    = NULL,5
    LPDIRECTDRAWSURFACE *primarySurface = NULL,5
    LPDIRECTDRAWSURFACE *surface2       = NULL,5
    LPDIRECTDRAWSURFACE *surface3       = NULL,5
    LPDIRECTDRAWSURFACE *backSurface    = NULL,5
    LPDIRECTDRAWPALETTE *ddPalette      = NULL,5
    HPALETTE            *hPalette       = NULL);5
5
5
/*  SDrawGetScreenSize @ 3485
 *5
 *  Obtains information for the current screen resolution.5
 *5
 *  pdwWidth:   Optional variable that receives the screen width.5
 *  pdwHeight:  Optional variable that receives the screen height.5
 *  pdwBpp:     Optional variable that receives the bits per pixel.5
 *5
 *  Returns FALSE if no variables were specified.5
 */5
BOOL5
STORMAPI5
SDrawGetScreenSize(5
    DWORD *pdwWidth,5
    DWORD *pdwHeight,5
    DWORD *pdwBpp);5
5
5
// undefined5
BOOL STORMAPI SDrawLockSurface(int surfacenumber, RECT *lpDestRect, void **lplpSurface, int *lpPitch, int arg_unused);5
5
5
/*  SDrawManualInitialize @ 3515
 *5
 *  Sets the DirectDraw variables to be referenced in Storm.5
 *5
 *  hWnd:           The handle of the DirectDraw window.5
 *  ddInterface:    The DirectDraw interface.5
 *  primarySurface: The first and primary surface.5
 *  surface2:       A second surface. Behaviour not completely known.5
 *  surface3:       A third surface. Behaviour not completely known.5
 *  backSurface:    The fourth and final surface. The back surface.5
 *  ddPalette:      The DirectDraw palette if the application requires it.5
 *  hPalette:       The palette handle that belongs to the window.5
 *                  If this is NULL and ddPalette is specified, then it5
 *                  will be created automatically. A palette can be created5
 *                  using the CreatePalette WinAPI function.5
 *5
 *  Returns FALSE if no variables were specified.5
 */5
BOOL5
STORMAPI5
SDrawManualInitialize(5
     HWND hWnd                           = NULL,5
     LPDIRECTDRAW ddInterface            = NULL,5
     LPDIRECTDRAWSURFACE primarySurface  = NULL,5
     LPDIRECTDRAWSURFACE surface2        = NULL,5
     LPDIRECTDRAWSURFACE surface3        = NULL,5
     LPDIRECTDRAWSURFACE backSurface     = NULL,5
     LPDIRECTDRAWPALETTE ddPalette       = NULL,5
     HPALETTE hPalette                   = NULL);5
5
5
/*  SDrawPostClose @ 3535
 *5
 *  Posts a WM_QUIT message to the active drawing window specified5
 *  in SDrawManualInitialize or created in SDrawAutoInitialize.5
 *5
 *  Returns TRUE if successful and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SDrawPostClose();5
5
5
// undefined5
//BOOL STORMAPI SDrawRealizePalette();5
5
BOOL STORMAPI SDrawUnlockSurface(int surfacenumber, void *lpSurface, int a3, RECT *lpRect);5
BOOL STORMAPI SDrawUpdatePalette(unsigned int firstentry, unsigned int numentries, PALETTEENTRY *pPalEntries, int a4);5
5
BOOL STORMAPI SEvtDispatch(DWORD dwMessageID, DWORD dwFlags, int type, PS_EVT pEvent);5
5
BOOL STORMAPI SGdiDeleteObject(HANDLE handle);5
5
BOOL STORMAPI SGdiExtTextOut(int a1, int a2, int a3, int a4, unsigned int a8, signed int a6, signed int a7, const char *pszString, unsigned int arg20);5
BOOL STORMAPI SGdiImportFont(HGDIOBJ handle, int windowsfont);5
5
BOOL STORMAPI SGdiSelectObject(int handle);5
BOOL STORMAPI SGdiSetPitch(int pitch);5
5
BOOL STORMAPI Ordinal393(char *pszString, int, int);5
5
5
/*  SMemAlloc @ 4015
 *5
 *  Allocates a block of memory. This block is different5
 *  from the standard malloc by including a header containing5
 *  information about the block.5
 *5
 *  amount:       The amount of memory to allocate, in bytes.5
 *  logfilename:  The name of the file or object that this call belongs to.5
 *  logline:      The line in the file or one of the SLOG_ macros.5
 *  defaultValue: The default value of a byte in the allocated memory.5
 *5
 *  Returns a pointer to the allocated memory. This pointer does NOT include5
 *  the additional storm header.5
 */5
void*5
STORMAPI5
SMemAlloc(5
    size_t amount,5
    char  *logfilename,5
    int   logline,5
    char  defaultValue = 0);5
5
#define SMAlloc(amount) SMemAlloc((amount), __FILE__, __LINE__)5
5
5
/*  SMemFree @ 4035
 *5
 *  Frees a block of memory that was created using SMemAlloc,5
 *  includes the log file and line for debugging purposes.5
 *5
 *  location:     The memory location to be freed.5
 *  logfilename:  The name of the file or object that this call belongs to.5
 *  logline:      The line in the file or one of the SLOG_ macros.5
 *  defaultValue:5
 *5
 *  Returns TRUE if the call was successful and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SMemFree(5
    void *location,5
    char *logfilename,5
    int  logline,5
    char defaultValue = 0);5
5
#define SMFree(loc) SMemFree((loc), __FILE__, __LINE__)5
5
5
/*  SMemReAlloc @ 4055
 *5
 *  Reallocates a block of memory that was created using SMemAlloc,5
 *  includes the log file and line for debugging purposes.5
 *5
 *  location:     The memory location to be re-allocated. If this parameter5
 *                is NULL, then SMemAlloc is called with the remaining parameters.5
 *  amount:       The amount of memory to re-allocate.5
 *  logfilename:  The name of the file or object that this call belongs to.5
 *  logline:      The line in the file or one of the SLOG_ macros.5
 *  defaultValue:5
 *5
 *  Returns a pointer to the re-allocated memory. This pointer does NOT include5
 *  the additional storm header.5
 */5
void*5
STORMAPI5
SMemReAlloc(5
    void    *location,5
    size_t  amount,5
    char    *logfilename,5
    int     logline,5
    char    defaultValue = 0);5
5
#define SMReAlloc(loc,s) SMemReAlloc((loc),(s), __FILE__, __LINE__)5
5
// Can be provided instead of logline/__LINE__ parameter to indicate different errors.5
#define SLOG_EXPRESSION    05
#define SLOG_FUNCTION     -15
#define SLOG_OBJECT       -25
#define SLOG_HANDLE       -35
#define SLOG_FILE         -45
#define SLOG_EXCEPTION    -55
5
5
BOOL STORMAPI SRegLoadData(const char *keyname, const char *valuename, int size, LPBYTE lpData, BYTE flags, LPDWORD lpcbData);5
BOOL STORMAPI SRegLoadString(const char *keyname, const char *valuename, BYTE flags, char *buffer, size_t buffersize);5
BOOL STORMAPI SRegLoadValue(const char *keyname, const char *valuename, BYTE flags, int *value);5
BOOL STORMAPI SRegSaveData(const char *keyname, const char *valuename, int size, BYTE *lpData, DWORD cbData);5
BOOL STORMAPI SRegSaveString(const char *keyname, const char *valuename, BYTE flags, char *string);5
BOOL STORMAPI SRegSaveValue(const char *keyname, const char *valuename, BYTE flags, DWORD result);5
5
BOOL STORMAPI SRegDeleteValue(const char *keyname, const char *valuename, BYTE flags);5
5
// Flags for SReg functions5
5
// Default behaviour checks both HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER5
// relative to the "Software\\Blizzard Entertainment\\" key in both hives.5
#define SREG_NONE                   0x000000005
#define SREG_EXCLUDE_LOCAL_MACHINE  0x00000001  // excludes checking the HKEY_LOCAL_MACHINE hive5
#define SREG_BATTLE_NET             0x00000002  // sets the relative key to "Software\\Battle.net\\" instead5
#define SREG_EXCLUDE_CURRENT_USER   0x00000004  // excludes checking the HKEY_CURRENT_USER hive5
#define SREG_ABSOLUTE               0x00000010  // specifies that the key is not a relative key5
5
BOOL STORMAPI STransBlt(void *lpSurface, int x, int y, int width, HANDLE hTrans);5
BOOL STORMAPI STransBltUsingMask(void *lpDest, void *lpSource, int pitch, int width, HANDLE hTrans);5
5
BOOL STORMAPI STransDelete(HANDLE hTrans);5
5
BOOL STORMAPI STransDuplicate(HANDLE hTransSource, HANDLE hTransDest);5
BOOL STORMAPI STransIntersectDirtyArray(HANDLE hTrans, char * dirtyarraymask, unsigned flags, HANDLE * phTransResult);5
BOOL STORMAPI STransInvertMask(HANDLE hTrans, HANDLE * phTransResult);5
5
BOOL STORMAPI STransSetDirtyArrayInfo(int width, int height, int depth, int bits);5
5
BOOL STORMAPI STransPointInMask(HANDLE hTrans, int x, int y); // Name is a pure guess5
BOOL STORMAPI STransCombineMasks(HANDLE hTransA, HANDLE hTransB, int left, int top, int flags, HANDLE * phTransResult);5
5
BOOL STORMAPI STransCreateE(void *pBuffer, int width, int height, int bpp, int a5, int bufferSize, HANDLE *phTransOut);5
5
BOOL STORMAPI SVidDestroy();5
BOOL STORMAPI SVidGetSize(HANDLE video, int width, int height, int zero);5
BOOL STORMAPI SVidInitialize(HANDLE video);5
BOOL STORMAPI SVidPlayBegin(char *filename, int arg4, int a3, int a4, int a5, int a6, HANDLE* video);5
5
BOOL STORMAPI SVidPlayContinueSingle(HANDLE video, int a2, int a3);5
BOOL STORMAPI SVidPlayEnd(HANDLE video);5
5
/* SErrDisplayError @ 4615
 *5
 * Displays a formatted error message. The message is detailed and flexible for many applications.5
 * The message will be different if there is a debugger attached. Will typically terminate the application5
 * unless the option to continue is given.5
 *5
 *  dwErrMessage:   The error code. See SErrGetLastError and GetLastError.5
 *  logfilename:    The name of the file or object that this call belongs to.5
 *  logline:        The line in the file or one of the SLOG_ macros.5
 *  message:        A message or expression with additional information.5
 *  allowOption:    If TRUE, allows the user the option to continue execution, otherwise the program will terminate.5
 *  exitCode:       The exit code used for program termination.5
 *5
 *  Returns TRUE if the user chose to continue execution, FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SErrDisplayError(5
    DWORD dwErrMsg,5
    const char *logfilename,5
    int logline,5
    const char *message = NULL,5
    BOOL allowOption = FALSE,5
    int exitCode = 1);5
5
#define SAssert(x) { if ( !(x) ) SErrDisplayError(STORM_ERROR_ASSERTION, __FILE__, __LINE__, #x) }5
5
#define SEDisplayError(err) SErrDisplayError(e, __FILE__, __LINE__)5
5
/*  SErrGetErrorStr @ 4625
 *5
 *  Retrieves a string that describes the specified error code for5
 *  the system, Storm, DirectDraw, or DirectSound.5
 *5
 *  dwErrCode:    The error code to look up.5
 *  buffer:       The destination buffer to receive the string.5
 *  bufferchars:  The size of the destination buffer.5
 *5
 *  Returns TRUE if the call was successful and FALSE otherwise.5
 */5
BOOL5
STORMAPI5
SErrGetErrorStr(5
    DWORD dwErrCode,5
    char *buffer,5
    size_t bufferchars);5
5
#define SEGetErrorStr(e,b) SErrGetErrorStr(e,b,sizeof(b))5
5
5
/*  SErrGetLastError @ 4635
 *5
 *  Retrieves the last error that was specifically5
 *  set for the Storm library.5
 *5
 *  Returns the last error set within the Storm library.5
 */5
DWORD5
STORMAPI5
SErrGetLastError();5
5
5
// Registers a module as a message source for SErrGetErrorStr, always returns TRUE5
// groupID is a group in a MessageTable entry for example in STORM_ERROR_BAD_ARGUMENT 0x85100065, 0x510 is the group.5
// BOOL STORMAPI SErrRegisterMessageSource(WORD groupID, HMODULE hSourceModule, int a3)5
5
5
/*  SErrSetLastError @ 4655
 *5
 *  Sets the last error for the Storm library and the Kernel32 library.5
 *5
 *  dwErrCode:  The error code that will be set.5
 */5
void5
STORMAPI5
SErrSetLastError(5
    DWORD dwErrCode = NO_ERROR);5
5
//5
// void STORMAPI SErrReportNamedResourceLeak(const char *pszMsg, const char *pszSubMsg = nullptr)5
// void STORMAPI SErrReportResourceLeak(const char *pszMsg)5
5
void STORMAPI SErrSuppressErrors(BOOL suppressErrors);5
5
// Values for dwErrCode5
#define STORM_ERROR_ASSERTION                    0x851000005
#define STORM_ERROR_BAD_ARGUMENT                 0x851000655
#define STORM_ERROR_GAME_ALREADY_STARTED         0x851000665
#define STORM_ERROR_GAME_FULL                    0x851000675
#define STORM_ERROR_GAME_NOT_FOUND               0x851000685
#define STORM_ERROR_GAME_TERMINATED              0x851000695
#define STORM_ERROR_INVALID_PLAYER               0x8510006a5
#define STORM_ERROR_NO_MESSAGES_WAITING          0x8510006b5
#define STORM_ERROR_NOT_ARCHIVE                  0x8510006c5
#define STORM_ERROR_NOT_ENOUGH_ARGUMENTS         0x8510006d5
#define STORM_ERROR_NOT_IMPLEMENTED              0x8510006e5
#define STORM_ERROR_NOT_IN_ARCHIVE               0x8510006f5
#define STORM_ERROR_NOT_IN_GAME                  0x851000705
#define STORM_ERROR_NOT_INITIALIZED              0x851000715
#define STORM_ERROR_NOT_PLAYING                  0x851000725
#define STORM_ERROR_NOT_REGISTERED               0x851000735
#define STORM_ERROR_REQUIRES_CODEC1              0x851000745
#define STORM_ERROR_REQUIRES_CODEC2              0x851000755
#define STORM_ERROR_REQUIRES_CODEC3              0x851000765
#define STORM_ERROR_REQUIRES_UPGRADE             0x851000775
#define STORM_ERROR_STILL_ACTIVE                 0x851000785
#define STORM_ERROR_VERSION_MISMATCH             0x851000795
#define STORM_ERROR_MEM_NOT_ALLOCATED            0x8510007a5
#define STORM_ERROR_MEM_CORRUPTED                0x8510007b5
#define STORM_ERROR_MEM_INVALID                  0x8510007c5
#define STORM_ERROR_MEM_MANAGER_NOT_INITIALIZED  0x8510007d5
#define STORM_ERROR_MEM_NOT_FREED                0x8510007e5
#define STORM_ERROR_RESOURCES_NOT_RELEASED       0x8510007f5
#define STORM_ERROR_OUT_OF_BOUNDS                0x851000805
#define STORM_ERROR_NULL_POINTER                 0x851000815
#define STORM_ERROR_CDKEY_MISMATCH               0x851000825
#define STORM_ERROR_FILE_CORRUPTED               0x851000835
#define STORM_ERROR_FATAL                        0x851000845
#define STORM_ERROR_GAMETYPE_UNAVAILABLE         0x851000855
5
5
/*  SMemCopy @ 4915
 *5
 *  Copies a block of memory from source to destination.5
 *  This function immediately calls memcpy. See online documentation5
 *  of memcpy for more details.5
 *5
 *  dest:   The destination buffer.5
 *  source: The source buffer.5
 *  size:   The number of bytes to copy.5
 */5
void5
STORMAPI5
SMemCopy(5
    void *dest,5
    const void *source,5
    size_t size);5
5
#define SMCopy(d,s) ( SMemCopy(d, s, __STORM_SSIZEMIN(s,d)) )5
5
/*  SMemFill @ 4925
 *5
 *  Fills a block of memory with the specified character.5
 *  This function immediately calls memset. See online documentation5
 *  of memset for more details.5
 *5
 *  dest:   The destination buffer.5
 *  source: The size of the destination buffer.5
 *  size:   The format to use.5
 */5
void5
STORMAPI5
SMemFill(5
    void *location,5
    size_t length,5
    char fillWith = 0);5
5
#define SMFill(l,f) (SMemFill(l, sizeof(l), f))5
5
/*  SMemZero @ 4945
 *5
 *  Fills a block of memory with the integer 0x00 (Zero).5
 *5
 *  location: The location to write at.5
 *  length:   The amount of bytes to write.5
 */5
void5
STORMAPI5
SMemZero(5
    void *location,5
    size_t length);5
5
#define SMZero(l) (SMemZero(l, sizeof(l)))5
5
5
int   STORMAPI SMemCmp(void *location1, void *location2, DWORD size);5
5
#define SMCmp(l,x) ( SMemCmp(l, x, __STORM_SSIZEMIN(x,l)) )5
5
/*  SStrCopy @ 5015
 *5
 *  Copies a string from src to dest (including NULL terminator)5
 *  until the max_length is reached.5
 *5
 *  dest:         The destination array.5
 *  src:          The source array.5
 *  max_length:   The maximum length of dest.5
 *5
 *  Returns the number of characters copied.5
 */5
int5
STORMAPI5
SStrCopy(5
    char *dest,5
    const char *src,5
    int max_length = 0x7FFFFFFF);5
5
#define SSCopy(d,s) (SStrCopy(d, s, sizeof(d)))5
5
#define STORM_HASH_ABSOLUTE 15
5
/*  SStrHash @ 5025
 *5
 *  Creates a simple hash for the string. This function5
 *  should NOT be used for sensitive information.5
 *5
 *  string:   The input string.5
 *  flags:    If STORM_HASH_ABSOLUTE is set then this5
              function uses the absolute string, otherwise5
              it will convert backslashes to forward5
              slashes and some other processing.5
 *  seed:     The hash seed. If this value is 0 then the5
 *            default value 0x7FED7FED will be used.5
 *5
 *  Returns the 32-bit hash of the string.5
 */5
DWORD5
STORMAPI5
SStrHash(5
      const char *string,5
      DWORD flags = 0,5
      DWORD Seed  = 0);5
5
int   STORMAPI SStrNCat(char *dest, const char *src, DWORD max_length);5
5
/*  SStrLen @ 5065
 *5
 *  Retrieves the length of a string.5
 *5
 *  string:   The input string of which to obtain a5
 *            length for.5
 *5
 *  Returns the length of the string.5
 */5
int5
STORMAPI5
SStrLen(5
      const char *string);5
5
/*  SStrCmp @ 5085
 *5
 *  Compares two strings case sensitive.5
 *5
 *  string1:  The first string.5
 *  string2:  The second string.5
 *  size:     The maximum amount of characters to compare.5
 *5
 *  Returns 0 if strings are equal. See strcmp documentation for more details.5
 */5
int5
STORMAPI5
SStrCmp(5
      const char *string1,5
      const char *string2,5
      size_t size);5
5
#define SSCmp(s,x) ( SStrCmp(s,x,__STORM_SSIZEMIN(s,x)) )5
5
/*  SStrCmpI @ 5095
 *5
 *  Compares two strings case insensitive.5
 *5
 *  string1:  The first string.5
 *  string2:  The second string.5
 *  size:     The maximum amount of characters to compare.5
 *5
 *  Returns 0 if strings are equal. See strcmpi documentation for more details.5
 */5
int5
STORMAPI5
SStrCmpI(5
      const char *string1,5
      const char *string2,5
      size_t size);5
5
#define SSCmpI(s,x) ( SStrCmpI(s,x,__STORM_SSIZEMIN(s,x)) )5
5
/*  SStrUpper @ 5105
 *5
 *  Converts all lower-case alpha characters of a string to upper-case.5
 *5
 *  string:   The string to convert.5
 *5
 *  Returns the same pointer given in the input.5
 */5
char*5
STORMAPI5
SStrUpper(5
      char* string);5
5
void  STORMAPI SRgn523(HANDLE hRgn, RECT *pRect, int a3, int a4);5
void  STORMAPI SRgnCreateRegion(HANDLE *hRgn, int a2);5
void  STORMAPI SRgnDeleteRegion(HANDLE hRgn);5
5
void  STORMAPI SRgn529i(int handle, int a2, int a3);5
5
5
/* SErrDisplayErrorFmt @ 5625
 *5
 * Displays a formatted error message. The message is detailed and flexible for many applications.5
 * The message will be different if there is a debugger attached. Will typically terminate the application5
 * unless the option to continue is given.5
 *5
 *  dwErrMessage:   The error code. See SErrGetLastError and GetLastError.5
 *  logfilename:    The name of the file or object that this call belongs to.5
 *  logline:        The line in the file or one of the SLOG_ macros.5
 *  allowOption:    If TRUE, allows the user the option to continue execution, otherwise the program will terminate.5
 *  exitCode:       The exit code used for program termination.5
 *  format:         Additional message formatting. See printf.5
 *5
 *  Returns TRUE if the user chose to continue execution, FALSE otherwise.5
 */5
BOOL5
SErrDisplayErrorFmt(5
    DWORD dwErrMsg,5
    const char *logfilename,5
    int logline,5
    BOOL allowOption,5
    int exitCode,5
    const char *format,5
    ...);5
5
//#define SEDisplayErrorFmt(err,...) SErrDisplayErrorFmt(err, __FILE__, __LINE__, FALSE, 1, __VA_ARGS__)5
5
/*  SErrCatchUnhandledExceptions @ 5675
 *5
 *  Registers a top-level exception filter managed entirely by Storm.5
 *  The registered filter will display formatted exception information by calling SErrDisplayError.5
 */5
void5
STORMAPI5
SErrCatchUnhandledExceptions();5
5
5
/*  SStrChr @ 5715
 *5
 *  Searches a string for the given character. See5
 *  strchr documentation for more details.5
 *5
 *  string:   The string to search.5
 *  c:        The character to search for.5
 *5
 *  Returns a pointer to the first occurance of the character.5
 */5
char*5
STORMAPI5
SStrChr(5
    const char *string,5
    char c);5
5
5
char *STORMAPI SStrChrR(const char *string, char c);5
5
5
/*  SStrVPrintf @ 5785
 *5
 *  Prints a formatted string to a destination buffer.5
 *  This function calls vsnprintf with some extra error handling.5
 *  See online documentation of vsnprintf for more details.5
 *5
 *  dest:   The destination buffer.5
 *  size:   The size of the destination buffer.5
 *  format: The format to use.5
 *5
 *  Returns the number of characters written.5
 */5
size_t5
SStrVPrintf(5
    char *dest,5
    size_t size,5
    const char *format, ...);5
5
5
int STORMAPI SBigDel(void *buffer);5
5
int STORMAPI SBigFromBinary(void *buffer, const void *str, size_t size);5
5
int STORMAPI SBigNew(void **buffer);5
5
int STORMAPI SBigPowMod(void *buffer1, void *buffer2, int a3, int a4);5
5
int STORMAPI SBigToBinaryBuffer(void *buffer, int length, int a3, int a4);5
5
void __stdcall SDrawMessageBox(char *,char *,int);5
void __cdecl SDrawDestroy(void);5
bool __cdecl StormDestroy(void);5
bool __stdcall SFileSetBasePath(char *);5
void __cdecl SDrawRealizePalette(void);5
bool __cdecl SVidPlayContinue(void);5
bool __stdcall SNetGetOwnerTurnsWaiting(int *);5
void * __stdcall SNetUnregisterEventHandler(int,void (__stdcall*)(struct _SNETEVENT *));5
void * __stdcall SNetRegisterEventHandler(int,void (__stdcall*)(struct _SNETEVENT *));5
bool __stdcall SNetSetBasePlayer(int);5
int __stdcall SNetInitializeProvider(unsigned long,struct _SNETPROGRAMDATA *,struct _SNETPLAYERDATA *,struct _SNETUIDATA *,struct _SNETVERSIONDATA *);5
int __stdcall SNetGetProviderCaps(struct _SNETCAPS *);5
int __stdcall SFileSetFilePointer(HANDLE,int,HANDLE,int);5
5
#ifdef __GNUC__5
}5
#endif5
5
#endif5
/*5
 * Diablo(TM)5
 *5
 * Copyright (C) 1996 Blizzard Entertainment5
 * All Rights Reserved.5
 *5
 * DiabloUI.h5
 *   definitions for DiabloUI5
 */5
5
5
#ifdef __GNUC__5
extern "C" {5
#endif5
5
void __cdecl UiDestroy(); // { return; }5
void __stdcall UiTitleDialog(int a1); // { return; }5
void __cdecl UiInitialize(); // { return; }5
void __stdcall UiCopyProtError(int a1); // { return; }5
void __stdcall UiAppActivate(int a1); // { return; }5
int __stdcall UiValidPlayerName(char *a1); // { return 0; }5
int __stdcall UiSelHeroMultDialog(void *fninfo, void *fncreate, void *fnremove, void *fnstats, int *a5, int *a6, char *name); // { return 0; }5
int __stdcall UiSelHeroSingDialog(void *fninfo, void *fncreate, void *fnremove, void *fnstats, int *a5, char *name, int *difficulty); // { return 0; }5
void __stdcall UiCreditsDialog(int a1); // { return; }5
int __stdcall UiMainMenuDialog(char *name, int *a2, void *fnSound, int a4); // { return 0; }5
int __stdcall UiProgressDialog(HWND window, char *msg, int a3, void *fnfunc, int a5); // { return 0; }5
int __cdecl UiProfileGetString(); // { return; }5
void __cdecl UiProfileCallback(); // { return; }5
void __cdecl UiProfileDraw(); // { return; }5
void __cdecl UiCategoryCallback(); // { return; }5
void __cdecl UiGetDataCallback(); // { return; }5
void __cdecl UiAuthCallback(); // { return; }5
void __cdecl UiSoundCallback(); // { return; }5
void __cdecl UiMessageBoxCallback(); // { return; }5
void __cdecl UiDrawDescCallback(); // { return; }5
void __cdecl UiCreateGameCallback(); // { return; }5
void __cdecl UiArtCallback(); // { return; }5
int __stdcall UiSelectGame(int a1, _SNETPROGRAMDATA *client_info, _SNETPLAYERDATA *user_info, _SNETUIDATA *ui_info, _SNETVERSIONDATA *file_info, int *a6); // { return 0; }5
int __stdcall UiSelectProvider(int a1, _SNETPROGRAMDATA *client_info, _SNETPLAYERDATA *user_info, _SNETUIDATA *ui_info, _SNETVERSIONDATA *file_info, int *type); // { return 0; }5
int __stdcall UiCreatePlayerDescription(_uiheroinfo *info, int mode, char *desc); // { return 0; }5
int __stdcall UiSetupPlayerInfo(char *str, _uiheroinfo *info, int mode); // { return 0; }5
5
#ifdef __GNUC__5
}5
#endif5
//HEADER_GOES_HERE5
#ifndef __APPFAT_H__5
#define __APPFAT_H__5
5
extern int appfat_terminated; // weak5
extern char sz_error_buf[256];5
extern int terminating; // weak5
extern int cleanup_thread_id; // weak5
extern char empty_string;5
5
char *__fastcall GetErr(int error_code);5
void __fastcall GetDDErr(int error_code, char *error_buf, int error_buf_len);5
void __fastcall GetDSErr(int error_code, char *error_buf, int error_buf_len);5
char *__cdecl GetLastErr();5
void TermMsg(char *pszFmt, ...);5
void __fastcall MsgBox(char *pszFmt, va_list va);5
void __cdecl FreeDlg();5
void DrawDlg(char *pszFmt, ...);5
void __fastcall DDErrDlg(int error_code, int log_line_nr, char *log_file_path);5
void __fastcall DSErrDlg(int error_code, int log_line_nr, char *log_file_path);5
void __fastcall CenterDlg(HWND hDlg);5
void __fastcall TermDlg(int template_id, int error_code, char *log_file_path, int log_line_nr);5
bool __stdcall FuncDlg(HWND hDlg, UINT uMsg, WPARAM wParam, char *text);5
void __fastcall TextDlg(HWND hDlg, char *text);5
void __fastcall ErrDlg(template_id template_id, int error_code, char *log_file_path, int log_line_nr);5
void __fastcall FileErrDlg(char *error);5
void __fastcall DiskFreeDlg(char *error);5
bool __cdecl InsertCDDlg();5
void __fastcall DirErrDlg(char *error);5
5
#endif /* __APPFAT_H__ */5
//HEADER_GOES_HERE5
#ifndef __AUTOMAP_H__5
#define __AUTOMAP_H__5
5
extern short automaptype[512];5
extern int AMdword_4B7E40; // weak5
extern int AMdword_4B7E44; // weak5
extern bool automapflag; // idb5
extern char AMbyte_4B7E4C[32];5
extern char automapview[40][40];5
extern int AutoMapScale; // idb5
extern int AutoMapXOfs; // weak5
extern int AutoMapYOfs; // weak5
extern int AutoMapPosBits; // weak5
extern int AutoMapXPos; // weak5
extern int AutoMapYPos; // weak5
extern int AMPlayerX; // weak5
extern int AMPlayerY; // weak5
5
void __cdecl InitAutomapOnce();5
void __cdecl InitAutomap();5
void __cdecl StartAutomap();5
void __cdecl AutomapUp();5
void __cdecl AutomapDown();5
void __cdecl AutomapLeft();5
void __cdecl AutomapRight();5
void __cdecl AutomapZoomIn();5
void __cdecl AutomapZoomOut();5
void __cdecl DrawAutomap();5
void __fastcall DrawAutomapType(int screen_x, int screen_y, short automap_type);5
void __cdecl DrawAutomapPlr();5
short __fastcall GetAutomapType(int tx, int ty, bool view);5
void __cdecl DrawAutomapGame();5
void __fastcall SetAutomapView(int x, int y);5
void __cdecl AutomapZoomReset();5
5
#endif /* __AUTOMAP_H__ */5
//HEADER_GOES_HERE5
#ifndef __CAPTURE_H__5
#define __CAPTURE_H__5
5
void __cdecl CaptureScreen();5
bool __fastcall CaptureHdr(HANDLE hFile, short width, int height);5
bool __fastcall CapturePal(HANDLE hFile, PALETTEENTRY *palette);5
bool __fastcall CapturePix(HANDLE hFile, short width, short height, short stride, char *pixels);5
char *__fastcall CaptureEnc(char *src, char *dst, int width);5
HANDLE __fastcall CaptureFile(char *dst_path);5
void __fastcall RedPalette(PALETTEENTRY *pal);5
5
#endif /* __CAPTURE_H__ */5
//HEADER_GOES_HERE5
#ifndef __CODEC_H__5
#define __CODEC_H__5
5
int __fastcall codec_decode(void *pbSrcDst, int size, char *pszPassword);5
void __fastcall codec_init_key(int unused, char *pszPassword);5
int __fastcall codec_get_encoded_len(int dwSrcBytes);5
void __fastcall codec_encode(void *pbSrcDst, int size, int size_64, char *pszPassword);5
5
#endif /* __CODEC_H__ */5
//HEADER_GOES_HERE5
#ifndef __CONTROL_H__5
#define __CONTROL_H__5
5
extern char sgbNextTalkSave; // weak5
extern char sgbTalkSavePos; // weak5
extern void *pDurIcons;5
extern void *pChrButtons;5
extern int drawhpflag; // idb5
extern int dropGoldFlag; // weak5
extern int panbtn[8];5
extern int chrbtn[4];5
extern void *pMultiBtns;5
extern void *pPanelButtons;5
extern void *pChrPanel;5
extern int lvlbtndown; // weak5
extern char sgszTalkSave[8][80];5
extern int dropGoldValue; // idb5
extern int drawmanaflag; // idb5
extern int chrbtnactive; // weak5
extern char sgszTalkMsg[80];5
extern void *pPanelText;5
extern int frame_4B8800; // idb5
extern void *pLifeBuff;5
extern void *pBtmBuff;5
extern void *pTalkBtns;5
extern int pstrjust[4];5
extern int pnumlines; // idb5
extern int pinfoflag; // weak5
extern int talkbtndown[3];5
extern int pSpell; // weak5
extern void *pManaBuff;5
extern int infoclr; // weak5
extern int sgbPlrTalkTbl; // weak // should be char [4]5
extern void *pGBoxBuff;5
extern void *pSBkBtnCel;5
extern char tempstr[260];5
extern int sbooktab; // weak5
extern int pSplType; // weak5
extern int frame; // idb5
extern int initialDropGoldIndex; // idb5
extern int talkflag; // weak5
extern void *pSBkIconCels;5
extern int sbookflag; // weak5
extern int chrflag;5
extern int drawbtnflag; // idb5
extern void *pSpellBkCel;5
extern char infostr[260];5
extern int numpanbtns; // weak5
extern void *pStatusPanel;5
extern char panelstr[256];5
extern int panelflag; // weak5
extern char byte_4B8B88[256];5
extern int initialDropGoldValue; // idb5
extern void *pSpellCels;5
extern int panbtndown; // weak5
extern void *pTalkPanel; // idb5
extern int spselflag; // weak5
5
void __fastcall DrawSpellCel(int xp, int yp, char *Trans, int nCel, int w);5
void __fastcall SetSpellTrans(char t);5
void __cdecl DrawSpell();5
void __cdecl DrawSpellList();5
void __cdecl SetSpell();5
void __fastcall SetSpeedSpell(int slot);5
void __fastcall ToggleSpell(int slot);5
void __fastcall CPrintString(int No, unsigned char pszStr, int Just);5
void __fastcall AddPanelString(char *str, int just);5
void __cdecl ClearPanel();5
void __fastcall DrawPanelBox(int x, int y, int w, int h, int sx, int sy);5
void __cdecl InitPanelStr();5
void __fastcall SetFlaskHeight(char *buf, int min, int max, int c, int r);5
void __fastcall DrawFlask(void *a1, int a2, int a3, void *a4, int a5, int a6);5
void __cdecl DrawLifeFlask();5
void __cdecl UpdateLifeFlask();5
void __cdecl DrawManaFlask();5
void __cdecl control_update_life_mana();5
void __cdecl UpdateManaFlask();5
void __cdecl InitControlPan();5
void __cdecl ClearCtrlPan();5
void __cdecl DrawCtrlPan();5
void __cdecl DoSpeedBook();5
void __cdecl DoPanBtn();5
void __fastcall control_set_button_down(int btn_id);5
void __cdecl control_check_btn_press();5
void __cdecl DoAutoMap();5
void __cdecl CheckPanelInfo();5
void __cdecl CheckBtnUp();5
void __cdecl FreeControlPan();5
int __fastcall control_WriteStringToBuffer(char *str);5
void __cdecl DrawInfoBox();5
void __fastcall control_print_info_str(int y, char *str, bool center, int lines);5
void __fastcall PrintGameStr(int x, int y, char *str, int color);5
void __cdecl DrawChr();5
void __fastcall ADD_PlrStringXY(int x, int y, int width, char *pszStr, char col);5
void __fastcall MY_PlrStringXY(int x, int y, int width, char *pszStr, char col, int base);5
void __cdecl CheckLvlBtn();5
void __cdecl ReleaseLvlBtn();5
void __cdecl DrawLevelUpIcon();5
void __cdecl CheckChrBtns();5
void __cdecl ReleaseChrBtns();5
void __cdecl DrawDurIcon();5
int __fastcall DrawDurIcon4Item(ItemStruct *pItem, int x, int c);5
void __cdecl RedBack();5
int __fastcall GetSBookTrans(int ii, unsigned char townok);5
void __cdecl DrawSpellBook();5
void __fastcall PrintSBookStr(int x, int y, bool cjustflag, char *pszStr, int bright);5
void __cdecl CheckSBook();5
char *__fastcall get_pieces_str(int nGold);5
void __fastcall DrawGoldSplit(int amount);5
void __fastcall control_drop_gold(int vkey);5
void __fastcall control_remove_gold(int pnum, int gold_index);5
void __fastcall control_set_gold_curs(int pnum);5
void __cdecl DrawTalkPan();5
char *__fastcall control_print_talk_msg(char *msg, int x, int y, int *a4, int just);5
int __cdecl control_check_talk_btn();5
void __cdecl control_release_talk_btn();5
void __cdecl control_reset_talk_msg();5
void __cdecl control_type_message();5
void __cdecl control_reset_talk();5
int __fastcall control_talk_last_key(int a1);5
int __fastcall control_presskeys(int a1);5
void __cdecl control_press_enter();5
void __fastcall control_up_down(char a1);5
5
/* data */5
extern unsigned char fontframe[127];5
extern unsigned char fontkern[68];5
extern int lineoffset[25];5
extern unsigned char fontidx[256];5
5
/* rdata */5
5
extern unsigned char SpellITbl[37];5
extern int PanBtnPos[8][5];5
extern char *PanBtnHotKey[8];5
extern char *PanBtnStr[8];5
extern RECT32 attribute_inc_rects[4];5
extern int SpellPages[6][7];5
5
#endif /* __CONTROL_H__ */5
//HEADER_GOES_HERE5
#ifndef __CURSOR_H__5
#define __CURSOR_H__5
5
extern int cursH; // weak5
extern int icursH28; // idb5
extern int cursW; // idb5
extern int pcursmonst; // idb5
extern int icursW28; // idb5
extern void *pCursCels;5
extern int icursH; // weak5
extern char pcursinvitem; // weak5
extern int icursW; // weak5
extern char pcursitem; // weak5
extern char pcursobj; // weak5
extern char pcursplr; // weak5
extern int cursmx;5
extern int cursmy;5
extern int dword_4B8CCC; // weak5
extern int pcurs; // idb5
5
void __cdecl InitCursor();5
void __cdecl FreeCursor();5
void __fastcall SetICursor(int i);5
void __fastcall SetCursor(int i);5
void __fastcall NewCursor(int i);5
void __cdecl InitLevelCursor();5
void __cdecl CheckTown();5
void __cdecl CheckRportal();5
void __cdecl CheckCursMove();5
5
/* data */5
extern int InvItemWidth[180];5
extern int InvItemHeight[180];5
5
#endif /* __CURSOR_H__ */5
//HEADER_GOES_HERE5
#ifndef __DEAD_H__5
#define __DEAD_H__5
5
extern int spurtndx; // weak5
extern DeadStruct dead[31];5
extern int stonendx;5
5
void __cdecl InitDead();5
void __fastcall AddDead(int dx, int dy, char dv, int ddir);5
void __cdecl SetDead();5
5
#endif /* __DEAD_H__ */5
//HEADER_GOES_HERE5
#ifndef __DEBUG_H__5
#define __DEBUG_H__5
5
extern void *pSquareCel;5
extern char dMonsDbg[17][112][112];5
extern char dFlagDbg[17][112][112];5
5
void __cdecl LoadDebugGFX();5
void __cdecl FreeDebugGFX();5
void __cdecl CheckDungeonClear();5
#ifdef _DEBUG5
void __cdecl GiveGoldCheat();5
void __cdecl StoresCheat();5
void __cdecl TakeGoldCheat();5
void __cdecl MaxSpellsCheat();5
void __fastcall PrintDebugPlayer(bool bNextPlayer);5
void __cdecl PrintDebugQuest();5
void __fastcall PrintDebugMonster(int m);5
void __cdecl GetDebugMonster();5
void __cdecl NextDebugMonster();5
#endif5
5
#endif /* __DEBUG_H__ */5
//HEADER_GOES_HERE5
#ifndef __DIABLO_H__5
#define __DIABLO_H__5
5
extern int diablo_cpp_init_value; // weak5
extern HWND ghMainWnd;5
extern int glMid1Seed[17];5
extern int glMid2Seed[17];5
extern int gnLevelTypeTbl[17];5
extern int MouseY; // idb5
extern int MouseX; // idb5
extern bool gbGameLoopStartup; // idb5
extern int glSeedTbl[17];5
extern int gbRunGame; // weak5
extern int glMid3Seed[17];5
extern int gbRunGameResult; // weak5
extern int zoomflag; // weak5
extern int gbProcessPlayers; // weak5
extern int glEndSeed[17];5
extern int dword_5256E8; // weak5
extern HINSTANCE ghInst; // idb5
extern int DebugMonsters[10];5
extern char cineflag; // weak5
extern int drawpanflag; // weak5
extern int visiondebug; // weak5
extern int scrollflag; /* unused */5
extern int light4flag; // weak5
extern int leveldebug; // weak5
extern int monstdebug; // weak5
extern int trigdebug; /* unused */5
extern int setseed; // weak5
extern int debugmonsttypes; // weak5
extern int PauseMode; // weak5
extern int sgnTimeoutCurs;5
extern char sgbMouseDown; // weak5
extern int color_cycle_timer; // weak5
5
void __cdecl diablo_cpp_init();5
void __cdecl FreeGameMem();5
int __fastcall diablo_init_menu(int a1, int bSinglePlayer);5
void __fastcall run_game_loop(int uMsg);5
void __fastcall start_game(int uMsg);5
void __cdecl free_game();5
bool __cdecl diablo_get_not_running();5
int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);5
void __fastcall diablo_parse_flags(char *args);5
void __cdecl diablo_init_screen();5
HWND __fastcall diablo_find_window(LPCSTR lpClassName);5
void __fastcall diablo_reload_process(HMODULE hModule);5
int __cdecl PressEscKey();5
LRESULT __stdcall DisableInputWndProc(HWND hWnd, int uMsg, int wParam, int lParam);5
int __stdcall GM_Game(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);5
bool __fastcall LeftMouseDown(int a1);5
bool __cdecl TryIconCurs();5
void __cdecl LeftMouseUp();5
void __cdecl RightMouseDown();5
void __fastcall j_gmenu_on_mouse_move(LPARAM lParam);5
bool __fastcall PressSysKey(int wParam);5
void __fastcall diablo_hotkey_msg(int dwMsg);5
void __fastcall ReleaseKey(int vkey);5
void __fastcall PressKey(int vkey);5
void __cdecl diablo_pause_game();5
void __fastcall PressChar(int vkey);5
void __cdecl LoadLvlGFX();5
void __cdecl LoadAllGFX();5
void __fastcall CreateLevel(int lvldir);5
void __fastcall LoadGameLevel(bool firstflag, int lvldir);5
void __fastcall game_loop(bool startup);5
void __cdecl game_logic();5
void __fastcall timeout_cursor(bool timeout);5
void __cdecl diablo_color_cyc_logic();5
5
/* data */5
5
extern int diablo_inf; // weak5
5
/* rdata */5
5
extern int fullscreen; // weak5
#ifdef _DEBUG5
extern int showintrodebug;5
extern int questdebug;5
extern int debug_mode_key_s;5
extern int debug_mode_key_w;5
extern int debug_mode_key_inverted_v;5
extern int debug_mode_dollar_sign;5
extern int debug_mode_key_d;5
extern int debug_mode_key_i;5
extern int dbgplr;5
extern int dbgqst;5
extern int dbgmon;5
extern int frameflag;5
extern int frameend;5
extern int framerate;5
extern int framestart;5
#endif5
extern int FriendlyMode; // weak5
extern char *spszMsgTbl[4]; // weak5
extern char *spszMsgKeyTbl[4]; // weak5
5
#endif /* __DIABLO_H__ */5
//HEADER_GOES_HERE5
#ifndef __DOOM_H__5
#define __DOOM_H__5
5
extern int doom_quest_time; // weak5
extern int doom_stars_drawn; // weak5
extern void *pDoomCel;5
extern int doomflag; // weak5
extern int DoomQuestState; // idb5
5
int __cdecl doom_get_frame_from_time();5
void __cdecl doom_alloc_cel();5
void __cdecl doom_cleanup();5
void __cdecl doom_load_graphics();5
void __cdecl doom_init();5
void __cdecl doom_close();5
void __cdecl doom_draw();5
5
#endif /* __DOOM_H__ */5
//HEADER_GOES_HERE5
#ifndef __DRLG_L1_H__5
#define __DRLG_L1_H__5
5
extern char L5dungeon[80][80];5
extern char mydflags[40][40];5
extern int setloadflag; // weak5
extern int HR1;5
extern int HR2;5
extern int HR3;5
extern int VR1;5
extern int VR2;5
extern int VR3;5
extern void *pSetPiece; // idb5
5
void __cdecl DRLG_Init_Globals();5
void __fastcall LoadL1Dungeon(char *sFileName, int vx, int vy);5
void __cdecl DRLG_L1Floor();5
void __cdecl DRLG_L1Pass3();5
void __cdecl DRLG_InitL1Vals();5
void __fastcall LoadPreL1Dungeon(char *sFileName, int vx, int vy);5
void __fastcall CreateL5Dungeon(int rseed, int entry);5
void __cdecl DRLG_LoadL1SP();5
void __cdecl DRLG_FreeL1SP();5
void __fastcall DRLG_L5(int entry);5
void __fastcall DRLG_PlaceDoor(int x, int y);5
void __cdecl DRLG_L1Shadows();5
int __fastcall DRLG_PlaceMiniSet(unsigned char *miniset, int tmin, int tmax, int cx, int cy, bool setview, int noquad, int ldir);5
void __cdecl InitL5Dungeon();5
void __cdecl L5ClearFlags();5
void __cdecl L5firstRoom();5
void __fastcall L5drawRoom(int x, int y, int w, int h);5
void __fastcall L5roomGen(int x, int y, int w, int h, bool dir);5
bool __fastcall L5checkRoom(int x, int y, int width, int height);5
int __cdecl L5GetArea();5
void __cdecl L5makeDungeon();5
void __cdecl L5makeDmt();5
void __cdecl L5AddWall();5
int __fastcall L5HWallOk(int i, int j);5
int __fastcall L5VWallOk(int i, int j);5
void __fastcall L5HorizWall(int i, int j, char p, int dx);5
void __fastcall L5VertWall(int i, int j, char p, int dy);5
void __cdecl L5tileFix();5
void __cdecl DRLG_L5Subs();5
void __cdecl L5FillChambers();5
void __fastcall DRLG_L5GChamber(int sx, int sy, bool topflag, bool bottomflag, bool leftflag, bool rightflag);5
void __fastcall DRLG_L5GHall(int x1, int y1, int x2, int y2);5
void __fastcall DRLG_L5SetRoom(int rx1, int ry1);5
void __cdecl DRLG_L5FloodTVal();5
void __fastcall DRLG_L5FTVR(int i, int j, int x, int y, int d);5
void __cdecl DRLG_L5TransFix();5
void __cdecl DRLG_L5DirtFix();5
void __cdecl DRLG_L5CornerFix();5
5
/* data */5
extern ShadowStruct SPATS[37];5
extern unsigned char BSTYPES[206];5
extern unsigned char L5BTYPES[206];5
extern unsigned char STAIRSUP[];5
extern unsigned char L5STAIRSUP[];5
extern unsigned char STAIRSDOWN[];5
extern unsigned char LAMPS[];5
extern unsigned char PWATERIN[];5
5
/* rdata */5
extern unsigned char L5ConvTbl[16];5
5
#endif /* __DRLG_L1_H__ */5
//HEADER_GOES_HERE5
#ifndef __DRLG_L2_H__5
#define __DRLG_L2_H__5
5
extern int nSx1;5
extern int nSx2; // weak5
extern int nSy1;5
extern int nSy2; // weak5
extern int nRoomCnt;5
extern char predungeon[40][40];5
extern ROOMNODE RoomList[81];5
extern HALLNODE *pHallList;5
5
void __cdecl InitDungeon();5
void __cdecl L2LockoutFix();5
void __cdecl L2DoorFix();5
void __fastcall LoadL2Dungeon(char *sFileName, int vx, int vy);5
void __cdecl DRLG_L2Pass3();5
void __fastcall LoadPreL2Dungeon(char *sFileName, int vx, int vy);5
void __fastcall CreateL2Dungeon(int rseed, int entry);5
void __cdecl DRLG_LoadL2SP();5
void __cdecl DRLG_FreeL2SP();5
void __fastcall DRLG_L2(int entry);5
bool __fastcall DRLG_L2PlaceMiniSet(char *miniset, int tmin, int tmax, int cx, int cy, bool setview, int ldir);5
void __fastcall DRLG_L2PlaceRndSet(char *miniset, int rndper);5
void __cdecl DRLG_L2Subs();5
void __cdecl DRLG_L2Shadows();5
void __fastcall DRLG_L2SetRoom(int rx1, int ry1);5
void __cdecl L2TileFix();5
bool __cdecl CreateDungeon();5
void __fastcall CreateRoom(int nX1, int nY1, int nX2, int nY2, int nRDest, int nHDir, int ForceHW, int nH, int nW);5
void __fastcall DefineRoom(int nX1, int nY1, int nX2, int nY2, int ForceHW);5
void __fastcall AddHall(int nX1, int nY1, int nX2, int nY2, int nHd);5
void __fastcall GetHall(int *nX1, int *nY1, int *nX2, int *nY2, int *nHd);5
void __fastcall ConnectHall(int nX1, int nY1, int nX2, int nY2, int nHd);5
void __fastcall CreateDoorType(int nX, int nY);5
void __fastcall PlaceHallExt(int nX, int nY);5
void __fastcall DoPatternCheck(int i, int j);5
bool __cdecl DL2_FillVoids();5
bool __fastcall DL2_Cont(bool x1f, bool y1f, bool x2f, bool y2f);5
int __cdecl DL2_NumNoChar();5
void __fastcall DL2_DrawRoom(int x1, int y1, int x2, int y2);5
void __fastcall DL2_KnockWalls(int x1, int y1, int x2, int y2);5
void __cdecl DRLG_L2FloodTVal();5
void __fastcall DRLG_L2FTVR(int i, int j, int x, int y, int d);5
void __cdecl DRLG_L2TransFix();5
void __cdecl L2DirtFix();5
void __cdecl DRLG_InitL2Vals();5
5
/* rdata */5
extern int Area_Min; // weak5
extern int Room_Max; // weak5
extern int Room_Min; // weak5
extern int Dir_Xadd[5];5
extern int Dir_Yadd[5];5
extern ShadowStruct SPATSL2[2];5
//short word_48489A;5
extern unsigned char BTYPESL2[161];5
extern unsigned char BSTYPESL2[161];5
extern unsigned char VARCH1[];5
extern unsigned char VARCH2[];5
extern unsigned char VARCH3[];5
extern unsigned char VARCH4[];5
extern unsigned char VARCH5[];5
extern unsigned char VARCH6[];5
extern unsigned char VARCH7[];5
extern unsigned char VARCH8[];5
extern unsigned char VARCH9[];5
extern unsigned char VARCH10[];5
extern unsigned char VARCH11[];5
extern unsigned char VARCH12[];5
extern unsigned char VARCH13[];5
extern unsigned char VARCH14[];5
extern unsigned char VARCH15[];5
extern unsigned char VARCH16[];5
extern unsigned char VARCH17[];5
extern unsigned char VARCH18[];5
extern unsigned char VARCH19[];5
extern unsigned char VARCH20[];5
extern unsigned char VARCH21[];5
extern unsigned char VARCH22[];5
extern unsigned char VARCH23[];5
extern unsigned char VARCH24[];5
extern unsigned char VARCH25[];5
extern unsigned char VARCH26[];5
extern unsigned char VARCH27[];5
extern unsigned char VARCH28[];5
extern unsigned char VARCH29[];5
extern unsigned char VARCH30[];5
extern unsigned char VARCH31[];5
extern unsigned char VARCH32[];5
extern unsigned char VARCH33[];5
extern unsigned char VARCH34[];5
extern unsigned char VARCH35[];5
extern unsigned char VARCH36[];5
extern unsigned char VARCH37[];5
extern unsigned char VARCH38[];5
extern unsigned char VARCH39[];5
extern unsigned char VARCH40[];5
extern unsigned char HARCH1[];5
extern unsigned char HARCH2[];5
extern unsigned char HARCH3[];5
extern unsigned char HARCH4[];5
extern unsigned char HARCH5[];5
extern unsigned char HARCH6[];5
extern unsigned char HARCH7[];5
extern unsigned char HARCH8[];5
extern unsigned char HARCH9[];5
extern unsigned char HARCH10[];5
extern unsigned char HARCH11[];5
extern unsigned char HARCH12[];5
extern unsigned char HARCH13[];5
extern unsigned char HARCH14[];5
extern unsigned char HARCH15[];5
extern unsigned char HARCH16[];5
extern unsigned char HARCH17[];5
extern unsigned char HARCH18[];5
extern unsigned char HARCH19[];5
extern unsigned char HARCH20[];5
extern unsigned char HARCH21[];5
extern unsigned char HARCH22[];5
extern unsigned char HARCH23[];5
extern unsigned char HARCH24[];5
extern unsigned char HARCH25[];5
extern unsigned char HARCH26[];5
extern unsigned char HARCH27[];5
extern unsigned char HARCH28[];5
extern unsigned char HARCH29[];5
extern unsigned char HARCH30[];5
extern unsigned char HARCH31[];5
extern unsigned char HARCH32[];5
extern unsigned char HARCH33[];5
extern unsigned char HARCH34[];5
extern unsigned char HARCH35[];5
extern unsigned char HARCH36[];5
extern unsigned char HARCH37[];5
extern unsigned char HARCH38[];5
extern unsigned char HARCH39[];5
extern unsigned char HARCH40[];5
extern unsigned char USTAIRS[];5
extern unsigned char DSTAIRS[];5
extern unsigned char WARPSTAIRS[];5
extern unsigned char CRUSHCOL[];5
extern unsigned char BIG1[];5
extern unsigned char BIG2[];5
extern unsigned char BIG3[];5
extern unsigned char BIG4[];5
extern unsigned char BIG5[];5
extern unsigned char BIG6[];5
extern unsigned char BIG7[];5
extern unsigned char BIG8[];5
extern unsigned char BIG9[];5
extern unsigned char BIG10[];5
extern unsigned char RUINS1[];5
extern unsigned char RUINS2[];5
extern unsigned char RUINS3[];5
extern unsigned char RUINS4[];5
extern unsigned char RUINS5[];5
extern unsigned char RUINS6[];5
extern unsigned char RUINS7[];5
extern unsigned char PANCREAS1[];5
extern unsigned char PANCREAS2[];5
extern unsigned char CTRDOOR1[];5
extern unsigned char CTRDOOR2[];5
extern unsigned char CTRDOOR3[];5
extern unsigned char CTRDOOR4[];5
extern unsigned char CTRDOOR5[];5
extern unsigned char CTRDOOR6[];5
extern unsigned char CTRDOOR7[];5
extern unsigned char CTRDOOR8[];5
extern int Patterns[100][10];5
5
#endif /* __DRLG_L2_H__ */5
//HEADER_GOES_HERE5
#ifndef __DRLG_L3_H__5
#define __DRLG_L3_H__5
5
extern char lavapool; // weak5
extern int abyssx; // weak5
extern int lockoutcnt; // weak5
extern char lockout[40][40];5
5
void __cdecl AddFenceDoors();5
void __cdecl FenceDoorFix();5
int __cdecl DRLG_L3Anvil();5
void __cdecl FixL3Warp();5
void __cdecl FixL3HallofHeroes();5
void __fastcall DRLG_L3LockRec(int x, int y);5
bool __cdecl DRLG_L3Lockout();5
void __fastcall CreateL3Dungeon(int rseed, int entry);5
void __fastcall DRLG_L3(int entry);5
void __cdecl InitL3Dungeon();5
int __fastcall DRLG_L3FillRoom(int x1, int y1, int x2, int y2);5
void __fastcall DRLG_L3CreateBlock(int x, int y, int obs, int dir);5
void __fastcall DRLG_L3FloorArea(int x1, int y1, int x2, int y2);5
void __cdecl DRLG_L3FillDiags();5
void __cdecl DRLG_L3FillSingles();5
void __cdecl DRLG_L3FillStraights();5
void __cdecl DRLG_L3Edges();5
int __cdecl DRLG_L3GetFloorArea();5
void __cdecl DRLG_L3MakeMegas();5
void __cdecl DRLG_L3River();5
void __cdecl DRLG_L3Pool();5
int __fastcall DRLG_L3SpawnEdge(int x, int y, int *totarea);5
int __fastcall DRLG_L3Spawn(int x, int y, int *totarea);5
void __cdecl DRLG_L3PoolFix();5
int __fastcall DRLG_L3PlaceMiniSet(unsigned char *miniset, int tmin, int tmax, int cx, int cy, bool setview, int ldir);5
void __fastcall DRLG_L3PlaceRndSet(unsigned char *miniset, int rndper);5
void __cdecl DRLG_L3Wood();5
bool __fastcall WoodVertU(int i, int y);5
bool __fastcall WoodVertD(int i, int y);5
bool __fastcall WoodHorizL(int x, int j);5
bool __fastcall WoodHorizR(int x, int j);5
void __cdecl DRLG_L3Pass3();5
void __fastcall LoadL3Dungeon(char *sFileName, int vx, int vy);5
void __fastcall LoadPreL3Dungeon(char *sFileName, int vx, int vy);5
5
/* data */5
extern unsigned char L3ConvTbl[16];5
extern unsigned char L3UP[20];5
extern unsigned char L3DOWN[20];5
extern unsigned char L3HOLDWARP[20];5
extern unsigned char L3TITE1[34];5
extern unsigned char L3TITE2[34];5
extern unsigned char L3TITE3[34];5
extern unsigned char L3TITE6[42];5
extern unsigned char L3TITE7[42];5
extern unsigned char L3TITE8[20];5
extern unsigned char L3TITE9[20];5
extern unsigned char L3TITE10[20];5
extern unsigned char L3TITE11[20];5
extern unsigned char L3TITE12[6];5
extern unsigned char L3TITE13[6];5
extern unsigned char L3CREV1[6];5
extern unsigned char L3CREV2[6];5
extern unsigned char L3CREV3[6];5
extern unsigned char L3CREV4[6];5
extern unsigned char L3CREV5[6];5
extern unsigned char L3CREV6[6];5
extern unsigned char L3CREV7[6];5
extern unsigned char L3CREV8[6];5
extern unsigned char L3CREV9[6];5
extern unsigned char L3CREV10[6];5
extern unsigned char L3CREV11[6];5
extern unsigned char L3ISLE1[14];5
extern unsigned char L3ISLE2[14];5
extern unsigned char L3ISLE3[14];5
extern unsigned char L3ISLE4[14];5
extern unsigned char L3ISLE5[10];5
extern unsigned char L3XTRA1[4];5
extern unsigned char L3XTRA2[4];5
extern unsigned char L3XTRA3[4];5
extern unsigned char L3XTRA4[4];5
extern unsigned char L3XTRA5[4];5
extern unsigned char L3ANVIL[244];5
extern unsigned char L3SpawnTbl1[15]; /* local spawntable? */5
extern unsigned char L3SpawnTbl2[15]; /* local spawntable? */5
extern unsigned char L3PoolSub[15]; /* local poolsub? */5
5
#endif /* __DRLG_L3_H__ */5
//HEADER_GOES_HERE5
#ifndef __DRLG_L4_H__5
#define __DRLG_L4_H__5
5
extern int diabquad1x; // weak5
extern int diabquad1y; // weak5
extern int diabquad3x; // idb5
extern int diabquad3y; // idb5
extern int diabquad2x; // idb5
extern int diabquad2y; // idb5
extern int diabquad4x; // idb5
extern int diabquad4y; // idb5
extern int hallok[20];5
extern int l4holdx; // weak5
extern int l4holdy; // weak5
extern int SP4x1; // idb5
extern int SP4x2; // weak5
extern int SP4y1; // idb5
extern int SP4y2; // weak5
extern char L4dungeon[80][80];5
extern char dung[20][20];5
//int dword_52A4DC; // weak5
5
void __cdecl DRLG_LoadL4SP();5
void __cdecl DRLG_FreeL4SP();5
void __fastcall DRLG_L4SetSPRoom(int rx1, int ry1);5
void __cdecl L4SaveQuads();5
void __fastcall DRLG_L4SetRoom(unsigned char *pSetPiece, int rx1, int ry1);5
void __fastcall DRLG_LoadDiabQuads(bool preflag);5
bool __fastcall IsDURWall(char d);5
bool __fastcall IsDLLWall(char dd);5
void __cdecl L4FixRim();5
void __cdecl DRLG_L4GeneralFix();5
void __fastcall CreateL4Dungeon(int rseed, int entry);5
void __fastcall DRLG_L4(int entry);5
void __cdecl DRLG_L4Shadows();5
void __cdecl InitL4Dungeon();5
void __cdecl L4makeDmt();5
void __cdecl L4AddWall();5
int __fastcall L4HWallOk(int i, int j);5
int __fastcall L4VWallOk(int i, int j);5
void __fastcall L4HorizWall(int i, int j, int dx);5
void __fastcall L4VertWall(int i, int j, int dy);5
void __cdecl L4tileFix();5
void __cdecl DRLG_L4Subs();5
void __cdecl L4makeDungeon();5
void __cdecl uShape();5
int __cdecl GetArea();5
void __cdecl L4firstRoom();5
void __fastcall L4drawRoom(int x, int y, int width, int height);5
void __fastcall L4roomGen(int x, int y, int w, int h, int dir);5
bool __fastcall L4checkRoom(int x, int y, int width, int height);5
bool __fastcall DRLG_L4PlaceMiniSet(unsigned char *miniset, int tmin, int tmax, int cx, int cy, int setview, int ldir);5
void __cdecl DRLG_L4FloodTVal();5
void __fastcall DRLG_L4FTVR(int i, int j, int x, int y, int d);5
void __cdecl DRLG_L4TransFix();5
void __cdecl DRLG_L4Corners();5
void __cdecl DRLG_L4Pass3();5
5
/* data */5
extern unsigned char L4ConvTbl[16];5
extern unsigned char L4USTAIRS[42];5
extern unsigned char L4TWARP[42];5
extern unsigned char L4DSTAIRS[52];5
extern unsigned char L4PENTA[52];5
extern unsigned char L4PENTA2[52];5
extern unsigned char L4BTYPES[140];5
5
#endif /* __DRLG_L4_H__ */5
//HEADER_GOES_HERE5
#ifndef __DTHREAD_H__5
#define __DTHREAD_H__5
5
extern int dthread_cpp_init_value; // weak5
extern unsigned int glpDThreadId; // idb5
extern TMegaPkt *sgpInfoHead; /* may not be right struct */5
extern char byte_52A508; // weak5
extern HANDLE sghWorkToDoEvent; // idb5
5
void __cdecl dthread_cpp_init_1();5
void __cdecl dthread_cpp_init_2();5
void __cdecl dthread_init_mutex();5
void __cdecl dthread_cleanup_mutex_atexit();5
void __cdecl dthread_cleanup_mutex();5
void __fastcall dthread_remove_player(int pnum);5
void __fastcall dthread_send_delta(int pnum, int cmd, void *pbSrc, int dwLen);5
void __cdecl dthread_start();5
unsigned int __stdcall dthread_handler(void *a1);5
void __cdecl dthread_cleanup();5
5
/* data */5
extern int dthread_inf; // weak5
5
#endif /* __DTHREAD_H__ */5
//HEADER_GOES_HERE5
#ifndef __DX_H__5
#define __DX_H__5
5
extern void *sgpBackBuf;5
extern int dx_cpp_init_value; // weak5
extern IDirectDraw *lpDDInterface;5
extern IDirectDrawPalette *lpDDPalette; // idb5
extern int sgdwLockCount;5
extern Screen *gpBuffer;5
extern IDirectDrawSurface *lpDDSBackBuf;5
extern IDirectDrawSurface *lpDDSPrimary;5
extern char gbBackBuf; // weak5
extern char gbEmulate; // weak5
extern HMODULE ghDiabMod; // idb5
5
void __cdecl dx_cpp_init_1();5
void __cdecl dx_cpp_init_2();5
void __cdecl dx_init_mutex();5
void __cdecl dx_cleanup_mutex_atexit();5
void __cdecl dx_cleanup_mutex();5
void __fastcall dx_init(HWND hWnd);5
void __cdecl dx_create_back_buffer();5
void __cdecl dx_create_primary_surface();5
HRESULT __fastcall dx_DirectDrawCreate(GUID *guid, IDirectDraw **DD, void *unknown);5
void __cdecl j_dx_lock_mutex();5
void __cdecl dx_lock_mutex();5
void __cdecl j_dx_unlock_mutex();5
void __cdecl dx_unlock_mutex();5
void __cdecl dx_cleanup();5
void __cdecl dx_reinit();5
void __cdecl j_dx_reinit();5
5
/* data */5
5
extern int dx_inf; // weak5
5
#endif /* __DX_H__ */5
//HEADER_GOES_HERE5
#ifndef __EFFECTS_H__5
#define __EFFECTS_H__5
5
extern int effects_cpp_init_value; // weak5
extern int sfxdelay; // weak5
extern int sfxdnum;5
extern void *sfx_stream;5
extern TSFX *sfx_data_cur;5
5
void __cdecl effects_cpp_init();5
bool __fastcall effect_is_playing(int nSFX);5
void __cdecl sfx_stop();5
void __fastcall InitMonsterSND(int monst);5
void __cdecl FreeEffects();5
void __fastcall PlayEffect(int i, int mode);5
int __fastcall calc_snd_position(int x, int y, int *plVolume, int *plPan);5
void __fastcall PlaySFX(int psfx);5
void __fastcall PlaySFX_priv(TSFX *pSFX, char loc, int x, int y);5
void __fastcall stream_play(TSFX *pSFX, int lVolume, int lPan);5
int __fastcall RndSFX(int psfx);5
void __fastcall PlaySfxLoc(int psfx, int x, int y);5
void __cdecl FreeMonsterSnd();5
void __cdecl sound_stop();5
void __cdecl sound_update();5
void __cdecl effects_cleanup_sfx();5
void __cdecl stream_update();5
void __fastcall priv_sound_init(int bLoadMask);5
void __cdecl sound_init();5
void __stdcall effects_play_sound(char *snd_file);5
5
/* data */5
5
extern int effects_inf; // weak5
extern char monster_action_sounds[]; // idb5
5
/* rdata */5
5
extern TSFX sgSFX[858];5
5
#endif /* __EFFECTS_H__ */5
//HEADER_GOES_HERE5
#ifndef __ENCRYPT_H__5
#define __ENCRYPT_H__5
5
extern int encrypt_table[1280];5
//int encrypt_52B564[257];5
5
void __fastcall encrypt_decrypt_block(void *block, int size, int key);5
void __fastcall encrypt_encrypt_block(void *block, int size, int key);5
int __fastcall encrypt_hash(char *s, int type);5
void __cdecl encrypt_init_lookup_table();5
int __fastcall encrypt_compress(void *buf, int size);5
unsigned int __cdecl encrypt_pkware_read(char *buf, unsigned int *size, void *param);5
void __cdecl encrypt_pkware_write(char *buf, unsigned int *size, void *param);5
void __fastcall encrypt_decompress(void *param, int recv_size, int dwMaxBytes);5
5
#endif /* __ENCRYPT_H__ */5
//HEADER_GOES_HERE5
#ifndef __ENGINE_H__5
#define __ENGINE_H__5
5
//offset 05
//pCelBuff->pFrameTable[0]5
5
extern int engine_cpp_init_value; // weak5
extern char byte_52B96C; // automap pixel color 8-bit (palette entry)5
extern int dword_52B970; // bool flip - if y < x5
extern int orgseed; // weak5
extern int sgnWidth;5
extern int sglGameSeed; // weak5
extern int SeedCount; // weak5
extern int dword_52B99C; // bool valid - if x/y are in bounds5
5
void __cdecl engine_cpp_init_1();5
void __fastcall CelDrawDatOnly(char *pDecodeTo, char *pRLEBytes, int dwRLESize, int dwRLEWdt);5
void __fastcall CelDecodeOnly(int screen_x, int screen_y, void *pCelBuff, int frame, int frame_width);5
void __fastcall CelDecDatOnly(char *pBuff, char *pCelBuff, int frame, int frame_width);5
void __fastcall CelDrawHdrOnly(int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int always_0, int direction);5
void __fastcall CelDecodeHdrOnly(char *pBuff, char *pCelBuff, int frame, int frame_width, int always_0, int direction);5
void __fastcall CelDecDatLightOnly(char *pDecodeTo, char *pRLEBytes, int frame_content_size, int frame_width);5
void __fastcall CelDecDatLightEntry(int a1, char *a2, char *a3, char *v6);5
void __fastcall CelDecDatLightTrans(char *pDecodeTo, char *pRLEBytes, int frame_content_size, int frame_width);5
void __fastcall CelDecodeLightOnly(int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width);5
void __fastcall CelDecodeHdrLightOnly(int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int always_0, int direction);5
void __fastcall CelDecodeHdrLightTrans(char *pBuff, char *pCelBuff, int frame, int frame_width, int always_0, int direction);5
void __fastcall CelDrawHdrLightRed(int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int always_0, int direction, char always_1);5
void __fastcall Cel2DecDatOnly(char *pDecodeTo, char *pRLEBytes, int frame_content_size, int frame_width);5
void __fastcall Cel2DrawHdrOnly(int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int a6, int direction);5
void __fastcall Cel2DecodeHdrOnly(char *pBuff, char *pCelBuff, int frame, int frame_width, int a5, int direction);5
void __fastcall Cel2DecDatLightOnly(char *pDecodeTo, char *pRLEBytes, int frame_content_size, int frame_width);5
void __fastcall Cel2DecDatLightEntry(int a1, int a2);5
void __fastcall Cel2DecDatLightTrans(char *pDecodeTo, char *pRLEBytes, int frame_content_size, int frame_width);5
void __fastcall Cel2DecodeHdrLight(int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int a6, int direction);5
void __fastcall Cel2DecodeLightTrans(char *dst_buf, char *pCelBuff, int frame, int frame_width, int a5, int direction);5
void __fastcall Cel2DrawHdrLightRed(int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int always_0, int direction, char always_1);5
void __fastcall CelDecodeRect(char *pBuff, int always_0, int dst_height, int dst_width, char *pCelBuff, int frame, int frame_width);5
void __fastcall CelDecodeClr(char colour, int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int a7, int direction);5
void __fastcall CelDrawHdrClrHL(char colour, int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int a7, int direction);5
void __fastcall ENG_set_pixel(int screen_x, int screen_y, char pixel);5
void __fastcall engine_draw_pixel(int x, int y);5
void __fastcall engine_draw_automap_pixels(int x1, int y1, int x2, int y2, char a5);5
int __fastcall GetDirection(int x1, int y1, int x2, int y2);5
void __fastcall SetRndSeed(int s);5
int __cdecl GetRndSeed();5
int __fastcall random(int idx, int v);5
void __cdecl engine_cpp_init_2();5
void __cdecl mem_init_mutex();5
void __cdecl mem_atexit_mutex();5
void __cdecl mem_free_mutex();5
void *__fastcall DiabloAllocPtr(int dwBytes);5
void __fastcall mem_free_dbg(void *ptr);5
unsigned char *__fastcall LoadFileInMem(char *pszName, int *pdwFileLen);5
void __fastcall LoadFileWithMem(char *pszName, void *buf);5
void __fastcall Cl2ApplyTrans(char *p, char *ttbl, int last_frame);5
void __fastcall Cl2DecodeFrm1(int x, int y, char *pCelBuff, int nCel, int width, int dir1, int dir2);5
void __fastcall Cl2DecDatFrm1(char *buffer, char *frame_content, int a3, int width);5
void __fastcall Cl2DecodeFrm2(char colour, int screen_x, int screen_y, char *pCelBuff, int nCel, int frame_width, int a7, int a8);5
void __fastcall Cl2DecDatFrm2(char *buffer, char *a2, int a3, int a4, char a5);5
void __fastcall Cl2DecodeFrm3(int screen_x, int screen_y, char *pCelBuff, int nCel, int frame_width, int a6, int a7, char a8);5
void __fastcall Cl2DecDatLightTbl1(char *a1, char *a2, int a3, int a4, char *unused_lindex);5
void __fastcall Cl2DecodeLightTbl(int screen_x, int screen_y, char *pCelBuff, int nCel, int frame_width, int a6, int a7);5
void __fastcall Cl2DecodeFrm4(int screen_x, int screen_y, char *pCelBuff, int nCel, int frame_width, int a6, int a7);5
void __fastcall Cl2DecDatFrm4(char *buffer, char *a2, int a3, int frame_width);5
void __fastcall Cl2DecodeClrHL(char colour, int screen_x, int screen_y, char *pCelBuff, int nCel, int frame_width, int a7, int a8);5
void __fastcall Cl2DecDatClrHL(char *dst_buf, char *frame_content, int a3, int frame_width, char colour);5
void __fastcall Cl2DecodeFrm5(int screen_x, int screen_y, char *pCelBuff, int nCel, int frame_width, int a6, int a7, char a8);5
void __fastcall Cl2DecDatLightTbl2(char *dst_buf, char *a2, int a3, int frame_width, char *a5);5
void __fastcall Cl2DecodeFrm6(int screen_x, int screen_y, char *pCelBuff, int nCel, int frame_width, int a6, int a7);5
void __fastcall PlayInGameMovie(char *pszMovie);5
5
/* data */5
5
extern int engine_inf; // weak5
5
#endif /* __ENGINE_H__ */5
//HEADER_GOES_HERE5
#ifndef __ERROR_H__5
#define __ERROR_H__5
5
extern char msgtable[80];5
extern char msgdelay; // weak5
extern char msgflag; // weak5
extern char msgcnt; // weak5
5
void __fastcall InitDiabloMsg(char e);5
void __cdecl ClrDiabloMsg();5
void __cdecl DrawDiabloMsg();5
5
/* data */5
extern char *MsgStrings[44];5
5
#endif /* __ERROR_H__ */5
//HEADER_GOES_HERE5
#ifndef __FAULT_H__5
#define __FAULT_H__5
5
//int dword_52B9F4;5
extern LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter; // idb5
5
void __cdecl exception_cpp_init();5
void __cdecl exception_install_filter();5
void __cdecl j_exception_init_filter();5
void __cdecl exception_init_filter();5
LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo);5
void __fastcall exception_hex_format(char *a1, char a2);5
void __fastcall exception_unknown_module(LPCVOID lpAddress, LPSTR lpString1, int iMaxLength, int a4, int a5);5
void __fastcall exception_call_stack(void *a1, LPVOID lp);5
char *__fastcall exception_get_error_type(DWORD dwMessageId, LPSTR lpString1, DWORD nSize);5
void __fastcall exception_set_filter();5
LPTOP_LEVEL_EXCEPTION_FILTER __cdecl exception_set_filter_ptr();5
LPTOP_LEVEL_EXCEPTION_FILTER __cdecl exception_get_filter();5
5
#endif /* __FAULT_H__ */5
//HEADER_GOES_HERE5
#ifndef __GAMEMENU_H__5
#define __GAMEMENU_H__5
5
void __cdecl gamemenu_previous();5
void __cdecl gamemenu_enable_single();5
void __cdecl gamemenu_enable_multi();5
void __cdecl gamemenu_off();5
void __cdecl gamemenu_handle_previous();5
void __cdecl gamemenu_new_game();5
void __cdecl gamemenu_quit_game();5
void __cdecl gamemenu_load_game();5
void __cdecl gamemenu_save_game();5
void __cdecl gamemenu_restart_town();5
void __cdecl gamemenu_options();5
void __cdecl gamemenu_get_music();5
void __fastcall gamemenu_sound_music_toggle(char **names, TMenuItem *menu_item, int gamma);5
void __cdecl gamemenu_get_sound();5
void __cdecl gamemenu_get_color_cycling();5
void __cdecl gamemenu_get_gamma();5
void __fastcall gamemenu_music_volume(int a1);5
int __fastcall gamemenu_slider_music_sound(TMenuItem *menu_item);5
void __fastcall gamemenu_sound_volume(int a1);5
void __fastcall gamemenu_gamma(int a1);5
int __cdecl gamemenu_slider_gamma();5
void __cdecl gamemenu_color_cycling();5
5
/* rdata */5
extern TMenuItem sgSingleMenu[6];5
extern TMenuItem sgMultiMenu[5];5
extern TMenuItem sgOptionMenu[6];5
extern char *music_toggle_names[];5
extern char *sound_toggle_names[];5
extern char *color_cycling_toggle_names[];5
5
#endif /* __GAMEMENU_H__ */5
//HEADER_GOES_HERE5
#ifndef __GENDUNG_H__5
#define __GENDUNG_H__5
5
extern short level_frame_types[2048];5
extern int themeCount;5
extern char nTransTable[2049];5
//int dword_52D204;5
extern int dMonster[112][112];5
extern char dungeon[40][40];5
extern char dObject[112][112];5
extern void *pSpeedCels;5
extern int nlevel_frames; // weak5
extern char pdungeon[40][40];5
extern char dDead[112][112];5
extern short dpiece_defs_map_1[16][112][112];5
extern char dTransVal2[112][112];5
extern char TransVal; // weak5
extern int dword_5A5594;5
extern char dflags[40][40];5
extern int dPiece[112][112];5
extern char dTransVal[112][112];5
extern int setloadflag_2; // weak5
extern Tile tile_defs[1024];5
extern void *pMegaTiles;5
extern DPiece dpiece_defs[2];5
extern int gnDifficulty; // idb5
extern char block_lvid[2049];5
//char byte_5B78EB;5
extern char dung_map[112][112];5
extern char nTrapTable[2049];5
extern char leveltype; // weak5
extern unsigned char currlevel; // idb5
extern char TransList[256];5
extern char nSolidTable[2049];5
extern int level_frame_count[2049];5
extern ScrollStruct ScrollInfo;5
extern void *pDungeonCels;5
extern int speed_cel_frame_num_from_light_index_frame_num[16][128];5
extern THEME_LOC themeLoc[50];5
extern char dPlayer[112][112];5
extern int dword_5C2FF8; // weak5
extern int dword_5C2FFC; // weak5
extern int scr_pix_width; // weak5
extern int scr_pix_height; // weak5
extern char dArch[112][112];5
extern char nBlockTable[2049];5
extern void *level_special_cel;5
extern char dFlags[112][112];5
extern char dItem[112][112];5
extern char setlvlnum; // weak5
extern int level_frame_sizes[2048];5
extern char nMissileTable[2049];5
extern char *pSetPiece_2;5
extern char setlvltype; // weak5
extern char setlevel; // weak5
extern int LvlViewY; // weak5
extern int LvlViewX; // weak5
extern int dmaxx; // weak5
extern int dmaxy; // weak5
extern int setpc_h; // weak5
extern int setpc_w; // weak5
extern int setpc_x; // idb5
extern int ViewX; // idb5
extern int ViewY; // idb5
extern int setpc_y; // idb5
extern char dMissile[112][112];5
extern int dminx; // weak5
extern int dminy; // weak5
extern short dpiece_defs_map_2[16][112][112];5
5
void __cdecl FillSolidBlockTbls();5
void __cdecl gendung_418D91();5
void __fastcall gendung_4191BF(int frames);5
void __fastcall gendung_4191FB(int a1, int a2);5
int __fastcall gendung_get_dpiece_num_from_coord(int x, int y);5
void __cdecl gendung_4192C2();5
void __cdecl SetDungeonMicros();5
void __cdecl DRLG_InitTrans();5
void __fastcall DRLG_MRectTrans(int x1, int y1, int x2, int y2);5
void __fastcall DRLG_RectTrans(int x1, int y1, int x2, int y2);5
void __fastcall DRLG_CopyTrans(int sx, int sy, int dx, int dy);5
void __fastcall DRLG_ListTrans(int num, unsigned char *List);5
void __fastcall DRLG_AreaTrans(int num, unsigned char *List);5
void __cdecl DRLG_InitSetPC();5
void __cdecl DRLG_SetPC();5
void __fastcall Make_SetPC(int x, int y, int w, int h);5
bool __fastcall DRLG_WillThemeRoomFit(int floor, int x, int y, int minSize, int maxSize, int *width, int *height);5
void __fastcall DRLG_CreateThemeRoom(int themeIndex);5
void __fastcall DRLG_PlaceThemeRooms(int minSize, int maxSize, int floor, int freq, int rndSize);5
void __cdecl DRLG_HoldThemeRooms();5
bool __fastcall SkipThemeRoom(int x, int y);5
void __cdecl InitLevels();5
5
#endif /* __GENDUNG_H__ */5
//HEADER_GOES_HERE5
#ifndef __GMENU_H__5
#define __GMENU_H__5
5
extern void *optbar_cel;5
extern bool byte_634464; // weak5
extern void *PentSpin_cel;5
extern TMenuItem *sgpCurrItem;5
extern void *BigTGold_cel;5
extern int dword_634474; // weak5
extern char byte_634478; // weak5
extern void (__cdecl *dword_63447C)();5
extern TMenuItem *dword_634480; // idb5
extern void *option_cel;5
extern void *sgpLogo;5
extern int dword_63448C; // weak5
5
void __cdecl gmenu_draw_pause();5
void __fastcall gmenu_print_text(int x, int y, char *pszStr);5
void __cdecl FreeGMenu();5
void __cdecl gmenu_init_menu();5
bool __cdecl gmenu_exception();5
void __fastcall gmenu_call_proc(TMenuItem *pItem, void (__cdecl *gmFunc)());5
void __fastcall gmenu_up_down(int a1);5
void __cdecl gmenu_draw();5
void __fastcall gmenu_draw_menu_item(TMenuItem *pItem, int a2);5
void __fastcall gmenu_clear_buffer(int x, int y, int width, int height);5
int __fastcall gmenu_get_lfont(TMenuItem *pItem);5
int __fastcall gmenu_presskeys(int a1);5
void __fastcall gmenu_left_right(int a1);5
int __fastcall gmenu_on_mouse_move(LPARAM lParam);5
bool __fastcall gmenu_valid_mouse_pos(int *plOffset);5
int __fastcall gmenu_left_mouse(int a1);5
void __fastcall gmenu_enable(TMenuItem *pMenuItem, bool enable);5
void __fastcall gmenu_slider_1(TMenuItem *pItem, int min, int max, int gamma);5
int __fastcall gmenu_slider_get(TMenuItem *pItem, int min, int max);5
void __fastcall gmenu_slider_3(TMenuItem *pItem, int dwTicks);5
5
/* data */5
5
extern unsigned char lfontframe[127];5
extern unsigned char lfontkern[56];5
5
#endif /* __GMENU_H__ */5
//HEADER_GOES_HERE5
#ifndef __HELP_H__5
#define __HELP_H__5
5
extern int help_select_line; // weak5
extern int dword_634494; // weak5
extern int helpflag;5
extern int displayinghelp[22];5
extern int HelpTop; // weak5
5
void __cdecl InitHelp();5
void __cdecl DrawHelp();5
void __fastcall DrawHelpLine(int always_0, int help_line_nr, char *text, text_color color);5
void __cdecl DisplayHelp();5
void __cdecl HelpScrollUp();5
void __cdecl HelpScrollDown();5
5
/* data */5
extern char gszHelpText[];5
5
#endif /* __HELP_H__ */5
//HEADER_GOES_HERE5
#ifndef __INIT_H__5
#define __INIT_H__5
5
extern _SNETVERSIONDATA fileinfo;5
extern int init_cpp_init_value; // weak5
extern int window_activated; // weak5
extern char diablo_exe_path[260];5
extern void *unused_mpq;5
extern char patch_rt_mpq_path[260];5
extern LRESULT (__stdcall *CurrentProc)(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);5
extern void *diabdat_mpq;5
extern char diabdat_mpq_path[260];5
extern void *patch_rt_mpq;5
extern int killed_mom_parent; // weak5
extern bool screensaver_enabled_prev;5
5
void __cdecl init_cpp_init();5
void __fastcall init_cleanup(bool show_cursor);5
void __cdecl init_run_office_from_start_menu();5
void __fastcall init_run_office(char *dir);5
void __fastcall init_disable_screensaver(bool disable);5
void __cdecl init_create_window();5
void __cdecl init_kill_mom_parent();5
HWND __cdecl init_find_mom_parent();5
void __cdecl init_await_mom_parent_exit();5
void __cdecl init_archives();5
void *__fastcall init_test_access(char *mpq_path, char *mpq_name, char *reg_loc, int flags, bool on_cd);5
char *__fastcall init_strip_trailing_slash(char *path);5
int __fastcall init_read_test_file(char *mpq_path, char *mpq_name, int flags, void **archive);5
void __cdecl init_get_file_info();5
LRESULT __stdcall init_palette(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);5
void __fastcall init_activate_window(HWND hWnd, bool activated);5
LRESULT __stdcall init_redraw_window(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);5
LRESULT (__stdcall *SetWindowProc(void *func))(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);5
5
/* data */5
extern int init_inf; // weak5
5
/* rdata */5
5
extern char gszVersionNumber[260];5
extern char gszProductName[260];5
5
#endif /* __INIT_H__ */5
//HEADER_GOES_HERE5
#ifndef __INTERFAC_H__5
#define __INTERFAC_H__5
5
extern void *sgpBackCel;5
extern float interfac_cpp_init_value;5
extern int sgdwProgress;5
extern int progress_id; // idb5
5
void __cdecl interfac_cpp_init();5
void __cdecl interface_msg_pump();5
bool __cdecl IncProgress();5
void __cdecl DrawCutscene();5
void __fastcall DrawProgress(int screen_x, int screen_y, int progress_id);5
void __fastcall ShowProgress(int uMsg);5
void __cdecl FreeInterface();5
void __fastcall InitCutscene(int interface_mode);5
5
/* data */5
5
extern int interfac_inf; // weak5
extern unsigned char progress_bar_colours[3];5
extern POINT32 progress_bar_screen_pos[3];5
5
#endif /* __INTERFAC_H__ */5
//HEADER_GOES_HERE5
#ifndef __INV_H__5
#define __INV_H__5
5
extern int invflag;5
extern void *pInvCels;5
extern int drawsbarflag; // idb5
extern int sgdwLastTime; // check name5
5
void __cdecl FreeInvGFX();5
void __cdecl InitInv();5
void __fastcall InvDrawSlotBack(int X, int Y, int W, int H);5
void __cdecl DrawInv();5
void __cdecl DrawInvBelt();5
int __fastcall AutoPlace(int pnum, int ii, int sx, int sy, int saveflag);5
int __fastcall SpecialAutoPlace(int pnum, int ii, int sx, int sy, int saveflag);5
int __fastcall GoldAutoPlace(int pnum);5
int __fastcall WeaponAutoPlace(int pnum);5
int __fastcall SwapItem(ItemStruct *a, ItemStruct *b);5
void __fastcall CheckInvPaste(int pnum, int mx, int my);5
void __fastcall CheckInvSwap(int pnum, int bLoc, int idx, int wCI, int seed, int bId);5
void __fastcall CheckInvCut(int pnum, int mx, int my);5
void __fastcall inv_update_rem_item(int pnum, int iv);5
void __fastcall RemoveInvItem(int pnum, int iv);5
void __fastcall RemoveSpdBarItem(int pnum, int iv);5
void __cdecl CheckInvItem();5
void __cdecl CheckInvScrn();5
void __fastcall CheckItemStats(int pnum);5
void __fastcall CheckBookLevel(int pnum);5
void __fastcall CheckQuestItem(int pnum);5
void __fastcall InvGetItem(int pnum, int ii);5
void __fastcall AutoGetItem(int pnum, int ii);5
int __fastcall FindGetItem(int indx, unsigned short ci, int iseed);5
void __fastcall SyncGetItem(int x, int y, int idx, unsigned short ci, int iseed);5
int __fastcall CanPut(int i, int j);5
int __cdecl TryInvPut();5
void __fastcall DrawInvMsg(char *msg);5
int __fastcall InvPutItem(int pnum, int x, int y);5
int __fastcall SyncPutItem(int pnum, int x, int y, int idx, int icreateinfo, int iseed, int Id, int dur, int mdur, int ch, int mch, int ivalue, unsigned int ibuff);5
int __cdecl CheckInvHLight();5
void __fastcall RemoveScroll(int pnum);5
bool __cdecl UseScroll();5
void __fastcall UseStaffCharge(int pnum);5
bool __cdecl UseStaff();5
void __cdecl StartGoldDrop();5
int __fastcall UseInvItem(int pnum, int cii);5
void __cdecl DoTelekinesis();5
int __fastcall CalculateGold(int pnum);5
int __cdecl DropItemBeforeTrig();5
5
/* data */5
5
extern InvXY InvRect[73];5
5
/* rdata */5
5
extern int AP2x2Tbl[10]; // weak5
5
#endif /* __INV_H__ */5
//HEADER_GOES_HERE5
#ifndef __ITEMS_H__5
#define __ITEMS_H__5
5
extern int itemactive[127];5
extern int uitemflag;5
extern int itemavail[127];5
extern ItemStruct curruitem;5
extern ItemGetRecordStruct itemrecord[127];5
extern ItemStruct item[128];5
extern char itemhold[3][3];5
extern char byte_641234[28]; /* check if part of above */5
extern int Item2Frm[35];5
extern int UniqueItemFlag[128];5
extern int numitems;5
extern int gnNumGetRecords;5
5
void __cdecl InitItemGFX();5
bool __fastcall ItemPlace(int x, int y);5
void __cdecl AddInitItems();5
void __cdecl InitItems();5
void __fastcall CalcPlrItemVals(int p, bool Loadgfx);5
void __fastcall CalcPlrScrolls(int p);5
void __fastcall CalcPlrStaff(int pnum);5
void __fastcall CalcSelfItems(int pnum);5
void __fastcall CalcPlrItemMin(int pnum);5
bool __fastcall ItemMinStats(PlayerStruct *p, ItemStruct *x);5
void __fastcall CalcPlrBookVals(int p);5
void __fastcall CalcPlrInv(int p, bool Loadgfx);5
void __fastcall SetPlrHandItem(ItemStruct *h, int idata);5
void __fastcall GetPlrHandSeed(ItemStruct *h);5
void __fastcall GetGoldSeed(int pnum, ItemStruct *h);5
void __fastcall SetPlrHandSeed(ItemStruct *h, int iseed);5
void __fastcall SetPlrHandGoldCurs(ItemStruct *h);5
void __fastcall CreatePlrItems(int p);5
bool __fastcall ItemSpaceOk(int i, int j);5
bool __fastcall GetItemSpace(int x, int y, char inum);5
void __fastcall GetSuperItemSpace(int x, int y, char inum);5
void __fastcall GetSuperItemLoc(int x, int y, int *xx, int *yy);5
void __fastcall CalcItemValue(int i);5
void __fastcall GetBookSpell(int i, int lvl);5
void __fastcall GetStaffPower(int i, int lvl, int bs, unsigned char onlygood);5
void __fastcall GetStaffSpell(int i, int lvl, unsigned char onlygood);5
void __fastcall GetItemAttrs(int i, int idata, int lvl);5
int __fastcall RndPL(int param1, int param2);5
int __fastcall PLVal(int pv, int p1, int p2, int minv, int maxv);5
void __fastcall SaveItemPower(int i, int power, int param1, int param2, int minval, int maxval, int multval);5
void __fastcall GetItemPower(int i, int minlvl, int maxlvl, int flgs, int onlygood);5
void __fastcall GetItemBonus(int i, int idata, int minlvl, int maxlvl, int onlygood);5
void __fastcall SetupItem(int i);5
int __fastcall RndItem(int m);5
int __fastcall RndUItem(int m);5
int __cdecl RndAllItems();5
int __fastcall RndTypeItems(int itype, int imid);5
int __fastcall CheckUnique(int i, int lvl, int uper, bool recreate);5
void __fastcall GetUniqueItem(int i, int uid);5
void __fastcall SpawnUnique(int uid, int x, int y);5
void __fastcall ItemRndDur(int ii);5
void __fastcall SetupAllItems(int ii, int idx, int iseed, int lvl, int uper, int onlygood, int recreate, int pregen);5
void __fastcall SpawnItem(int m, int x, int y, unsigned char sendmsg);5
void __fastcall CreateItem(int uid, int x, int y);5
void __fastcall CreateRndItem(int x, int y, unsigned char onlygood, unsigned char sendmsg, int delta);5
void __fastcall SetupAllUseful(int ii, int iseed, int lvl);5
void __fastcall CreateRndUseful(int pnum, int x, int y, unsigned char sendmsg);5
void __fastcall CreateTypeItem(int x, int y, unsigned char onlygood, int itype, int imisc, int sendmsg, int delta);5
void __fastcall RecreateItem(int ii, int idx, unsigned short ic, int iseed, int ivalue);5
void __fastcall RecreateEar(int ii, unsigned short ic, int iseed, unsigned char Id, int dur, int mdur, int ch, int mch, int ivalue, int ibuff);5
void __fastcall SpawnQuestItem(int itemid, int x, int y, int randarea, int selflag);5
void __cdecl SpawnRock();5
void __fastcall RespawnItem(int i, bool FlipFlag);5
void __fastcall DeleteItem(int ii, int i);5
void __cdecl ItemDoppel();5
void __cdecl ProcessItems();5
void __cdecl FreeItemGFX();5
void __fastcall GetItemFrm(int i);5
void __fastcall GetItemStr(int i);5
void __fastcall CheckIdentify(int pnum, int cii);5
void __fastcall DoRepair(int pnum, int cii);5
void __fastcall RepairItem(ItemStruct *i, int lvl);5
void __fastcall DoRecharge(int pnum, int cii);5
void __fastcall RechargeItem(ItemStruct *i, int r);5
void __fastcall PrintItemOil(char IDidx);5
void __fastcall PrintItemPower(char plidx, ItemStruct *x);5
void __cdecl DrawUBack();5
void __fastcall PrintUString(int x, int y, int cjustflag, char *str, int col);5
void __fastcall DrawULine(int y);5
void __cdecl DrawUniqueInfo();5
void __fastcall PrintItemMisc(ItemStruct *x);5
void __fastcall PrintItemDetails(ItemStruct *x);5
void __fastcall PrintItemDur(ItemStruct *x);5
void __fastcall UseItem(int p, int Mid, int spl);5
bool __fastcall StoreStatOk(ItemStruct *h);5
bool __fastcall SmithItemOk(int i);5
int __fastcall RndSmithItem(int lvl);5
void __fastcall BubbleSwapItem(ItemStruct *a, ItemStruct *b);5
void __cdecl SortSmith();5
void __fastcall SpawnSmith(int lvl);5
bool __fastcall PremiumItemOk(int i);5
int __fastcall RndPremiumItem(int minlvl, int maxlvl);5
void __fastcall SpawnOnePremium(int i, int plvl);5
void __fastcall SpawnPremium(int lvl);5
bool __fastcall WitchItemOk(int i);5
int __fastcall RndWitchItem(int lvl);5
void __cdecl SortWitch();5
void __fastcall WitchBookLevel(int ii);5
void __fastcall SpawnWitch(int lvl);5
int __fastcall RndBoyItem(int lvl);5
void __fastcall SpawnBoy(int lvl);5
bool __fastcall HealerItemOk(int i);5
int __fastcall RndHealerItem(int lvl);5
void __cdecl SortHealer();5
void __fastcall SpawnHealer(int lvl);5
void __cdecl SpawnStoreGold();5
void __fastcall RecreateSmithItem(int ii, int idx, int plvl, int iseed);5
void __fastcall RecreatePremiumItem(int ii, int idx, int lvl, int iseed);5
void __fastcall RecreateBoyItem(int ii, int idx, int lvl, int iseed);5
void __fastcall RecreateWitchItem(int ii, int idx, int lvl, int iseed);5
void __fastcall RecreateHealerItem(int ii, int idx, int lvl, int iseed);5
void __fastcall RecreateTownItem(int ii, int idx, unsigned short icreateinfo, int iseed, int ivalue);5
void __cdecl RecalcStoreStats();5
int __cdecl ItemNoFlippy();5
void __fastcall CreateSpellBook(int x, int y, int ispell, bool sendmsg, int delta);5
void __fastcall CreateMagicItem(int x, int y, int imisc, int icurs, int sendmsg, int delta);5
bool __fastcall GetItemRecord(int dwSeed, int CI, int indx);5
void __fastcall NextItemRecord(int i);5
void __fastcall SetItemRecord(int dwSeed, int CI, int indx);5
void __fastcall PutItemRecord(int seed, int ci, int index);5
5
/* data */5
5
extern PLStruct PL_Prefix[84];5
extern PLStruct PL_Suffix[96];5
extern UItemStruct UniqueItemList[91];5
5
/* rdata */5
5
5
extern ItemDataStruct AllItemsList[157];5
extern unsigned char ItemCAnimTbl[169];5
extern char *ItemDropStrs[35];5
extern unsigned char ItemAnimLs[35];5
extern int ItemDropSnds[35];5
extern int ItemInvSnds[35];5
extern int idoppely; // weak5
extern int premiumlvladd[6];5
5
#endif /* __ITEMS_H__ */5
//HEADER_GOES_HERE5
#ifndef __LIGHTING_H__5
#define __LIGHTING_H__5
5
extern LightListStruct VisionList[32];5
extern char lightactive[32];5
extern LightListStruct LightList[32];5
extern int numlights;5
extern char dung_map_radius[2048]; /* char [16][128] */5
extern int dovision; // weak5
extern int numvision;5
extern char lightmax; // weak5
extern int dolighting; // weak5
extern char dung_map_rgba[16384]; /* int [64][64] short [64][128] char [64][256] */5
extern int visionid;5
extern char *pLightTbl; /* todo: struct? */5
extern int lightflag; // weak5
5
void __fastcall SetLightFX(int *x, int *y, short *s_r, short *s_g, int *s_b, int *d_r, int *d_g, int *d_b);5
void __fastcall DoLighting(int nXPos, int nYPos, int nRadius, int Lnum);5
void __fastcall DoUnLight(int nXPos, int nYPos, int nRadius);5
void __fastcall DoUnVision(int nXPos, int nYPos, int nRadius);5
void __fastcall DoVision(int nXPos, int nYPos, int nRadius, unsigned char doautomap, int visible);5
void __cdecl FreeLightTable();5
void __cdecl InitLightTable();5
void __cdecl MakeLightTable();5
void __cdecl InitLightMax();5
void __cdecl InitLighting();5
int __fastcall AddLight(int x, int y, int r);5
void __fastcall AddUnLight(int i);5
void __fastcall ChangeLightRadius(int i, int r);5
void __fastcall ChangeLightXY(int i, int x, int y);5
void __fastcall ChangeLightOff(int i, int x, int y);5
void __fastcall ChangeLight(int i, int x, int y, int r);5
void __cdecl ProcessLightList();5
void __cdecl SavePreLighting();5
void __cdecl InitVision();5
int __fastcall AddVision(int x, int y, int r, bool mine);5
void __fastcall ChangeVisionRadius(int id, int r);5
void __fastcall ChangeVisionXY(int id, int x, int y);5
void __cdecl ProcessVisionList();5
void __cdecl lighting_color_cycling();5
5
/* rdata */5
5
extern CircleCoord CrawlTable;5
extern void *pCrawlTable[19];5
extern unsigned char vCrawlTable[23][30];5
extern unsigned char byte_49463C[18][18];5
extern unsigned char RadiusAdj[23];5
5
#endif /* __LIGHTING_H__ */5
//HEADER_GOES_HERE5
#ifndef __LOADSAVE_H__5
#define __LOADSAVE_H__5
5
extern void *tbuff;5
5
void __fastcall LoadGame(bool firstflag);5
char __cdecl BLoad();5
int __cdecl ILoad();5
int __cdecl ILoad_2();5
bool __cdecl OLoad();5
void __fastcall LoadPlayer(int i);5
void __fastcall LoadMonster(int i);5
void __fastcall LoadMissile(int i);5
void __fastcall LoadObject(int i);5
void __fastcall LoadItem(int i);5
void __fastcall LoadPremium(int i);5
void __fastcall LoadQuest(int i);5
void __fastcall LoadLighting(int i);5
void __fastcall LoadVision(int i);5
void __fastcall LoadPortal(int i);5
void __cdecl SaveGame();5
void __fastcall BSave(char v);5
void __fastcall ISave(int v);5
void __fastcall ISave_2(int v);5
void __fastcall OSave(unsigned char v);5
void __fastcall SavePlayer(int i);5
void __fastcall SaveMonster(int i);5
void __fastcall SaveMissile(int i);5
void __fastcall SaveObject(int i);5
void __fastcall SaveItem(int i);5
void __fastcall SavePremium(int i);5
void __fastcall SaveQuest(int i);5
void __fastcall SaveLighting(int i);5
void __fastcall SaveVision(int i);5
void __fastcall SavePortal(int i);5
void __cdecl SaveLevel();5
void __cdecl LoadLevel();5
5
#endif /* __LOADSAVE_H__ */5
//HEADER_GOES_HERE5
#ifndef __LOGGING_H__5
#define __LOGGING_H__5
5
extern int log_cpp_init_value; // weak5
extern CHAR FileName[260]; // idb5
extern char log_buffer[388];5
extern LPCVOID lpAddress; // idb5
extern DWORD nNumberOfBytesToWrite; // idb5
5
void __cdecl log_cpp_init_1();5
void __cdecl log_cpp_init_2();5
void __cdecl log_init_mutex();5
void __cdecl j_log_cleanup_mutex();5
void __cdecl log_cleanup_mutex();5
void __cdecl log_flush(bool force_close);5
void *__cdecl log_create(); // should be HANDLE5
void __fastcall log_get_version(VS_FIXEDFILEINFO *file_info);5
void log_printf(char *pszFmt, ...); // LogMessage5
void __cdecl log_dump_computer_info();5
5
/* data */5
5
extern int log_inf; // weak5
5
/* rdata */5
5
extern int log_not_created; // weak5
extern HANDLE log_file; // idb5
5
#endif /* __LOGGING_H__ */5
//HEADER_GOES_HERE5
#ifndef __MAINMENU_H__5
#define __MAINMENU_H__5
5
extern int mainmenu_cpp_init_value; // weak5
extern char chr_name_str[16];5
5
void __cdecl mainmenu_cpp_init();5
void __cdecl mainmenu_refresh_music();5
void __stdcall mainmenu_create_hero(char *, char *);5
int __stdcall mainmenu_select_hero_dialog(int u1, int u2, int u3, int u4, int mode, char *cname, int clen, char *cdesc, int cdlen, int *multi);5
void __fastcall mainmenu_action(int option);5
int __cdecl mainmenu_single_player();5
int __fastcall mainmenu_init_menu(int a1);5
int __cdecl mainmenu_multi_player();5
void __cdecl mainmenu_play_intro();5
5
/* data */5
5
extern int mainmenu_inf; // weak5
5
/* rdata */5
5
extern int menu_music_track_id; // idb5
5
#endif /* __MAINMENU_H__ */5
//HEADER_GOES_HERE5
#ifndef __MINITEXT_H__5
#define __MINITEXT_H__5
5
extern int qtexty; // weak5
extern char *qtextptr;5
extern int qtextSpd; // weak5
extern char qtextflag; // weak5
extern int scrolltexty; // weak5
extern int sgLastScroll; // weak5
extern void *pMedTextCels;5
extern void *pTextBoxCels;5
5
void __cdecl FreeQuestText();5
void __cdecl InitQuestText();5
void __fastcall InitQTextMsg(int m);5
void __cdecl DrawQTextBack();5
void __fastcall PrintQTextChr(int screen_x, int screen_y, char *cel_buf, int frame);5
void __cdecl DrawQText();5
5
/* data */5
5
extern unsigned char mfontframe[127];5
extern unsigned char mfontkern[56];5
5
/* rdata */5
5
extern int qscroll_spd_tbl[9];5
5
#endif /* __MINITEXT_H__ */5
//HEADER_GOES_HERE5
#ifndef __MISSILES_H__5
#define __MISSILES_H__5
5
extern int missileactive[125];5
extern int missileavail[125];5
extern MissileStruct missile[125];5
extern int nummissiles; // idb5
extern int ManashieldFlag;5
extern unk_missile_struct misflagstruct_unknown[125];5
extern int MissilePreFlag; // weak5
// int END_unkmis_126; // weak5
5
void __fastcall GetDamageAmt(int i, int *mind, int *maxd);5
int __fastcall CheckBlock(int fx, int fy, int tx, int ty);5
int __fastcall FindClosest(int sx, int sy, int rad);5
int __fastcall GetSpellLevel(int id, int sn);5
int __fastcall GetDirection8(int x1, int y1, int x2, int y2);5
int __fastcall GetDirection16(int x1, int y1, int x2, int y2);5
void __fastcall DeleteMissile(int mi, int i);5
void __fastcall GetMissileVel(int i, int sx, int sy, int dx, int dy, int v);5
void __fastcall PutMissile(int i);5
void __fastcall GetMissilePos(int i);5
void __fastcall MoveMissilePos(int i);5
bool __fastcall MonsterTrapHit(int m, int mindam, int maxdam, int dist, int t, int shift);5
bool __fastcall MonsterMHit(int pnum, int m, int mindam, int maxdam, int dist, int t, int shift);5
bool __fastcall PlayerMHit(int pnum, int m, int dist, int mind, int maxd, int mtype, int shift, int earflag);5
bool __fastcall Plr2PlrMHit(int pnum, int p, int mindam, int maxdam, int dist, int mtype, int shift);5
void __fastcall CheckMissileCol(int i, int mindam, int maxdam, bool shift, int mx, int my, int nodel);5
void __fastcall SetMissAnim(int mi, int animtype);5
void __fastcall SetMissDir(int mi, int dir);5
void __fastcall LoadMissileGFX(int mi);5
void __cdecl InitMissileGFX();5
void __fastcall FreeMissileGFX(int mi);5
void __cdecl FreeMissiles();5
void __cdecl FreeMissiles2();5
void __cdecl InitMissiles();5
void __fastcall AddLArrow(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddArrow(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall GetVileMissPos(int mi, int dx, int dy);5
void __fastcall AddRndTeleport(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFirebolt(int mi, int sx, int sy, int dx, int dy, int midir, int micaster, int id, int dam);5
void __fastcall AddMagmaball(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall miss_null_33(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddTeleport(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddLightball(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFirewall(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFireball(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddLightctrl(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddLightning(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddMisexp(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddWeapexp(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
bool __fastcall CheckIfTrig(int x, int y);5
void __fastcall AddTown(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFlash(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFlash2(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddManashield(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFiremove(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddGuardian(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddChain(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall miss_null_11(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall miss_null_12(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall miss_null_13(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddRhino(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall miss_null_32(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFlare(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddAcid(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall miss_null_1D(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddAcidpud(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddStone(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddGolem(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddEtherealize(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall miss_null_1F(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall miss_null_23(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddBoom(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddHeal(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddHealOther(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddElement(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddIdentify(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFirewallC(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddInfra(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddWave(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddNova(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddRepair(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddRecharge(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddDisarm(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddApoca(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFlame(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddFlamec(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddCbolt(int mi, int sx, int sy, int dx, int dy, int midir, int micaster, int id, int dam);5
void __fastcall AddHbolt(int mi, int sx, int sy, int dx, int dy, int midir, int micaster, int id, int dam);5
void __fastcall AddResurrect(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddResurrectBeam(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddTelekinesis(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddBoneSpirit(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddRportal(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
void __fastcall AddDiabApoca(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);5
int __fastcall AddMissile(int sx, int sy, int v1, int v2, int midir, int mitype, int micaster, int id, int v3, int spllvl);5
int __fastcall Sentfire(int i, int sx, int sy);5
void __fastcall MI_Dummy(int i);5
void __fastcall MI_Golem(int i);5
void __fastcall MI_SetManashield(int i);5
void __fastcall MI_LArrow(int i);5
void __fastcall MI_Arrow(int i);5
void __fastcall MI_Firebolt(int i);5
void __fastcall MI_Lightball(int i);5
void __fastcall mi_null_33(int i);5
void __fastcall MI_Acidpud(int i);5
void __fastcall MI_Firewall(int i);5
void __fastcall MI_Fireball(int i);5
void __fastcall MI_Lightctrl(int i);5
void __fastcall MI_Lightning(int i);5
void __fastcall MI_Town(int i);5
void __fastcall MI_Flash(int i);5
void __fastcall MI_Flash2(int i);5
void __fastcall MI_Manashield(int i);5
void __fastcall MI_Etherealize(int i);5
void __fastcall MI_Firemove(int i);5
void __fastcall MI_Guardian(int i);5
void __fastcall MI_Chain(int i);5
void __fastcall mi_null_11(int i);5
void __fastcall MI_Weapexp(int i);5
void __fastcall MI_Misexp(int i);5
void __fastcall MI_Acidsplat(int i);5
void __fastcall MI_Teleport(int i);5
void __fastcall MI_Stone(int i);5
void __fastcall MI_Boom(int i);5
void __fastcall MI_Rhino(int i);5
void __fastcall mi_null_32(int i);5
void __fastcall MI_FirewallC(int i);5
void __fastcall MI_Infra(int i);5
void __fastcall MI_Apoca(int i);5
void __fastcall MI_Wave(int i);5
void __fastcall MI_Nova(int i);5
void __fastcall MI_Blodboil(int i);5
void __fastcall MI_Flame(int i);5
void __fastcall MI_Flamec(int i);5
void __fastcall MI_Cbolt(int i);5
void __fastcall MI_Hbolt(int i);5
void __fastcall MI_Element(int i);5
void __fastcall MI_Bonespirit(int i);5
void __fastcall MI_ResurrectBeam(int i);5
void __fastcall MI_Rportal(int i);5
void __cdecl ProcessMissiles();5
void __cdecl missiles_process_charge();5
void __fastcall ClearMissileSpot(int mi);5
5
/* rdata */5
5
extern MissileData missiledata[68];5
extern MisFileData misfiledata[47];5
extern int XDirAdd[8];5
extern int YDirAdd[8];5
5
#endif /* __MISSILES_H__ */5
//HEADER_GOES_HERE5
#ifndef __MONSTER_H__5
#define __MONSTER_H__5
5
extern int MissileFileFlag; // weak5
extern int monster_cpp_init_value; // weak5
extern int monstkills[200];5
extern int monstactive[200];5
extern int nummonsters;5
extern int sgbSaveSoundOn; // weak5
extern MonsterStruct monster[200];5
extern int totalmonsters; // weak5
extern CMonster Monsters[16];5
// int END_Monsters_17; // weak5
extern int monstimgtot; // weak5
extern int uniquetrans;5
extern int nummtypes;5
5
void __cdecl monster_cpp_init();5
void __fastcall InitMonsterTRN(int monst, int special);5
void __cdecl InitLevelMonsters();5
int __fastcall AddMonsterType(int type, int placeflag);5
void __cdecl GetLevelMTypes();5
void __fastcall InitMonsterGFX(int monst);5
void __fastcall ClearMVars(int i);5
void __fastcall InitMonster(int i, int rd, int mtype, int x, int y);5
void __cdecl ClrAllMonsters();5
bool __fastcall MonstPlace(int xp, int yp);5
void __fastcall PlaceMonster(int i, int mtype, int x, int y);5
void __fastcall PlaceUniqueMonst(int uniqindex, int miniontype, int unpackfilesize);5
void __cdecl PlaceQuestMonsters();5
void __fastcall PlaceGroup(int mtype, int num, unsigned char leaderf, int leader);5
void __cdecl LoadDiabMonsts();5
void __cdecl InitMonsters();5
void __cdecl PlaceUniques();5
void __fastcall SetMapMonsters(char *pMap, int startx, int starty);5
void __fastcall DeleteMonster(int i);5
int __fastcall AddMonster(int x, int y, int dir, int mtype, int InMap);5
void __fastcall NewMonsterAnim(int i, AnimStruct *anim, int md);5
bool __fastcall M_Ranged(int i);5
bool __fastcall M_Talker(int i);5
void __fastcall M_Enemy(int i);5
int __fastcall M_GetDir(int i);5
void __fastcall M_CheckEFlag(int i);5
void __fastcall M_StartStand(int i, int md);5
void __fastcall M_StartDelay(int i, int len);5
void __fastcall M_StartSpStand(int i, int md);5
void __fastcall M_StartWalk(int i, int xvel, int yvel, int xadd, int yadd, int EndDir);5
void __fastcall M_StartWalk2(int i, int xvel, int yvel, int a4, int a5, int a6, int a7, int EndDir);5
void __fastcall M_StartWalk3(int i, int xvel, int yvel, int a4, int a5, int a6, int a7, int a8, int a9, int EndDir);5
void __fastcall M_StartAttack(int i);5
void __fastcall M_StartRAttack(int i, int missile_type, int dam);5
void __fastcall M_StartRSpAttack(int i, int missile_type, int dam);5
void __fastcall M_StartSpAttack(int i);5
void __fastcall M_StartEat(int i);5
void __fastcall M_ClearSquares(int i);5
void __fastcall M_GetKnockback(int i);5
void __fastcall M_StartHit(int i, int pnum, int dam);5
void __fastcall M_DiabloDeath(int i, unsigned char sendmsg);5
void __fastcall M2MStartHit(int mid, int i, int dam);5
void __fastcall MonstStartKill(int i, int pnum, unsigned char sendmsg);5
void __fastcall M2MStartKill(int i, int mid);5
void __fastcall M_StartKill(int i, int pnum);5
void __fastcall M_SyncStartKill(int i, int x, int y, int pnum);5
void __fastcall M_StartFadein(int i, int md, unsigned char backwards);5
void __fastcall M_StartFadeout(int i, int md, unsigned char backwards);5
void __fastcall M_StartHeal(int i);5
void __fastcall M_ChangeLightOffset(int monst);5
int __fastcall M_DoStand(int i);5
int __fastcall M_DoWalk(int i);5
int __fastcall M_DoWalk2(int i);5
int __fastcall M_DoWalk3(int i);5
void __fastcall M_TryM2MHit(int i, int mid, int hper, int mind, int maxd);5
void __fastcall M_TryH2HHit(int i, int pnum, int Hit, int MinDam, int MaxDam);5
int __fastcall M_DoAttack(int i);5
int __fastcall M_DoRAttack(int i);5
int __fastcall M_DoRSpAttack(int i);5
int __fastcall M_DoSAttack(int i);5
int __fastcall M_DoFadein(int i);5
int __fastcall M_DoFadeout(int i);5
int __fastcall M_DoHeal(int i);5
int __fastcall M_DoTalk(int i);5
void __fastcall M_Teleport(int i);5
int __fastcall M_DoGotHit(int i);5
void __fastcall M_UpdateLeader(int i);5
void __cdecl DoEnding();5
void __cdecl PrepDoEnding();5
int __fastcall M_DoDeath(int i);5
int __fastcall M_DoSpStand(int i);5
int __fastcall M_DoDelay(int i);5
int __fastcall M_DoStone(int i);5
void __fastcall M_WalkDir(int i, int md);5
void __fastcall GroupUnity(int i);5
bool __fastcall M_CallWalk(int i, int md);5
bool __fastcall M_PathWalk(int i);5
bool __fastcall M_CallWalk2(int i, int md);5
bool __fastcall M_DumbWalk(int i, int md);5
bool __fastcall M_RoundWalk(int i, int md, int *dir);5
void __fastcall MAI_Zombie(int i);5
void __fastcall MAI_SkelSd(int i);5
bool __fastcall MAI_Path(int i);5
void __fastcall MAI_Snake(int i);5
void __fastcall MAI_Bat(int i);5
void __fastcall MAI_SkelBow(int i);5
void __fastcall MAI_Fat(int i);5
void __fastcall MAI_Sneak(int i);5
void __fastcall MAI_Fireman(int i);5
void __fastcall MAI_Fallen(int i);5
void __fastcall MAI_Cleaver(int i);5
void __fastcall MAI_Round(int i, unsigned char special);5
void __fastcall MAI_GoatMc(int i);5
void __fastcall MAI_Ranged(int i, int missile_type, unsigned char special);5
void __fastcall MAI_GoatBow(int i);5
void __fastcall MAI_Succ(int i);5
void __fastcall MAI_AcidUniq(int i);5
void __fastcall MAI_Scav(int i);5
void __fastcall MAI_Garg(int i);5
void __fastcall MAI_RoundRanged(int i, int missile_type, unsigned char checkdoors, int dam, int lessmissiles);5
void __fastcall MAI_Magma(int i);5
void __fastcall MAI_Storm(int i);5
void __fastcall MAI_Acid(int i);5
void __fastcall MAI_Diablo(int i);5
void __fastcall MAI_RR2(int i, int mistype, int dam);5
void __fastcall MAI_Mega(int i);5
void __fastcall MAI_Golum(int i);5
void __fastcall MAI_SkelKing(int i);5
void __fastcall MAI_Rhino(int i);5
void __fastcall MAI_Counselor(int i);5
void __fastcall MAI_Garbud(int i);5
void __fastcall MAI_Zhar(int i);5
void __fastcall MAI_SnotSpil(int i);5
void __fastcall MAI_Lazurus(int i);5
void __fastcall MAI_Lazhelp(int i);5
void __fastcall MAI_Lachdanan(int i);5
void __fastcall MAI_Warlord(int i);5
void __cdecl DeleteMonsterList();5
void __cdecl ProcessMonsters();5
void __cdecl FreeMonsters();5
bool __fastcall DirOK(int i, int mdir);5
bool __fastcall PosOkMissile(int x, int y);5
bool __fastcall CheckNoSolid(int x, int y);5
bool __fastcall LineClearF(bool (__fastcall *Clear)(int, int), int x1, int y1, int x2, int y2);5
bool __fastcall LineClear(int x1, int y1, int x2, int y2);5
bool __fastcall LineClearF1(bool (__fastcall *Clear)(int, int, int), int monst, int x1, int y1, int x2, int y2);5
void __fastcall SyncMonsterAnim(int i);5
void __fastcall M_FallenFear(int x, int y);5
void __fastcall PrintMonstHistory(int mt);5
void __cdecl PrintUniqueHistory();5
void __fastcall MissToMonst(int i, int x, int y);5
bool __fastcall PosOkMonst(int i, int x, int y);5
bool __fastcall PosOkMonst2(int i, int x, int y);5
bool __fastcall PosOkMonst3(int i, int x, int y);5
bool __fastcall IsSkel(int mt);5
bool __fastcall IsGoat(int mt);5
int __fastcall M_SpawnSkel(int x, int y, int dir);5
void __fastcall ActivateSpawn(int i, int x, int y, int dir);5
bool __fastcall SpawnSkeleton(int ii, int x, int y);5
int __cdecl PreSpawnSkeleton();5
void __fastcall TalktoMonster(int i);5
void __fastcall SpawnGolum(int i, int x, int y, int mi);5
bool __fastcall CanTalkToMonst(int m);5
bool __fastcall CheckMonsterHit(int m, bool *ret);5
int __fastcall encode_enemy(int m);5
void __fastcall decode_enemy(int m, int enemy);5
5
/* data */5
5
extern int monster_inf; // weak5
extern char plr2monst[9];5
extern unsigned char counsmiss[4];5
5
/* rdata */5
5
extern MonsterData monsterdata[112];5
extern char MonstConvTbl[128];5
extern unsigned char MonstAvailTbl[112];5
extern UniqMonstStruct UniqMonst[98];5
extern int MWVel[24][3];5
extern char animletter[7];5
extern int left[8];5
extern int right[8];5
extern int opposite[8];5
extern int offset_x[8];5
extern int offset_y[8];5
5
/* unused */5
extern int rnd5[4];5
extern int rnd10[4];5
extern int rnd20[4];5
extern int rnd60[4];5
//5
5
extern void (__fastcall *AiProc[])(int i);5
5
#endif /* __MONSTER_H__ */5
//HEADER_GOES_HERE5
#ifndef __MOVIE_H__5
#define __MOVIE_H__5
5
extern int movie_cpp_init_value; // weak5
extern char movie_playing; // weak5
extern int loop_movie; // weak5
5
void __cdecl movie_cpp_init();5
void __fastcall play_movie(char *pszMovie, bool user_can_close);5
LRESULT __stdcall MovieWndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);5
5
/* data */5
5
extern int movie_inf; // weak5
5
#endif /* __MOVIE_H__ */5
//HEADER_GOES_HERE5
#ifndef __MPQAPI_H__5
#define __MPQAPI_H__5
5
extern int mpqapi_cpp_init_value; // weak5
extern int sgdwMpqOffset; // idb5
extern char mpq_buf[4096];5
extern _HASHENTRY *sgpHashTbl;5
extern bool save_archive_modified; // weak5
extern _BLOCKENTRY *sgpBlockTbl;5
extern bool save_archive_open; // weak5
5
void __cdecl mpqapi_cpp_init();5
bool __fastcall mpqapi_set_hidden(char *pszArchive, bool hidden);5
void __fastcall mpqapi_store_creation_time(char *pszArchive, int dwChar);5
bool __fastcall mpqapi_reg_load_modification_time(char *dst, int size);5
void __fastcall mpqapi_xor_buf(char *pbData);5
bool __fastcall mpqapi_reg_store_modification_time(char *pbData, int dwLen);5
_BLOCKENTRY *__fastcall j_mpqapi_remove_hash_entry(char *pszName);5
void __fastcall mpqapi_remove_hash_entry(char *pszName);5
void __fastcall mpqapi_alloc_block(int block_offset, int block_size);5
_BLOCKENTRY *__fastcall mpqapi_new_block(int *block_index);5
int __fastcall mpqapi_get_hash_index_of_path(char *pszName);5
int __fastcall mpqapi_get_hash_index(short index, int hash_a, int hash_b, int locale);5
void __fastcall mpqapi_remove_hash_entries(bool (__stdcall *fnGetName)(int, char *));5
bool __fastcall mpqapi_write_file(char *pszName, char *pbData, int dwLen);5
_BLOCKENTRY *__fastcall mpqapi_add_file(char *pszName, _BLOCKENTRY *pBlk, int block_index);5
bool __fastcall mpqapi_write_file_contents(char *pszName, char *pbData, int dwLen, _BLOCKENTRY *pBlk);5
int __fastcall mpqapi_find_free_block(int size, int *block_size);5
void __fastcall mpqapi_rename(char *pszOld, char *pszNew);5
bool __fastcall mpqapi_has_file(char *pszName);5
bool __fastcall mpqapi_open_archive(char *pszArchive, bool hidden, int dwChar);5
bool __fastcall mpqapi_parse_archive_header(TMPQHeader *pHdr, int *pdwNextFileStart);5
void __fastcall mpqapi_close_archive(char *pszArchive, bool bFree, int dwChar);5
void __fastcall mpqapi_store_modified_time(char *pszArchive, int dwChar);5
void __fastcall mpqapi_flush_and_close(char *pszArchive, bool bFree, int dwChar);5
bool __cdecl mpqapi_write_header();5
bool __cdecl mpqapi_write_block_table();5
bool __cdecl mpqapi_write_hash_table();5
bool __cdecl mpqapi_can_seek();5
5
/* data */5
5
extern int mpqapi_inf; // weak5
5
/* rdata */5
5
extern HANDLE sghArchive; // idb5
5
#endif /* __MPQAPI_H__ */5
//HEADER_GOES_HERE5
#ifndef __MSG_H__5
#define __MSG_H__5
5
extern int sgdwOwnerWait; // weak5
extern int msg_cpp_init_value; // weak5
extern int sgdwRecvOffset; // idb5
extern int sgnCurrMegaPlayer; // weak5
extern DLevel sgLevels[17];5
extern char sbLastCmd; // weak5
extern TMegaPkt *sgpCurrPkt;5
extern char sgRecvBuf[4722];5
extern unsigned char sgbRecvCmd; // idb5
extern LocalLevel sgLocals[17];5
extern DJunk sgJunk[4];5
extern TMegaPkt *sgpMegaPkt;5
extern char sgbDeltaChanged; // weak5
extern char sgbDeltaChunks; // weak5
extern int deltaload; // weak5
extern char gbBufferMsgs; // weak5
extern int dword_676198; // weak5
extern int msg_err_timer; // weak5
5
void __cdecl msg_cpp_init();5
void __fastcall msg_send_drop_pkt(int pnum, int reason);5
void __fastcall msg_send_packet(int pnum, void *packet, int dwSize);5
TMegaPkt *__cdecl msg_get_next_packet();5
int __cdecl msg_wait_resync();5
void __cdecl msg_free_packets();5
int __cdecl msg_wait_for_turns();5
void __cdecl msg_process_net_packets();5
void __cdecl msg_pre_packet();5
void __fastcall DeltaExportData(int pnum);5
void *__fastcall DeltaExportItem(void *dst, void *src);5
void *__fastcall DeltaExportObject(void *dst, void *src);5
void *__fastcall DeltaExportMonster(void *dst, void *src);5
char *__fastcall DeltaExportJunk(char *a1);5
int __fastcall msg_comp_level(char *buffer, int size);5
void __cdecl delta_init();5
void __fastcall delta_kill_monster(int mi, unsigned char x, unsigned char y, unsigned char bLevel);5
void __fastcall delta_monster_hp(int mi, int hp, unsigned char bLevel);5
void __fastcall delta_sync_monster(TCmdLocParam1 *packet, char level);5
void __fastcall delta_sync_golem(TCmdGolem *pG, int pnum, int bLevel);5
void __fastcall delta_leave_sync(unsigned char bLevel);5
bool __fastcall delta_portal_inited(int portal_num);5
bool __fastcall delta_quest_inited(int quest_num);5
void __fastcall DeltaAddItem(int ii);5
void __cdecl DeltaSaveLevel();5
void __cdecl DeltaLoadLevel();5
void __fastcall NetSendCmd(unsigned char bHiPri, unsigned char bCmd);5
void __fastcall NetSendCmdGolem(unsigned char mx, unsigned char my, unsigned char dir, unsigned char menemy, int hp, int cl);5
void __fastcall NetSendCmdLoc(unsigned char bHiPri, unsigned char bCmd, unsigned char x, unsigned char y);5
void __fastcall NetSendCmdLocParam1(unsigned char bHiPri, unsigned char bCmd, unsigned char x, unsigned char y, int wParam1);5
void __fastcall NetSendCmdLocParam2(unsigned char bHiPri, unsigned char bCmd, unsigned char x, unsigned char y, int wParam1, int wParam2);5
void __fastcall NetSendCmdLocParam3(unsigned char bHiPri, unsigned char bCmd, unsigned char x, unsigned char y, int wParam1, int wParam2, int wParam3);5
void __fastcall NetSendCmdParam1(unsigned char bHiPri, unsigned char bCmd, unsigned short wParam1);5
void __fastcall NetSendCmdParam2(unsigned char bHiPri, unsigned char bCmd, unsigned short wParam1, unsigned short wParam2);5
void __fastcall NetSendCmdParam3(unsigned char bHiPri, unsigned char bCmd, unsigned short wParam1, unsigned short wParam2, int wParam3);5
void __fastcall NetSendCmdQuest(unsigned char bHiPri, unsigned char q);5
void __fastcall NetSendCmdGItem(unsigned char bHiPri, unsigned char bCmd, unsigned char mast, unsigned char pnum, int ii);5
void __fastcall NetSendCmdGItem2(unsigned char usonly, unsigned char bCmd, unsigned char mast, unsigned char pnum, struct TCmdGItem *p);5
bool __fastcall NetSendCmdReq2(unsigned char bCmd, unsigned char mast, unsigned char pnum, struct TCmdGItem *p);5
void __fastcall NetSendCmdExtra(struct TCmdGItem *p);5
void __fastcall NetSendCmdPItem(unsigned char bHiPri, unsigned char bCmd, unsigned char x, unsigned char y);5
void __fastcall NetSendCmdChItem(unsigned char bHiPri, unsigned char bLoc);5
void __fastcall NetSendCmdDelItem(unsigned char bHiPri, unsigned char bLoc);5
void __fastcall NetSendCmdDItem(unsigned char bHiPri, int ii);5
void __fastcall NetSendCmdDamage(unsigned char bHiPri, unsigned char bPlr, unsigned int dwDam);5
void __fastcall NetSendCmdString(int a1, const char *pszStr);5
void __fastcall RemovePlrPortal(int pnum);5
int __fastcall ParseCmd(int pnum, TCmd *pCmd);5
void __fastcall DeltaImportData(unsigned char cmd, int recv_offset);5
void *__fastcall DeltaImportItem(void *src, void *dst);5
void *__fastcall DeltaImportObject(void *src, void *dst);5
void *__fastcall DeltaImportMonster(void *src, void *dst);5
char __fastcall DeltaImportJunk(int a1);5
int __fastcall On_SYNCDATA(void *packet, int pnum);5
int __fastcall On_WALKXY(struct TCmdLoc *pCmd, int pnum);5
int __fastcall On_ADDSTR(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_ADDMAG(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_ADDDEX(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_ADDVIT(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_SBSPELL(struct TCmdParam1 *pCmd, int pnum);5
void msg_errorf(char *pszFmt, ...);5
int __fastcall On_GOTOGETITEM(struct TCmdLocParam1 *pCmd, int pnum);5
int __fastcall On_REQUESTGITEM(struct TCmdGItem *pCmd, int pnum);5
bool __fastcall i_own_level(int nReqLevel);5
int __fastcall On_GETITEM(struct TCmdGItem *pCmd, int pnum);5
bool __fastcall delta_get_item(struct TCmdGItem *pI, unsigned char bLevel);5
int __fastcall On_GOTOAGETITEM(struct TCmdLocParam1 *pCmd, int pnum);5
int __fastcall On_REQUESTAGITEM(struct TCmdGItem *pCmd, int pnum);5
int __fastcall On_AGETITEM(struct TCmdGItem *pCmd, int pnum);5
int __fastcall On_ITEMEXTRA(struct TCmdGItem *pCmd, int pnum);5
int __fastcall On_PUTITEM(struct TCmdPItem *pCmd, int pnum);5
void __fastcall delta_put_item(struct TCmdPItem *pI, int x, int y, unsigned char bLevel);5
void __fastcall check_update_plr(int pnum);5
int __fastcall On_SYNCPUTITEM(struct TCmdPItem *pCmd, int pnum);5
int __fastcall On_RESPAWNITEM(struct TCmdPItem *pCmd, int pnum);5
int __fastcall On_ATTACKXY(struct TCmdLoc *pCmd, int pnum);5
int __fastcall On_SATTACKXY(struct TCmdLoc *pCmd, int pnum);5
int __fastcall On_RATTACKXY(struct TCmdLoc *pCmd, int pnum);5
int __fastcall On_SPELLXYD(struct TCmdLocParam3 *pCmd, int pnum);5
int __fastcall On_SPELLXY(struct TCmdLocParam2 *pCmd, int pnum);5
int __fastcall On_TSPELLXY(struct TCmdLocParam2 *pCmd, int pnum);5
int __fastcall On_OPOBJXY(struct TCmdLocParam1 *pCmd, int pnum);5
int __fastcall On_DISARMXY(struct TCmdLocParam1 *pCmd, int pnum);5
int __fastcall On_OPOBJT(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_ATTACKID(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_ATTACKPID(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_RATTACKID(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_RATTACKPID(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_SPELLID(struct TCmdLocParam2 *pCmd, int pnum);5
int __fastcall On_SPELLPID(struct TCmdLocParam2 *pCmd, int pnum);5
int __fastcall On_TSPELLID(struct TCmdLocParam2 *pCmd, int pnum);5
int __fastcall On_TSPELLPID(struct TCmdLocParam2 *pCmd, int pnum);5
int __fastcall On_KNOCKBACK(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_RESURRECT(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_HEALOTHER(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_TALKXY(struct TCmdLocParam1 *pCmd, int pnum);5
int __fastcall On_NEWLVL(struct TCmdParam2 *pCmd, int pnum);5
int __fastcall On_WARP(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_MONSTDEATH(struct TCmdLocParam1 *pCmd, int pnum);5
int __fastcall On_KILLGOLEM(struct TCmdLocParam1 *pCmd, int pnum);5
int __fastcall On_AWAKEGOLEM(struct TCmdGolem *pCmd, int pnum);5
int __fastcall On_MONSTDAMAGE(struct TCmdLocParam1 *pCmd, int pnum);5
int __fastcall On_PLRDEAD(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_PLRDAMAGE(struct TCmdDamage *pCmd, int pnum);5
int __fastcall On_OPENDOOR(struct TCmdParam1 *pCmd, int pnum);5
void __fastcall delta_sync_object(int oi, unsigned char bCmd, unsigned char bLevel);5
int __fastcall On_CLOSEDOOR(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_OPERATEOBJ(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_PLROPOBJ(struct TCmdParam2 *pCmd, int pnum);5
int __fastcall On_BREAKOBJ(struct TCmdParam2 *pCmd, int pnum);5
int __fastcall On_CHANGEPLRITEMS(struct TCmdChItem *pCmd, int pnum);5
int __fastcall On_DELPLRITEMS(struct TCmdDelItem *pCmd, int pnum);5
int __fastcall On_PLRLEVEL(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_DROPITEM(struct TCmdPItem *pCmd, int pnum);5
int __fastcall On_SEND_PLRINFO(struct TCmdPlrInfoHdr *pCmd, int pnum);5
int __fastcall On_ACK_PLRINFO(struct TCmdPlrInfoHdr *pCmd, int pnum);5
int __fastcall On_PLAYER_JOINLEVEL(struct TCmdLocParam1 *pCmd, int pnum);5
int __fastcall On_ACTIVATEPORTAL(DJunk *pCmd, int pnum);5
void __fastcall delta_open_portal(int pnum, int x, int y, int bLevel, int bLType, int bSetLvl);5
int __fastcall On_DEACTIVATEPORTAL(struct TCmd *pCmd, int pnum);5
int __fastcall On_RETOWN(struct TCmd *pCmd, int pnum);5
int __fastcall On_SETSTR(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_SETDEX(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_SETMAG(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_SETVIT(struct TCmdParam1 *pCmd, int pnum);5
int __fastcall On_STRING(struct TCmdString *pCmd, int pnum);5
int __fastcall On_SYNCQUEST(struct TCmdQuest *pCmd, int pnum);5
int __fastcall On_ENDSHIELD(int a1, int pnum);5
#ifdef _DEBUG5
int __fastcall On_CHEAT_EXPERIENCE(struct TCmd *pCmd, int pnum);5
int __fastcall On_CHEAT_SPELL_LEVEL(struct TCmd *pCmd, int pnum);5
#endif5
int __cdecl On_DEBUG();5
int __fastcall On_NOVA(struct TCmdLoc *pCmd, int pnum);5
int __fastcall On_SETSHIELD(int unused, int pnum);5
int __fastcall On_REMSHIELD(int unused, int pnum);5
5
/* data */5
5
extern int msg_inf; // weak5
5
#endif /* __MSG_H__ */5
//HEADER_GOES_HERE5
#ifndef __MSGCMD_H__5
#define __MSGCMD_H__5
5
extern int msgcmd_cpp_init_value; // weak5
extern ChatCmd sgChat_Cmd;5
extern int sgdwMsgCmdTimer;5
5
void __cdecl msgcmd_cpp_init_1();5
void __cdecl msgcmd_cpp_init_2();5
void __cdecl msgcmd_init_event();5
void __cdecl msgcmd_cleanup_chatcmd_atexit();5
void __cdecl msgcmd_cleanup_chatcmd();5
void __cdecl msgcmd_cmd_cleanup();5
void __cdecl msgcmd_send_chat();5
bool __fastcall msgcmd_add_server_cmd_W(char *chat_message);5
void __fastcall msgcmd_add_server_cmd(char *command);5
void __fastcall msgcmd_init_chatcmd(ChatCmd *chat_cmd);5
void __fastcall msgcmd_free_event(ChatCmd *a1);5
bool __fastcall msgcmd_delete_server_cmd_W(ChatCmd *cmd, ServerCommand *extern_msg);5
ChatCmd *__fastcall msgcmd_alloc_event(ChatCmd *a1, int a2, int a3, int a4, int a5);5
void __fastcall msgcmd_remove_event(ChatCmd *a1, int a2);5
void __fastcall msgcmd_event_type(ChatCmd *a1, int a2, int *a3, int a4, int a5);5
void __fastcall msgcmd_cleanup_chatcmd_1(ChatCmd *a1);5
void __fastcall msgcmd_cleanup_extern_msg(ServerCommand **extern_msgs);5
5
/* data */5
5
extern int msgcmd_inf; // weak5
5
#endif /* __MSGCMD_H__ */5
//HEADER_GOES_HERE5
#ifndef __MULTI_H__5
#define __MULTI_H__5
5
extern char gbSomebodyWonGameKludge; // weak5
extern char pkdata_6761C0[4100];5
extern char szPlayerDescript[128];5
extern short sgwPackPlrOffsetTbl[4];5
extern PkPlayerStruct pkplr[4];5
extern char sgbPlayerTurnBitTbl[4];5
extern char sgbPlayerLeftGameTbl[4];5
extern int multi_cpp_init_value; // weak5
extern int sgbSentThisCycle; // idb5
extern int dword_678628; // weak5
extern char gbActivePlayers; // weak5
extern char gbGameDestroyed; // weak5
extern char sgbSendDeltaTbl[4];5
extern _gamedata sgGameInitInfo;5
extern char byte_678640; // weak5
extern int sglTimeoutStart; // weak5
extern int sgdwPlayerLeftReasonTbl[4];5
extern char pkdata_678658[4100];5
extern unsigned int sgdwGameLoops; // idb5
extern char gbMaxPlayers; // weak5
extern char sgbTimeout; // weak5
extern char szPlayerName[128];5
extern char gbDeltaSender; // weak5
extern int sgbNetInited; // weak5
extern int player_state[4];5
5
void __cdecl multi_cpp_init();5
void __fastcall multi_msg_add(unsigned char *a1, unsigned char a2);5
void __fastcall NetSendLoPri(unsigned char *pbMsg, unsigned char bLen);5
void __fastcall multi_copy_packet(void *a1, void *packet, int size);5
void __fastcall multi_send_packet(void *packet, int dwSize);5
void __fastcall NetRecvPlrData(TPkt *pkt);5
void __fastcall NetSendHiPri(unsigned char *pbMsg, unsigned char bLen);5
unsigned char *__fastcall multi_recv_packet(void *packet, unsigned char *a2, int *a3);5
void __fastcall multi_send_msg_packet(int a1, unsigned char *a2, unsigned char len);5
void __cdecl multi_msg_countdown();5
void __fastcall multi_parse_turn(int pnum, int turn);5
void __fastcall multi_handle_turn_upper_bit(int pnum);5
void __fastcall multi_player_left(int pnum, int reason);5
void __cdecl multi_clear_left_tbl();5
void __fastcall multi_player_left_msg(int pnum, int left);5
void __cdecl multi_net_ping();5
int __cdecl multi_handle_delta();5
int __fastcall multi_check_pkt_valid(char *a1);5
void __cdecl multi_mon_seeds();5
void __cdecl multi_begin_timeout();5
void __cdecl multi_check_drop_player();5
void __cdecl multi_process_network_packets();5
void __fastcall multi_handle_all_packets(int players, TPkt *packet, int a3);5
void __cdecl multi_process_tmsgs();5
void __fastcall multi_send_zero_packet(int pnum, char a2, void *pbSrc, int dwLen);5
void __cdecl NetClose();5
char __fastcall multi_event_handler(int a1);5
void __stdcall multi_handle_events(_SNETEVENT *pEvt);5
int __fastcall NetInit(int bSinglePlayer, int *pfExitProgram);5
void __fastcall multi_clear_pkt(char *a1);5
void __fastcall multi_send_pinfo(int pnum, TCmdPlrInfoHdr *cmd);5
int __fastcall InitNewSeed(int newseed);5
void __cdecl SetupLocalCoords();5
int __fastcall multi_init_single(_SNETPROGRAMDATA *client_info, _SNETPLAYERDATA *user_info, _SNETUIDATA *ui_info);5
int __fastcall multi_init_multi(_SNETPROGRAMDATA *client_info, _SNETPLAYERDATA *user_info, _SNETUIDATA *ui_info, int *a4);5
int __fastcall multi_upgrade(int *a1);5
void __fastcall multi_player_joins(int pnum, TCmdPlrInfoHdr *cmd, int a3);5
5
/* data */5
5
extern int multi_inf; // weak5
extern event_type event_types[3];5
5
#endif /* __MULTI_H__ */5
//HEADER_GOES_HERE5
#ifndef __NTHREAD_H__5
#define __NTHREAD_H__5
5
extern int nthread_cpp_init_value; // weak5
extern char byte_679704; // weak5
extern int gdwMsgLenTbl[4];5
extern int gdwDeltaBytesSec; // weak5
extern char byte_679734; // weak5
extern int gdwTurnsInTransit; // weak5
extern int glpMsgTbl[4];5
extern unsigned int glpNThreadId;5
extern char sgbSyncCountdown; // weak5
extern int dword_679754; // weak5
extern char byte_679758; // weak5
extern char sgbPacketCountdown; // weak5
extern char sgbThreadIsRunning; // weak5
extern int gdwLargestMsgSize; // weak5
extern int gdwNormalMsgSize; // weak5
extern int dword_679764; // weak5
5
void __cdecl nthread_cpp_init_1();5
void __cdecl nthread_cpp_init_2();5
void __cdecl nthread_init_mutex();5
void __cdecl nthread_cleanup_mutex_atexit();5
void __cdecl nthread_cleanup_mutex();5
void __fastcall nthread_terminate_game(char *pszFcn);5
int __fastcall nthread_send_and_recv_turn(int cur_turn, int turn_delta);5
int __fastcall nthread_recv_turns(int *pfSendAsync);5
void __cdecl nthread_set_turn_upper_bit();5
void __fastcall nthread_start(bool set_turn_upper_bit);5
unsigned int __stdcall nthread_handler(void *a1);5
void __cdecl nthread_cleanup();5
void __fastcall nthread_ignore_mutex(bool bStart);5
bool __cdecl nthread_has_500ms_passed();5
5
/* data */5
5
extern int nthread_inf; // weak5
5
#endif /* __NTHREAD_H__ */5
//HEADER_GOES_HERE5
#ifndef __OBJECTS_H__5
#define __OBJECTS_H__5
5
extern int trapid; // weak5
extern int trapdir; // weak5
extern int pObjCels[40];5
extern char ObjFileList[40];5
extern int objectactive[127];5
extern int nobjects; // idb5
extern int leverid; // idb5
extern int objectavail[127];5
extern ObjectStruct object[127];5
extern int InitObjFlag; // weak5
extern int numobjfiles; // weak5
5
void __cdecl InitObjectGFX();5
void __cdecl FreeObjectGFX();5
bool __fastcall RndLocOk(int xp, int yp);5
void __fastcall InitRndLocObj(int min, int max, int objtype);5
void __fastcall InitRndLocBigObj(int min, int max, int objtype);5
void __fastcall InitRndLocObj5x5(int min, int max, int objtype);5
void __cdecl ClrAllObjects();5
void __cdecl AddTortures();5
void __cdecl AddCandles();5
void __fastcall AddBookLever(int lx1, int ly1, int lx2, int ly2, int x1, int y1, int x2, int y2, int msg);5
void __cdecl InitRndBarrels();5
void __fastcall AddL1Objs(int x1, int y1, int x2, int y2);5
void __fastcall AddL2Objs(int x1, int y1, int x2, int y2);5
void __fastcall AddL3Objs(int x1, int y1, int x2, int y2);5
bool __fastcall WallTrapLocOk(int xp, int yp);5
void __cdecl AddL2Torches();5
bool __fastcall TorchLocOK(int xp, int yp);5
void __cdecl AddObjTraps();5
void __cdecl AddChestTraps();5
void __fastcall LoadMapObjects(unsigned char *pMap, int startx, int starty, int x1, int y1, int w, int h, int leveridx);5
void __fastcall LoadMapObjs(unsigned char *pMap, int startx, int starty);5
void __cdecl AddDiabObjs();5
void __cdecl AddStoryBooks();5
void __fastcall AddHookedBodies(int freq);5
void __cdecl AddL4Goodies();5
void __cdecl AddLazStand();5
void __fastcall InitObjects(int a1);5
void __fastcall SetMapObjects(char *pMap, int startx, int starty);5
void __fastcall DeleteObject(int oi, int i);5
void __fastcall SetupObject(int i, int x, int y, int ot);5
void __fastcall SetObjMapRange(int i, int x1, int y1, int x2, int y2, int v);5
void __fastcall SetBookMsg(int i, int msg);5
void __fastcall AddL1Door(int i, int x, int y, int ot);5
void __fastcall AddSCambBook(int i);5
void __fastcall AddChest(int i, int t);5
void __fastcall AddL2Door(int i, int x, int y, int ot);5
void __fastcall AddL3Door(int i, int x, int y, int ot);5
void __fastcall AddSarc(int i);5
void __fastcall AddFlameTrap(int i);5
void __fastcall AddFlameLvr(int i);5
void __fastcall AddTrap(int i);5
void __fastcall AddObjLight(int i, int r);5
void __fastcall AddBarrel(int i);5
void __fastcall AddShrine(int i);5
void __fastcall AddBookcase(int i);5
void __fastcall AddPurifyingFountain(int i);5
void __fastcall AddArmorStand(int i);5
void __fastcall AddDecap(int i);5
void __fastcall AddVilebook(int i);5
void __fastcall AddMagicCircle(int i);5
void __fastcall AddBookstand(int i);5
void __fastcall AddPedistal(int i);5
void __fastcall AddStoryBook(int i);5
void __fastcall AddWeaponRack(int i);5
void __fastcall AddTorturedBody(int i);5
void __fastcall GetRndObjLoc(int randarea, int *xx, int *yy);5
void __cdecl AddMushPatch();5
void __cdecl AddSlainHero();5
void __fastcall AddObject(int ot, int ox, int oy);5
void __fastcall Obj_Light(int i, int lr);5
void __fastcall Obj_Circle(int i);5
void __fastcall Obj_StopAnim(int i);5
void __fastcall Obj_Door(int i);5
void __fastcall Obj_Sarc(int i);5
void __fastcall ActivateTrapLine(int ttype, int tid);5
void __fastcall Obj_FlameTrap(int i);5
void __fastcall Obj_Trap(int i);5
void __fastcall Obj_BCrossDamage(int i);5
void __cdecl ProcessObjects();5
void __fastcall ObjSetMicro(int dx, int dy, int pn);5
void __fastcall objects_set_door_piece(int x, int y);5
void __fastcall ObjSetMini(int x, int y, int v);5
void __fastcall ObjL1Special(int x1, int y1, int x2, int y2);5
void __fastcall ObjL2Special(int x1, int y1, int x2, int y2);5
void __fastcall DoorSet(int oi, int dx, int dy);5
void __cdecl RedoPlayerVision();5
void __fastcall OperateL1RDoor(int pnum, int oi, unsigned char sendflag);5
void __fastcall OperateL1LDoor(int pnum, int oi, unsigned char sendflag);5
void __fastcall OperateL2RDoor(int pnum, int oi, unsigned char sendflag);5
void __fastcall OperateL2LDoor(int pnum, int oi, unsigned char sendflag);5
void __fastcall OperateL3RDoor(int pnum, int oi, unsigned char sendflag);5
void __fastcall OperateL3LDoor(int pnum, int oi, unsigned char sendflag);5
void __fastcall MonstCheckDoors(int m);5
void __fastcall ObjChangeMap(int x1, int y1, int x2, int y2);5
void __fastcall ObjChangeMapResync(int x1, int y1, int x2, int y2);5
void __fastcall OperateL1Door(int pnum, int i, unsigned char sendflag);5
void __fastcall OperateLever(int pnum, int i);5
void __fastcall OperateBook(int pnum, int i);5
void __fastcall OperateBookLever(int pnum, int i);5
void __fastcall OperateSChambBk(int pnum, int i);5
void __fastcall OperateChest(int pnum, int i, unsigned char sendmsg);5
void __fastcall OperateMushPatch(int pnum, int i);5
void __fastcall OperateInnSignChest(int pnum, int i);5
void __fastcall OperateSlainHero(int pnum, int i, unsigned char sendmsg);5
void __fastcall OperateTrapLvr(int i);5
void __fastcall OperateSarc(int pnum, int i, unsigned char sendmsg);5
void __fastcall OperateL2Door(int pnum, int i, unsigned char sendflag);5
void __fastcall OperateL3Door(int pnum, int i, unsigned char sendflag);5
void __fastcall OperatePedistal(int pnum, int i);5
void __fastcall TryDisarm(int pnum, int i);5
int __fastcall ItemMiscIdIdx(int imiscid);5
void __fastcall OperateShrine(int pnum, int i, int sType);5
void __fastcall OperateSkelBook(int pnum, int i, unsigned char sendmsg);5
void __fastcall OperateBookCase(int pnum, int i, unsigned char sendmsg);5
void __fastcall OperateDecap(int pnum, int i, unsigned char sendmsg);5
void __fastcall OperateArmorStand(int pnum, int i, unsigned char sendmsg);5
int __fastcall FindValidShrine(int i);5
void __fastcall OperateGoatShrine(int pnum, int i, int sType);5
void __fastcall OperateCauldron(int pnum, int i, int sType);5
bool __fastcall OperateFountains(int pnum, int i);5
void __fastcall OperateWeaponRack(int pnum, int i, unsigned char sendmsg);5
void __fastcall OperateStoryBook(int pnum, int i);5
void __fastcall OperateLazStand(int pnum, int i);5
void __fastcall OperateObject(int pnum, int i, unsigned char TeleFlag);5
void __fastcall SyncOpL1Door(int pnum, int cmd, int i);5
void __fastcall SyncOpL2Door(int pnum, int cmd, int i);5
void __fastcall SyncOpL3Door(int pnum, int cmd, int i);5
void __fastcall SyncOpObject(int pnum, int cmd, int i);5
void __fastcall BreakCrux(int i);5
void __fastcall BreakBarrel(int pnum, int i, int dam, unsigned char forcebreak, int sendmsg);5
void __fastcall BreakObject(int pnum, int oi);5
void __fastcall SyncBreakObj(int pnum, int oi);5
void __fastcall SyncL1Doors(int i);5
void __fastcall SyncCrux(int i);5
void __fastcall SyncLever(int i);5
void __fastcall SyncQSTLever(int i);5
void __fastcall SyncPedistal(int i);5
void __fastcall SyncL2Doors(int i);5
void __fastcall SyncL3Doors(int i);5
void __fastcall SyncObjectAnim(int o);5
void __fastcall GetObjectStr(int i);5
5
/* rdata */5
5
extern int ObjTypeConv[113];5
extern ObjDataStruct AllObjects[99];5
extern char *ObjMasterLoadList[56];5
extern int bxadd[8];5
extern int byadd[8];5
extern char *shrinestrs[26];5
extern unsigned char shrinemin[26];5
extern unsigned char shrinemax[26];5
extern unsigned char shrineavail[26];5
extern char *StoryBookName[9];5
extern int StoryText[3][3];5
5
#endif /* __OBJECTS_H__ */5
//HEADER_GOES_HERE5
#ifndef __PACK_H__5
#define __PACK_H__5
5
extern int pack_cpp_init_value; // weak5
5
void __cdecl pack_cpp_init();5
void __fastcall PackPlayer(PkPlayerStruct *pPack, int pnum, bool manashield);5
void __fastcall PackItem(PkItemStruct *id, ItemStruct *is);5
void __fastcall VerifyGoldSeeds(PlayerStruct *pPlayer);5
void __fastcall UnPackPlayer(PkPlayerStruct *pPack, int pnum, bool killok);5
void __fastcall UnPackItem(PkItemStruct *is, ItemStruct *id);5
5
/* data */5
5
extern int pack_inf; // weak5
5
#endif /* __PACK_H__ */5
//HEADER_GOES_HERE5
#ifndef __PALETTE_H__5
#define __PALETTE_H__5
5
extern PALETTEENTRY logical_palette[256];5
extern int palette_cpp_init_value; // weak5
extern PALETTEENTRY system_palette[256];5
extern PALETTEENTRY orig_palette[256];5
extern UINT gdwPalEntries;5
5
void __cdecl palette_cpp_init();5
void __cdecl palette_save_gamme();5
void __cdecl palette_init();5
void __cdecl palette_load_gamma();5
void __cdecl LoadSysPal();5
void __fastcall LoadPalette(char *pszFileName);5
void __fastcall LoadRndLvlPal(int l);5
void __cdecl ResetPal();5
void __cdecl palette_inc_gamma();5
void __cdecl palette_update();5
void __fastcall palette_apply_gamma_correction(PALETTEENTRY *dst, PALETTEENTRY *src, int n);5
void __cdecl palette_dec_gamma();5
int __fastcall palette_update_gamma(int gamma);5
void __cdecl BlackPalette();5
void __fastcall SetFadeLevel(int brightness);5
void __fastcall PaletteFadeIn(int fr);5
void __fastcall PaletteFadeOut(int fr);5
void __cdecl palette_update_caves();5
void __fastcall palette_update_quest_palette(int n);5
bool __cdecl palette_get_colour_cycling();5
void __fastcall palette_set_color_cycling(bool enabled);5
5
/* data */5
5
extern int palette_inf; // weak5
5
/* rdata */5
5
extern int gamma_correction; // idb5
extern int color_cycling_enabled; // idb5
extern bool sgbFadedIn;5
5
#endif /* __PALETTE_H__ */5
//HEADER_GOES_HERE5
#ifndef __PATH_H__5
#define __PATH_H__5
5
extern PATHNODE path_nodes[300];5
extern int gdwCurPathStep;5
extern int pnode_vals[26];5
extern PATHNODE *pnode_ptr;5
extern PATHNODE *pnode_tblptr[300];5
extern PATHNODE path_2_nodes[300];5
5
int __fastcall FindPath(bool (__fastcall *PosOk)(int, int, int), int PosOkArg, int sx, int sy, int dx, int dy, char *path);5
int __fastcall path_get_h_cost(int sx, int sy, int dx, int dy);5
int __fastcall path_check_equal(PATHNODE *pPath, int dx, int dy);5
PATHNODE *__cdecl GetNextPath();5
bool __fastcall path_solid_pieces(PATHNODE *pPath, int dx, int dy);5
int __fastcall path_get_path(bool (__fastcall *PosOk)(int, int, int), int PosOkArg, PATHNODE *pPath, int x, int y);5
int __fastcall path_parent_path(PATHNODE *pPath, int dx, int dy, int sx, int sy);5
PATHNODE *__fastcall path_get_node1(int dx, int dy);5
PATHNODE *__fastcall path_get_node2(int dx, int dy);5
void __fastcall path_next_node(PATHNODE *pPath);5
void __fastcall path_set_coords(PATHNODE *pPath);5
void __fastcall path_push_active_step(PATHNODE *pPath);5
PATHNODE *__cdecl path_pop_active_step();5
PATHNODE *__cdecl path_new_step();5
5
/* data */5
5
extern char pathxdir[8];5
extern char pathydir[8];5
5
/* rdata */5
extern char path_directions[9];5
5
#endif /* __PATH_H__ */5
//HEADER_GOES_HERE5
#ifndef __PFILE_H__5
#define __PFILE_H__5
5
extern int pfile_cpp_init_value;5
extern char hero_names[320];5
extern bool gbValidSaveFile; // idb5
extern int save_prev_tc; // weak5
5
void __cdecl pfile_cpp_init();5
void __cdecl pfile_init_save_directory();5
void __fastcall pfile_check_available_space(char *pszDir);5
void __cdecl pfile_write_hero();5
int __fastcall pfile_get_save_num_from_name(char *name);5
void __fastcall pfile_encode_hero(PkPlayerStruct *pPack);5
bool __fastcall pfile_open_archive(bool a1, int save_num);5
void __fastcall pfile_get_save_path(char *pszBuf, int dwBufSize, int save_num);5
void __fastcall pfile_flush(bool is_single_player, int save_num);5
bool __fastcall pfile_create_player_description(char *dst, int len);5
int __fastcall pfile_create_save_file(char *name_1, char *name_2);5
void __cdecl pfile_flush_W();5
void __fastcall game_2_ui_player(PlayerStruct *p, _uiheroinfo *heroinfo, bool bHasSaveFile);5
char __fastcall game_2_ui_class(PlayerStruct *p);5
bool __stdcall pfile_ui_set_hero_infos(void (__stdcall *ui_add_hero_info)(_uiheroinfo *));5
char *__fastcall GetSaveDirectory(char *dst, int dst_size, int save_num);5
bool __fastcall pfile_read_hero(void *archive, PkPlayerStruct *pPack);5
void *__fastcall pfile_open_save_archive(int *unused, int save_num);5
void __fastcall pfile_SFileCloseArchive(void *hsArchive);5
bool __fastcall pfile_archive_contains_game(void *hsArchive);5
bool __stdcall pfile_ui_set_class_stats(int player_class_nr, _uidefaultstats *class_stats);5
int __fastcall pfile_get_player_class(int player_class_nr);5
bool __stdcall pfile_ui_save_create(_uiheroinfo *heroinfo);5
bool __stdcall pfile_get_file_name(int lvl, char *dst);5
bool __stdcall pfile_delete_save(_uiheroinfo *hero_info);5
void __cdecl pfile_read_player_from_save();5
void __fastcall GetTempLevelNames(char *szTemp);5
void __fastcall GetPermLevelNames(char *szPerm);5
void __fastcall pfile_get_game_name(char *dst);5
void __cdecl pfile_remove_temp_files();5
bool __stdcall GetTempSaveNames(int dwIndex, char *szTemp);5
void __cdecl pfile_rename_temp_to_perm();5
bool __stdcall GetPermSaveNames(int dwIndex, char *szPerm);5
void __fastcall pfile_write_save_file(char *pszName, void *pbData, int dwLen, int qwLen);5
void __fastcall pfile_strcpy(char *dst, char *src);5
char *__fastcall pfile_read(char *pszName, int *pdwLen);5
void __fastcall pfile_update(bool force_save);5
5
/* data */5
5
extern int pfile_inf; // weak5
5
#endif /* __PFILE_H__ */5
//HEADER_GOES_HERE5
#ifndef __PLAYER_H__5
#define __PLAYER_H__5
5
extern int plr_lframe_size; // idb5
extern int plr_wframe_size; // idb5
extern char plr_gfx_flag; // weak5
extern int player_cpp_init_value; // weak5
extern int plr_aframe_size; // idb5
extern int myplr;5
extern PlayerStruct plr[4];5
extern int plr_fframe_size; // idb5
extern int plr_qframe_size; // idb5
extern int deathflag; // idb5
extern int plr_hframe_size; // idb5
extern int plr_bframe_size; // idb5
extern char plr_gfx_bflag; // weak5
extern int plr_sframe_size; // idb5
extern int deathdelay; // weak5
extern int plr_dframe_size; // idb5
5
void __cdecl player_cpp_init();5
void __fastcall player_init_cl2_hdrs(char *src, char *dst);5
void __fastcall LoadPlrGFX(int pnum, int gfxflag);5
void __fastcall InitPlayerGFX(int pnum);5
void __fastcall InitPlrGFXMem(int pnum);5
int __fastcall GetPlrGFXSize(char *szCel);5
void __fastcall FreePlayerGFX(int pnum);5
void __fastcall NewPlrAnim(int pnum, int Peq, int numFrames, int Delay, int width);5
void __fastcall ClearPlrPVars(int pnum);5
void __fastcall SetPlrAnims(int pnum);5
void __fastcall ClearPlrRVars(PlayerStruct *pPlayer);5
void __fastcall CreatePlayer(int pnum, char c);5
int __fastcall CalcStatDiff(int pnum);5
void __fastcall NextPlrLevel(int pnum);5
void __fastcall AddPlrExperience(int pnum, int lvl, int exp);5
void __fastcall AddPlrMonstExper(int lvl, int exp, char pmask);5
void __fastcall InitPlayer(int pnum, bool FirstTime);5
void __cdecl InitMultiView();5
void __fastcall InitPlayerLoc(int pnum, bool flag);5
bool __fastcall SolidLoc(int x, int y);5
bool __fastcall PlrDirOK(int pnum, int dir);5
void __fastcall PlrClrTrans(int x, int y);5
void __fastcall PlrDoTrans(int x, int y);5
void __fastcall SetPlayerOld(int pnum);5
void __fastcall FixPlayerLocation(int pnum, int dir);5
void __fastcall StartStand(int pnum, int dir);5
void __fastcall StartWalkStand(int pnum);5
void __fastcall PM_ChangeLightOff(int pnum);5
void __fastcall PM_ChangeOffset(int pnum);5
void __fastcall StartWalk(int pnum, int xvel, int yvel, int xadd, int yadd, int EndDir, int sdir);5
void __fastcall StartWalk2(int pnum, int xvel, int yvel, int xoff, int yoff, int xadd, int yadd, int EndDir, int sdir);5
void __fastcall StartWalk3(int pnum, int xvel, int yvel, int xoff, int yoff, int xadd, int yadd, int mapx, int mapy, int EndDir, int sdir);5
void __fastcall StartAttack(int pnum, int d);5
void __fastcall StartRangeAttack(int pnum, int d, int cx, int cy);5
void __fastcall StartPlrBlock(int pnum, int dir);5
void __fastcall StartSpell(int pnum, int d, int cx, int cy);5
void __fastcall FixPlrWalkTags(int pnum);5
void __fastcall RemovePlrFromMap(int pnum);5
void __fastcall StartPlrHit(int pnum, int dam, unsigned char forcehit);5
void __fastcall RespawnDeadItem(ItemStruct *itm, int x, int y);5
void __fastcall StartPlayerKill(int pnum, int earflag);5
void __fastcall PlrDeadItem(int pnum, struct ItemStruct *itm, int xx, int yy);5
void __fastcall DropHalfPlayersGold(int pnum);5
void __fastcall SyncPlrKill(int pnum, int earflag);5
void __fastcall j_StartPlayerKill(int pnum, int earflag);5
void __fastcall RemovePlrMissiles(int pnum);5
void __fastcall InitLevelChange(int pnum);5
void __fastcall StartNewLvl(int pnum, int fom, int lvl);5
void __fastcall RestartTownLvl(int pnum);5
void __fastcall StartWarpLvl(int pnum, int pidx);5
int __fastcall PM_DoStand(int pnum);5
int __fastcall PM_DoWalk(int pnum);5
int __fastcall PM_DoWalk2(int pnum);5
int __fastcall PM_DoWalk3(int pnum);5
bool __fastcall WeaponDur(int pnum, int durrnd);5
bool __fastcall PlrHitMonst(int pnum, int m);5
bool __fastcall PlrHitPlr(int pnum, char p);5
bool __fastcall PlrHitObj(int pnum, int mx, int my);5
int __fastcall PM_DoAttack(int pnum);5
int __fastcall PM_DoRangeAttack(int pnum);5
void __fastcall ShieldDur(int pnum);5
int __fastcall PM_DoBlock(int pnum);5
int __fastcall PM_DoSpell(int pnum);5
int __fastcall PM_DoGotHit(int pnum);5
void __fastcall ArmorDur(int pnum);5
int __fastcall PM_DoDeath(int pnum);5
void __fastcall CheckNewPath(int pnum);5
bool __fastcall PlrDeathModeOK(int pnum);5
void __cdecl ValidatePlayer();5
void __cdecl ProcessPlayers();5
void __fastcall CheckCheatStats(int pnum);5
void __fastcall ClrPlrPath(int pnum);5
bool __fastcall PosOkPlayer(int pnum, int px, int py);5
void __fastcall MakePlrPath(int pnum, int xx, int yy, unsigned char endspace);5
void __fastcall CheckPlrSpell();5
void __fastcall SyncPlrAnim(int pnum);5
void __fastcall SyncInitPlrPos(int pnum);5
void __fastcall SyncInitPlr(int pnum);5
void __fastcall CheckStats(int pnum);5
void __fastcall ModifyPlrStr(int pnum, int l);5
void __fastcall ModifyPlrMag(int pnum, int l);5
void __fastcall ModifyPlrDex(int pnum, int l);5
void __fastcall ModifyPlrVit(int pnum, int l);5
void __fastcall SetPlayerHitPoints(int pnum, int newhp);5
void __fastcall SetPlrStr(int pnum, int v);5
void __fastcall SetPlrMag(int pnum, int v);5
void __fastcall SetPlrDex(int pnum, int v);5
void __fastcall SetPlrVit(int pnum, int v);5
void __fastcall InitDungMsgs(int pnum);5
void __cdecl PlayDungMsgs();5
5
/* data */5
5
extern int player_inf;5
extern char ArmourChar[4];5
extern char WepChar[10];5
extern char CharChar[4];5
5
/* rdata */5
5
extern int plrxoff[9];5
extern int plryoff[9];5
extern int plrxoff2[9];5
extern int plryoff2[9];5
extern char PlrGFXAnimLens[3][11];5
extern int PWVel[4][3];5
extern int StrengthTbl[3];5
extern int MagicTbl[3];5
extern int DexterityTbl[3];5
extern int VitalityTbl[3];5
extern int ToBlkTbl[3];5
extern char *ClassStrTblOld[3];5
extern int MaxStats[3][4];5
extern int ExpLvlsTbl[51];5
extern char *ClassStrTbl[3];5
extern unsigned char fix[9];5
5
#endif /* __PLAYER_H__ */5
//HEADER_GOES_HERE5
#ifndef __PLRMSG_H__5
#define __PLRMSG_H__5
5
extern int plrmsg_ticks; // weak5
extern char plr_msg_slot; // weak5
extern _plrmsg plr_msgs[8];5
5
void __fastcall plrmsg_delay(int a1);5
char *__fastcall ErrorPlrMsg(char *pszMsg);5
size_t EventPlrMsg(char *pszFmt, ...);5
void __fastcall SendPlrMsg(int pnum, const char *pszStr);5
void __cdecl ClearPlrMsg();5
void __cdecl InitPlrMsg();5
void __cdecl DrawPlrMsg();5
void __fastcall PrintPlrMsg(int no, int x, int y, char *str, int just);5
5
/* data */5
5
extern text_color text_color_from_player_num[2];5
5
#endif /* __PLRMSG_H__ */5
//HEADER_GOES_HERE5
#ifndef __PORTAL_H__5
#define __PORTAL_H__5
5
extern PortalStruct portal[4];5
extern int portalindex;5
// int END_portalstruct; // weak5
5
void __cdecl InitPortals();5
void __fastcall SetPortalStats(int i, int o, int x, int y, int lvl, int lvltype);5
void __fastcall AddWarpMissile(int i, int x, int y);5
void __cdecl SyncPortals();5
void __fastcall AddInTownPortal(int i);5
void __fastcall ActivatePortal(int i, int x, int y, int lvl, int lvltype, int sp);5
void __fastcall DeactivatePortal(int i);5
bool __fastcall PortalOnLevel(int i);5
void __fastcall RemovePortalMissile(int id);5
void __fastcall SetCurrentPortal(int p);5
void __cdecl GetPortalLevel();5
void __cdecl GetPortalLvlPos();5
bool __fastcall PosOkPortal(int level, int x, int y);5
5
/* rdata */5
extern int WarpDropX[4];5
extern int WarpDropY[4];5
5
#endif /* __PORTAL_H__ */5
//HEADER_GOES_HERE5
#ifndef __QUESTS_H__5
#define __QUESTS_H__5
5
extern int qtopline; // idb5
extern int questlog; // weak5
extern void *pQLogCel;5
extern QuestStruct quests[16];5
extern int qline; // weak5
extern int qlist[16];5
extern int numqlines; // weak5
extern int WaterDone; // idb5
extern int ReturnLvlY; // idb5
extern int ReturnLvlX; // idb5
extern int ReturnLvlT; // idb5
extern int ALLQUESTS; // idb5
extern int ReturnLvl; // idb5
5
void __cdecl InitQuests();5
void __cdecl CheckQuests();5
bool __cdecl ForceQuests();5
bool __fastcall QuestStatus(int i);5
void __fastcall CheckQuestKill(int m, unsigned char sendmsg);5
void __cdecl DrawButcher();5
void __fastcall DrawSkelKing(int quest_id, int xx, int yy);5
void __fastcall DrawWarLord(int xx, int yy);5
void __fastcall DrawSChamber(int quest_id, int xx, int yy);5
void __fastcall DrawLTBanner(int xx, int yy);5
void __fastcall DrawBlind(int xx, int yy);5
void __fastcall DrawBlood(int xx, int yy);5
void __fastcall DRLG_CheckQuests(int xx, int yy);5
void __cdecl SetReturnLvlPos();5
void __cdecl GetReturnLvlPos();5
void __cdecl ResyncMPQuests();5
void __cdecl ResyncQuests();5
void __fastcall PrintQLString(int x, int y, unsigned char cjustflag, char *str, int col);5
void __cdecl DrawQuestLog();5
void __cdecl StartQuestlog();5
void __cdecl QuestlogUp();5
void __cdecl QuestlogDown();5
void __cdecl QuestlogEnter();5
void __cdecl QuestlogESC();5
void __fastcall SetMultiQuest(int q, int s, unsigned char l, int v1);5
5
/* rdata */5
extern QuestData questlist[16];5
extern char questxoff[7];5
extern char questyoff[7];5
extern char *questtrigstr[5];5
extern int QuestGroup1[3];5
extern int QuestGroup2[3];5
extern int QuestGroup3[3];5
extern int QuestGroup4[2];5
5
#endif /* __QUESTS_H__ */5
//HEADER_GOES_HERE5
#ifndef __RESTRICT_H__5
#define __RESTRICT_H__5
5
bool __cdecl SystemSupported();5
bool __cdecl RestrictedTest();5
bool __cdecl ReadOnlyTest();5
5
#endif /* __RESTRICT_H__ */5
//HEADER_GOES_HERE5
#ifndef __SCROLLRT_H__5
#define __SCROLLRT_H__5
5
extern int light_table_index; // weak5
extern int screen_y_times_768[1024];5
extern int scrollrt_cpp_init_value; // weak5
extern unsigned int sgdwCursWdtOld; // idb5
extern int sgdwCursX; // idb5
extern int sgdwCursY; // idb5
extern int screen_buf_end; // weak5
extern int sgdwCursHgt;5
extern int level_cel_block; // weak5
extern int sgdwCursXOld; // idb5
extern int sgdwCursYOld; // idb5
extern char arch_draw_type; // weak5
extern DDSURFACEDESC DDS_desc;5
extern int cel_transparency_active; // weak5
extern int level_piece_id; // weak5
extern int sgdwCursWdt;5
extern int (__fastcall *DrawPlrProc)(int player_num, int x, int y, int screen_x, int screen_y, void *cl2_buf, int frame, int frame_width, int a9, int a10);5
extern char cursor_draw_back_buffer[8192];5
extern int draw_monster_num; // weak5
extern int sgdwCursHgtOld; // idb5
5
void __cdecl scrollrt_cpp_init();5
void __cdecl ClearCursor();5
void __fastcall DrawMissile(int x, int y, int sx, int sy, int a5, int a6, int del_flag);5
void __fastcall DrawClippedMissile(int x, int y, int sx, int sy, int a5, int a6, int a7);5
void __fastcall DrawDeadPlayer(int x, int y, int sx, int sy, int a5, int a6, bool clipped);5
void __fastcall DrawPlayer(int pnum, int x, int y, int px, int py, int animdata, int animframe, int animwidth, int a9, int a10);5
void __fastcall DrawClippedPlayer(int pnum, int x, int y, int px, int py, int animdata, int animframe, int animwidth, int a9, int a10);5
void __fastcall DrawView(int StartX, int StartY);5
void __fastcall DrawGame(int x, int y);5
void __fastcall scrollrt_draw_lower(int x, int y, int sx, int sy, int a5, int some_flag);5
void __fastcall scrollrt_draw_clipped_dungeon(char *a1, int sx, int sy, int a4, int a5, int a6);5
void __fastcall DrawClippedMonster(int x, int y, int a3, int a4, int mon_id, int a6, int a7);5
void __fastcall DrawClippedObject(int x, int y, int a3, int a4, int pre_flag, int a6, int dir);5
void __fastcall scrollrt_draw_clipped_e_flag(char *buffer, int x, int y, int a4, int a5);5
void __fastcall scrollrt_draw_lower_2(int x, int y, int sx, int sy, int a5, int a6, int some_flag);5
void __fastcall scrollrt_draw_clipped_dungeon_2(char *buffer, int x, int y, int a4, int a5, int sx, int sy, int me_flag);5
void __fastcall scrollrt_draw_clipped_e_flag_2(char *buffer, int x, int y, int a4, signed int a5, int sx, int sy);5
void __fastcall scrollrt_draw_upper(int x, int y, int sx, int sy, int a5, int a6, int some_flag);5
void __fastcall scrollrt_draw_dungeon(char *buffer, int x, int y, int a4, int a5, int sx, int sy, int me_flag);5
void __fastcall DrawMonster(int x, int y, int a3, int a4, int mon_id, int a6, int a7);5
void __fastcall DrawObject(int x, int y, int a3, int a4, int pre_flag, int a6, int dir);5
void __fastcall scrollrt_draw_e_flag(char *buffer, int x, int y, int a4, int a5, int sx, int sy);5
void __fastcall DrawZoom(int x, int y);5
void __cdecl ClearScreenBuffer();5
#ifdef _DEBUG5
void __cdecl ScrollView();5
void __cdecl EnableFrameCount();5
#endif5
void __fastcall scrollrt_draw_game_screen(bool draw_cursor);5
void __cdecl scrollrt_draw_cursor_back_buffer();5
void __cdecl scrollrt_draw_cursor_item();5
void __fastcall DrawMain(int dwHgt, int draw_desc, int draw_hp, int draw_mana, int draw_sbar, int draw_btn);5
#ifdef _DEBUG5
void __cdecl DrawFPS();5
#endif5
void __fastcall DoBlitScreen(int dwX, int dwY, int dwWdt, int dwHgt);5
void __cdecl DrawAndBlit();5
5
/* data */5
5
extern int scrollrt_inf; // weak5
5
/* rdata */5
5
/* used in 1.00 debug */5
extern char *szMonModeAssert[18];5
extern char *szPlrModeAssert[12];5
5
#endif /* __SCROLLRT_H__ */5
//HEADER_GOES_HERE5
#ifndef __SETMAPS_H__5
#define __SETMAPS_H__5
5
int __fastcall ObjIndex(int x, int y);5
void __cdecl AddSKingObjs();5
void __cdecl AddSChamObjs();5
void __cdecl AddVileObjs();5
void __fastcall DRLG_SetMapTrans(char *sFileName);5
void __cdecl LoadSetMap();5
5
/* rdata */5
extern RECT8 QSRects[32];5
extern char *quest_level_names[];5
5
#endif /* __SETMAPS_H__ */5
//HEADER_GOES_HERE5
#ifndef __SHA_H__5
#define __SHA_H__5
5
/*5
 *  Define the SHA1 circular left shift macro5
 */5
#define SHA1CircularShift(bits,word) \5
				(((word) << (bits)) | ((word) >> (32-(bits))))5
#define SHA1HashSize 205
5
//sha5
extern SHA1Context sgSHA1[3];5
5
void __cdecl SHA1Clear();5
void __fastcall SHA1Result(int n, char Message_Digest[SHA1HashSize]);5
void __fastcall SHA1Calculate(int n, const char *data, char Message_Digest[SHA1HashSize]);5
void __fastcall SHA1Input(SHA1Context *context, const char *message_array, int len);5
void __fastcall SHA1ProcessMessageBlock(SHA1Context *context);5
void __fastcall SHA1Reset(int n);5
5
#endif /* __SHA_H__ */5
//HEADER_GOES_HERE5
#ifndef __SOUND_H__5
#define __SOUND_H__5
5
extern float sound_cpp_init_value;5
extern IDirectSoundBuffer *DSBs[8];5
extern IDirectSound *sglpDS;5
extern char gbSndInited;5
extern int sglMusicVolume;5
extern int sglSoundVolume;5
extern HMODULE hDsound_dll; // idb5
extern void *sgpMusicTrack;5
extern IDirectSoundBuffer *sglpDSB;5
5
void __cdecl sound_cpp_init();5
void __fastcall snd_update(bool bStopAll);5
void __fastcall snd_stop_snd(TSnd *pSnd);5
bool __fastcall snd_playing(TSnd *pSnd);5
void __fastcall snd_play_snd(TSnd *pSnd, int lVolume, int lPan);5
IDirectSoundBuffer *__fastcall sound_dup_channel(IDirectSoundBuffer *DSB);5
bool __fastcall sound_file_reload(TSnd *sound_file, IDirectSoundBuffer *DSB);5
TSnd *__fastcall sound_file_load(char *path);5
void __fastcall sound_CreateSoundBuffer(TSnd *sound_file);5
void __fastcall sound_file_cleanup(TSnd *sound_file);5
void __fastcall snd_init(HWND hWnd);5
void __fastcall sound_load_volume(char *value_name, int *value);5
void __fastcall sound_create_primary_buffer(int music_track);5
int __fastcall sound_DirectSoundCreate(GUID *guid, IDirectSound **DS, int always_null);5
void __cdecl sound_cleanup();5
void __fastcall sound_store_volume(char *key, int value);5
void __cdecl music_stop();5
void __fastcall music_start(int nTrack);5
void __fastcall sound_disable_music(bool disable);5
int __fastcall sound_get_or_set_music_volume(int volume);5
int __fastcall sound_get_or_set_sound_volume(int volume);5
5
/* data */5
5
extern int sound_inf; // weak5
5
/* rdata */5
5
extern char gbMusicOn; // weak5
extern char gbSoundOn; // weak5
extern char gbDupSounds; // weak5
extern int sgnMusicTrack;5
extern char *sgszMusicTracks[6];5
extern RECT8 QSRect[2]; /* psx version? */5
5
#endif /* __SOUND_H__ */5
//HEADER_GOES_HERE5
#ifndef __SPELLS_H__5
#define __SPELLS_H__5
5
int __fastcall GetManaAmount(int id, int sn);5
void __fastcall UseMana(int id, int sn);5
bool __fastcall CheckSpell(int id, int sn, char st, bool manaonly);5
void __fastcall CastSpell(int id, int spl, int sx, int sy, int dx, int dy, int caster, int spllvl);5
void __fastcall DoResurrect(int pnum, int rid);5
void __fastcall PlacePlayer(int pnum);5
void __fastcall DoHealOther(int pnum, int rid);5
5
/* rdata */5
5
extern SpellData spelldata[37];5
5
#endif /* __SPELLS_H__ */5
//HEADER_GOES_HERE5
#ifndef __STORES_H__5
#define __STORES_H__5
5
extern int stextup; // weak5
extern int storenumh; // weak5
extern int stextlhold; // weak5
extern ItemStruct boyitem;5
extern int stextshold; // idb5
extern ItemStruct premiumitem[6];5
extern void *pSTextBoxCels;5
extern int premiumlevel; // idb5
extern int talker; // weak5
extern STextStruct stext[24];5
extern char stextsize; // weak5
extern int stextsmax; // weak5
extern int InStoreFlag; // idb5
extern ItemStruct storehold[48];5
extern int gossipstart; // weak5
extern ItemStruct witchitem[20];5
extern int stextscrl; // weak5
extern int numpremium; // idb5
extern ItemStruct healitem[20];5
extern ItemStruct golditem;5
extern char storehidx[48];5
extern void *pSTextSlidCels;5
extern int stextvhold; // weak5
extern int stextsel; // weak5
extern char stextscrldbtn; // weak5
extern int gossipend; // weak5
extern void *pCelBuff;5
extern int stextsval; // idb5
extern int boylevel; // weak5
extern ItemStruct smithitem[20];5
extern int stextdown; // weak5
extern char stextscrlubtn; // weak5
extern char stextflag; // weak5
5
void __cdecl InitStores();5
void __cdecl SetupTownStores();5
void __cdecl FreeStoreMem();5
void __cdecl DrawSTextBack();5
void __fastcall PrintSString(int x, int y, unsigned char cjustflag, char *str, int col, int val);5
void __fastcall DrawSLine(int y);5
void __fastcall DrawSArrows(int a1, int a2);5
void __cdecl DrawSTextHelp();5
void __fastcall ClearSText(int s, int e);5
void __fastcall AddSLine(int y);5
void __fastcall AddSTextVal(int y, int val);5
void __fastcall OffsetSTextY(int y, int yo);5
void __fastcall AddSText(int x, int y, unsigned char j, char *str, int clr, int sel);5
void __cdecl StoreAutoPlace();5
void __cdecl S_StartSmith();5
void __fastcall S_ScrollSBuy(int idx);5
void __fastcall PrintStoreItem(ItemStruct *x, int l, char iclr);5
void __cdecl S_StartSBuy();5
void __fastcall S_ScrollSPBuy(int idx);5
bool __cdecl S_StartSPBuy();5
bool __fastcall SmithSellOk(int i);5
void __fastcall S_ScrollSSell(int idx);5
void __cdecl S_StartSSell();5
bool __fastcall SmithRepairOk(int i);5
void __cdecl S_StartSRepair();5
void __fastcall AddStoreHoldRepair(ItemStruct *itm, int i);5
void __cdecl S_StartWitch();5
void __fastcall S_ScrollWBuy(int idx);5
void __cdecl S_StartWBuy();5
bool __fastcall WitchSellOk(int i);5
void __cdecl S_StartWSell();5
bool __fastcall WitchRechargeOk(int i);5
void __fastcall AddStoreHoldRecharge(ItemStruct itm, int i);5
void __cdecl S_StartWRecharge();5
void __cdecl S_StartNoMoney();5
void __cdecl S_StartNoRoom();5
void __cdecl S_StartConfirm();5
void __cdecl S_StartBoy();5
void __cdecl S_StartBBoy();5
void __cdecl S_StartHealer();5
void __fastcall S_ScrollHBuy(int idx);5
void __cdecl S_StartHBuy();5
void __cdecl S_StartStory();5
bool __fastcall IdItemOk(ItemStruct *i);5
void __fastcall AddStoreHoldId(ItemStruct itm, int i);5
void __cdecl S_StartSIdentify();5
void __cdecl S_StartIdShow();5
void __cdecl S_StartTalk();5
void __cdecl S_StartTavern();5
void __cdecl S_StartBarMaid();5
void __cdecl S_StartDrunk();5
void __fastcall StartStore(char s);5
void __cdecl DrawSText();5
void __cdecl STextESC();5
void __cdecl STextUp();5
void __cdecl STextDown();5
void __cdecl STextPrior();5
void __cdecl STextNext();5
void __cdecl S_SmithEnter();5
void __fastcall SetGoldCurs(int pnum, int i);5
void __fastcall SetSpdbarGoldCurs(int pnum, int i);5
void __fastcall TakePlrsMoney(int cost);5
void __cdecl SmithBuyItem();5
void __cdecl S_SBuyEnter();5
void __cdecl SmithBuyPItem();5
void __cdecl S_SPBuyEnter();5
bool __fastcall StoreGoldFit(int idx);5
void __fastcall PlaceStoreGold(int v);5
void __cdecl StoreSellItem();5
void __cdecl S_SSellEnter();5
void __cdecl SmithRepairItem();5
void __cdecl S_SRepairEnter();5
void __cdecl S_WitchEnter();5
void __cdecl WitchBuyItem();5
void __cdecl S_WBuyEnter();5
void __cdecl S_WSellEnter();5
void __cdecl WitchRechargeItem();5
void __cdecl S_WRechargeEnter();5
void __cdecl S_BoyEnter();5
void __cdecl BoyBuyItem();5
void __cdecl HealerBuyItem();5
void __cdecl S_BBuyEnter();5
void __cdecl StoryIdItem();5
void __cdecl S_ConfirmEnter();5
void __cdecl S_HealerEnter();5
void __cdecl S_HBuyEnter();5
void __cdecl S_StoryEnter();5
void __cdecl S_SIDEnter();5
void __cdecl S_TalkEnter();5
void __cdecl S_TavernEnter();5
void __cdecl S_BarmaidEnter();5
void __cdecl S_DrunkEnter();5
void __cdecl STextEnter();5
void __cdecl CheckStoreBtn();5
void __cdecl ReleaseStoreBtn();5
5
/* rdata */5
5
extern int SStringY[24];5
extern char *talkname[9];5
5
#endif /* __STORES_H__ */5
//HEADER_GOES_HERE5
#ifndef __SYNC_H__5
#define __SYNC_H__5
5
extern short sync_word_6AA708[200];5
extern int dword_6AA898; // weak5
extern short sync_word_6AA89C[200];5
extern int dword_6AAA2C[2];5
extern int sgnSyncPInv; // weak5
5
int __fastcall sync_all_monsters(TSyncHeader *packet, int size);5
void __cdecl sync_one_monster();5
int __fastcall sync_monster_active(TSyncMonster *packet);5
int __fastcall sync_monster_pos(TSyncMonster *packet, int mon_id);5
int __fastcall sync_monster_active2(TSyncMonster *packet);5
char __fastcall SyncPlrInv(TSyncHeader *pItem);5
int __fastcall SyncData(int pnum, TSyncHeader *packet);5
void __fastcall sync_monster_data(int pnum, TSyncMonster *packet);5
void __cdecl sync_clear_pkt();5
5
#endif /* __SYNC_H__ */5
//HEADER_GOES_HERE5
#ifndef __TEXTDAT_H__5
#define __TEXTDAT_H__5
5
extern TextDataStruct alltext[259];5
extern int gdwAllTextEntries;5
5
#endif /* __TEXTDAT_H__ */5
//HEADER_GOES_HERE5
#ifndef __THEMES_H__5
#define __THEMES_H__5
5
extern int numthemes; // idb5
extern bool armorFlag; // weak5
extern int ThemeGoodIn[4];5
extern bool weaponFlag; // weak5
extern bool treasureFlag; // weak5
extern bool mFountainFlag; // weak5
extern bool cauldronFlag; // weak5
extern bool tFountainFlag; // weak5
extern int zharlib; // weak5
extern int themex; // idb5
extern int themey; // idb5
extern int themeVar1; // idb5
extern ThemeStruct themes[50];5
extern bool pFountainFlag; // weak5
extern bool bFountainFlag; // weak5
extern bool bCrossFlag; // weak5
5
bool __fastcall TFit_Shrine(int i);5
bool __fastcall TFit_Obj5(int t);5
bool __fastcall TFit_SkelRoom(int t);5
bool __fastcall TFit_GoatShrine(int t);5
bool __fastcall CheckThemeObj3(int xp, int yp, int t, int f);5
bool __fastcall TFit_Obj3(int t);5
bool __fastcall CheckThemeReqs(int t);5
bool __fastcall SpecialThemeFit(int i, int t);5
bool __fastcall CheckThemeRoom(int tv);5
void __cdecl InitThemes();5
void __cdecl HoldThemeRooms();5
void __fastcall PlaceThemeMonsts(int t, int f);5
void __fastcall Theme_Barrel(int t);5
void __fastcall Theme_Shrine(int t);5
void __fastcall Theme_MonstPit(int t);5
void __fastcall Theme_SkelRoom(int t);5
void __fastcall Theme_Treasure(int t);5
void __fastcall Theme_Library(int t);5
void __fastcall Theme_Torture(int t);5
void __fastcall Theme_BloodFountain(int t);5
void __fastcall Theme_Decap(int t);5
void __fastcall Theme_PurifyingFountain(int t);5
void __fastcall Theme_ArmorStand(int t);5
void __fastcall Theme_GoatShrine(int t);5
void __fastcall Theme_Cauldron(int t);5
void __fastcall Theme_MurkyFountain(int t);5
void __fastcall Theme_TearFountain(int t);5
void __fastcall Theme_BrnCross(int t);5
void __fastcall Theme_WeaponRack(int t);5
void __cdecl UpdateL4Trans();5
void __cdecl CreateThemeRooms();5
5
/* rdata */5
5
extern int ThemeGood[4];5
extern int trm5x[25];5
extern int trm5y[25];5
extern int trm3x[9];5
extern int trm3y[9];5
5
#endif /* __THEMES_H__ */5
//HEADER_GOES_HERE5
#ifndef __TMSG_H__5
#define __TMSG_H__5
5
extern TMsg *sgpTimedMsgHead;5
5
int __fastcall tmsg_get(unsigned char *pbMsg, char bLen);5
void __fastcall tmsg_add(unsigned char *pbMsg, char bLen);5
void __cdecl tmsg_cleanup();5
5
#endif /* __TMSG_H__ */5
//HEADER_GOES_HERE5
#ifndef __TOWN_H__5
#define __TOWN_H__5
5
void __fastcall town_clear_upper_buf(int a1);5
void __fastcall town_clear_low_buf(int y_related);5
void __fastcall town_draw_clipped_e_flag(void *buffer, int x, int y, int sx, int sy);5
void __fastcall town_draw_clipped_town(void *unused, int x, int y, int sx, int sy, int some_flag);5
void __fastcall town_draw_lower(int x, int y, int sx, int sy, int a5, int some_flag);5
void __fastcall town_draw_clipped_e_flag_2(void *buffer, int x, int y, int a4, int a5, int sx, int sy);5
void __fastcall town_draw_clipped_town_2(int x, int y, int a3, int a4, int a5, int sx, int sy, int some_flag);5
void __fastcall town_draw_lower_2(int x, int y, int sx, int sy, int a5, int a6, int some_flag);5
void __fastcall town_draw_e_flag(void *buffer, int x, int y, int a4, int dir, int sx, int sy);5
void __fastcall town_draw_town_all(void *buffer, int x, int y, int a4, int dir, int sx, int sy, int some_flag);5
void __fastcall town_draw_upper(int x, int y, int sx, int sy, int a5, int a6, int some_flag);5
void __fastcall T_DrawGame(int x, int y);5
void __fastcall T_DrawZoom(int x, int y);5
void __fastcall T_DrawView(int StartX, int StartY);5
void __cdecl town_init_dpiece_defs_map();5
void __fastcall T_FillSector(unsigned char *P3Tiles, unsigned char *pSector, int xi, int yi, int w, int h);5
void __fastcall T_FillTile(unsigned char *P3Tiles, int xx, int yy, int t);5
void __cdecl T_Pass3();5
void __fastcall CreateTown(int entry);5
5
#endif /* __TOWN_H__ */5
//HEADER_GOES_HERE5
#ifndef __TOWNERS_H__5
#define __TOWNERS_H__5
5
extern int storeflag; // weak5
extern int sgnCowMsg; // weak5
extern int numtowners; // idb5
extern int sgdwCowClicks; // weak5
extern int bannerflag; // weak // unused 0x6AAC285
extern int boyloadflag; // weak5
extern void *pCowCels; // idb5
extern TownerStruct towner[16];5
5
int __fastcall GetActiveTowner(int t);5
void __fastcall SetTownerGPtrs(void *pData, void **pAnim);5
void __fastcall NewTownerAnim(int tnum, void *pAnim, int numFrames, int Delay);5
void __fastcall InitTownerInfo(int i, int w, bool sel, int t, int x, int y, int ao, int tp);5
void __fastcall InitQstSnds(int i);5
void __cdecl InitSmith();5
void __cdecl InitBarOwner();5
void __cdecl InitTownDead();5
void __cdecl InitWitch();5
void __cdecl InitBarmaid();5
void __cdecl InitBoy();5
void __cdecl InitHealer();5
void __cdecl InitTeller();5
void __cdecl InitDrunk();5
void __cdecl InitCows();5
void __cdecl InitTowners();5
void __cdecl FreeTownerGFX();5
void __fastcall TownCtrlMsg(int i);5
void __cdecl TownBlackSmith();5
void __cdecl TownBarOwner();5
void __cdecl TownDead();5
void __cdecl TownHealer();5
void __cdecl TownStory();5
void __cdecl TownDrunk();5
void __cdecl TownBoy();5
void __cdecl TownWitch();5
void __cdecl TownBarMaid();5
void __cdecl TownCow();5
void __cdecl ProcessTowners();5
ItemStruct *__fastcall PlrHasItem(int pnum, int item, int *i);5
void __fastcall TownerTalk(int t);5
void __fastcall TalkToTowner(int p, int t);5
void __fastcall CowSFX(int pnum);5
5
/* data */5
5
extern int snSFX[3][3];5
5
/* rdata */5
5
extern char AnimOrder[6][148];5
extern int TownCowX[3];5
extern int TownCowY[3];5
extern int TownCowDir[3];5
extern int cowoffx[8];5
extern int cowoffy[8];5
extern QuestTalkData Qtalklist[11];5
extern int CowPlaying;5
5
#endif /* __TOWNERS_H__ */5
//HEADER_GOES_HERE5
#ifndef __TRACK_H__5
#define __TRACK_H__5
5
extern bool sgbIsScrolling; // weak5
extern int track_cpp_init_value; // weak5
extern int sgdwLastWalk; // weak5
extern bool sgbIsWalking; // weak5
5
void __cdecl track_cpp_init();5
void __cdecl track_process();5
void __fastcall track_repeat_walk(bool rep);5
bool __cdecl track_isscrolling();5
5
/* data */5
5
extern int track_inf; // weak5
5
#endif /* __TRACK_H__ */5
//HEADER_GOES_HERE5
#ifndef __TRIGS_H__5
#define __TRIGS_H__5
5
extern int trigflag[5];5
extern TriggerStruct trigs[5];5
extern int TWarpFrom; // weak5
5
void __cdecl InitNoTriggers();5
void __cdecl InitTownTriggers();5
void __cdecl InitL1Triggers();5
void __cdecl InitL2Triggers();5
void __cdecl InitL3Triggers();5
void __cdecl InitL4Triggers();5
void __cdecl InitSKingTriggers();5
void __cdecl InitSChambTriggers();5
void __cdecl InitPWaterTriggers();5
void __cdecl InitVPTriggers();5
unsigned char __cdecl ForceTownTrig();5
unsigned char __cdecl ForceL1Trig();5
unsigned char __cdecl ForceL2Trig();5
unsigned char __cdecl ForceL3Trig();5
unsigned char __cdecl ForceL4Trig();5
void __cdecl Freeupstairs();5
unsigned char __cdecl ForceSKingTrig();5
unsigned char __cdecl ForceSChambTrig();5
unsigned char __cdecl ForcePWaterTrig();5
void __cdecl CheckTrigForce();5
void __cdecl CheckTriggers();5
5
/* rdata */5
5
extern int TownDownList[11];5
extern int TownWarp1List[13];5
extern int L1UpList[12];5
extern int L1DownList[10];5
extern int L2UpList[3];5
extern int L2DownList[5];5
extern int L2TWarpUpList[3];5
extern int L3UpList[15];5
extern int L3DownList[9];5
extern int L3TWarpUpList[14];5
extern int L4UpList[4];5
extern int L4DownList[6];5
extern int L4TWarpUpList[4];5
extern int L4PentaList[33];5
5
#endif /* __TRIGS_H__ */5
//HEADER_GOES_HERE5
#ifndef __WAVE_H__5
#define __WAVE_H__5
5
extern int wave_cpp_init_value; // weak5
//int dword_6ABB9C; // weak5
5
void __cdecl wave_cpp_init();5
bool __fastcall WCloseFile(void *file);5
int __fastcall WGetFileSize(HANDLE hsFile, unsigned long *a2);5
void __fastcall WGetFileArchive(HANDLE hsFile, int *a2, char *dwInitParam);5
int __fastcall WOpenFile(char *dwInitParam, HANDLE *phsFile, int a3);5
char __fastcall WReadFile(HANDLE hsFile, char *buf, int a3);5
int __fastcall WSetFilePointer(HANDLE file1, int offset, HANDLE file2, int whence);5
int __fastcall LoadWaveFormat(HANDLE hsFile, WAVEFORMATEX *pwfx);5
void *__fastcall AllocateMemFile(HANDLE hsFile, MEMFILE *pMemFile, unsigned int a3);5
void __fastcall FreeMemFile(MEMFILE *pMemFile);5
int __fastcall ReadWaveFile(MEMFILE *pMemFile, WAVEFORMATEX *pwfx, int *a3);5
int __fastcall ReadMemFile(MEMFILE *pMemFile, void *lpBuf, size_t a3);5
void __fastcall FillMemFile(MEMFILE *pMemFile);5
int __fastcall SeekMemFile(MEMFILE *pMemFile, unsigned int lDist, int dwMethod);5
int __fastcall ReadWaveSection(MEMFILE *pMemFile, int a2, int *a3);5
void *__fastcall LoadWaveFile(HANDLE hsFile, WAVEFORMATEX *pwfx, int *a3);5
void __fastcall j_engine_mem_free(void *ptr);5
5
/* data */5
5
extern int wave_inf; // weak5
5
#endif /* __WAVE_H__ */5
//HEADER_GOES_HERE5
#ifndef __WORLD_H__5
#define __WORLD_H__5
5
void __fastcall drawTopArchesUpperScreen(void *a1);5
void __fastcall drawBottomArchesUpperScreen(void *a1, int a2);5
void __fastcall drawUpperScreen(void *a1);5
void __fastcall drawTopArchesLowerScreen(void *a1);5
void __fastcall drawBottomArchesLowerScreen(void *a1, int a2);5
void __fastcall drawLowerScreen(void *a1);5
void __fastcall world_draw_black_tile(char *dst_buf);5
5
/* rdata */5
5
extern int world_4B325C;5
extern unsigned char world_4B3260[5];5
extern int world_4B3265;5
extern int world_4B3269[5];5
extern unsigned int tile_draw_masks[3][32];5
extern int world_4B33FD[48];5
extern int world_4B34BD[17];5
extern int world_4B3501[17];5
5
#endif /* __WORLD_H__ */5
